package carml

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PredictHandlerFunc turns a function with the right signature into a predict handler
type PredictHandlerFunc func(PredictParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PredictHandlerFunc) Handle(params PredictParams) middleware.Responder {
	return fn(params)
}

// PredictHandler interface for that can handle valid predict params
type PredictHandler interface {
	Handle(PredictParams) middleware.Responder
}

// NewPredict creates a new http.Handler for the predict operation
func NewPredict(ctx *middleware.Context, handler PredictHandler) *Predict {
	return &Predict{Context: ctx, Handler: handler}
}

/*Predict swagger:route POST /v1/carml/{framework_name}/{model_name}/predict carml predict

Predict predict API

*/
type Predict struct {
	Context *middleware.Context
	Handler PredictHandler
}

func (o *Predict) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPredictParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
