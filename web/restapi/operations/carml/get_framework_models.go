package carml

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetFrameworkModelsHandlerFunc turns a function with the right signature into a get framework models handler
type GetFrameworkModelsHandlerFunc func(GetFrameworkModelsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetFrameworkModelsHandlerFunc) Handle(params GetFrameworkModelsParams) middleware.Responder {
	return fn(params)
}

// GetFrameworkModelsHandler interface for that can handle valid get framework models params
type GetFrameworkModelsHandler interface {
	Handle(GetFrameworkModelsParams) middleware.Responder
}

// NewGetFrameworkModels creates a new http.Handler for the get framework models operation
func NewGetFrameworkModels(ctx *middleware.Context, handler GetFrameworkModelsHandler) *GetFrameworkModels {
	return &GetFrameworkModels{Context: ctx, Handler: handler}
}

/*GetFrameworkModels swagger:route POST /v1/framework/{framework_name}/{framework_version}/models carml getFrameworkModels

GetFrameworkModels get framework models API

*/
type GetFrameworkModels struct {
	Context *middleware.Context
	Handler GetFrameworkModelsHandler
}

func (o *GetFrameworkModels) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetFrameworkModelsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
