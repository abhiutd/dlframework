package carml

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/rai-project/dlframework/web/models"
)

// NewGetModelManifestParams creates a new GetModelManifestParams object
// with the default values initialized.
func NewGetModelManifestParams() GetModelManifestParams {
	var ()
	return GetModelManifestParams{}
}

// GetModelManifestParams contains all the bound params for the get model manifest operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetModelManifest
type GetModelManifestParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request

	/*
	  Required: true
	  In: body
	*/
	Body *models.DlframeworkGetModelManifestRequest
	/*
	  Required: true
	  In: path
	*/
	ModelName string
	/*
	  Required: true
	  In: path
	*/
	ModelVersion string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *GetModelManifestParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body models.DlframeworkGetModelManifestRequest
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			if err == io.EOF {
				res = append(res, errors.Required("body", "body"))
			} else {
				res = append(res, errors.NewParseError("body", "body", "", err))
			}

		} else {
			if err := body.Validate(route.Formats); err != nil {
				res = append(res, err)
			}

			if len(res) == 0 {
				o.Body = &body
			}
		}

	} else {
		res = append(res, errors.Required("body", "body"))
	}

	rModelName, rhkModelName, _ := route.Params.GetOK("model_name")
	if err := o.bindModelName(rModelName, rhkModelName, route.Formats); err != nil {
		res = append(res, err)
	}

	rModelVersion, rhkModelVersion, _ := route.Params.GetOK("model_version")
	if err := o.bindModelVersion(rModelVersion, rhkModelVersion, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetModelManifestParams) bindModelName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	o.ModelName = raw

	return nil
}

func (o *GetModelManifestParams) bindModelVersion(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	o.ModelVersion = raw

	return nil
}
