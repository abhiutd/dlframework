package carml

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PredictUrlxHandlerFunc turns a function with the right signature into a predict urlx handler
type PredictUrlxHandlerFunc func(PredictUrlxParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PredictUrlxHandlerFunc) Handle(params PredictUrlxParams) middleware.Responder {
	return fn(params)
}

// PredictUrlxHandler interface for that can handle valid predict urlx params
type PredictUrlxHandler interface {
	Handle(PredictUrlxParams) middleware.Responder
}

// NewPredictUrlx creates a new http.Handler for the predict urlx operation
func NewPredictUrlx(ctx *middleware.Context, handler PredictUrlxHandler) *PredictUrlx {
	return &PredictUrlx{Context: ctx, Handler: handler}
}

/*PredictUrlx swagger:route POST /v1/carml/{framework_name}/{model_name}/predict_url carml predictUrlx

PredictUrlx predict urlx API

*/
type PredictUrlx struct {
	Context *middleware.Context
	Handler PredictUrlxHandler
}

func (o *PredictUrlx) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPredictUrlxParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
