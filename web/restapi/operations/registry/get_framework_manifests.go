package registry

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetFrameworkManifestsHandlerFunc turns a function with the right signature into a get framework manifests handler
type GetFrameworkManifestsHandlerFunc func(GetFrameworkManifestsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetFrameworkManifestsHandlerFunc) Handle(params GetFrameworkManifestsParams) middleware.Responder {
	return fn(params)
}

// GetFrameworkManifestsHandler interface for that can handle valid get framework manifests params
type GetFrameworkManifestsHandler interface {
	Handle(GetFrameworkManifestsParams) middleware.Responder
}

// NewGetFrameworkManifests creates a new http.Handler for the get framework manifests operation
func NewGetFrameworkManifests(ctx *middleware.Context, handler GetFrameworkManifestsHandler) *GetFrameworkManifests {
	return &GetFrameworkManifests{Context: ctx, Handler: handler}
}

/*GetFrameworkManifests swagger:route GET /v1/frameworks registry getFrameworkManifests

GetFrameworkManifests get framework manifests API

*/
type GetFrameworkManifests struct {
	Context *middleware.Context
	Handler GetFrameworkManifestsHandler
}

func (o *GetFrameworkManifests) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetFrameworkManifestsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
