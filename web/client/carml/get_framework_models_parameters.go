package carml

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetFrameworkModelsParams creates a new GetFrameworkModelsParams object
// with the default values initialized.
func NewGetFrameworkModelsParams() *GetFrameworkModelsParams {
	var ()
	return &GetFrameworkModelsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetFrameworkModelsParamsWithTimeout creates a new GetFrameworkModelsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetFrameworkModelsParamsWithTimeout(timeout time.Duration) *GetFrameworkModelsParams {
	var ()
	return &GetFrameworkModelsParams{

		timeout: timeout,
	}
}

// NewGetFrameworkModelsParamsWithContext creates a new GetFrameworkModelsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetFrameworkModelsParamsWithContext(ctx context.Context) *GetFrameworkModelsParams {
	var ()
	return &GetFrameworkModelsParams{

		Context: ctx,
	}
}

// NewGetFrameworkModelsParamsWithHTTPClient creates a new GetFrameworkModelsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetFrameworkModelsParamsWithHTTPClient(client *http.Client) *GetFrameworkModelsParams {
	var ()
	return &GetFrameworkModelsParams{
		HTTPClient: client,
	}
}

/*GetFrameworkModelsParams contains all the parameters to send to the API endpoint
for the get framework models operation typically these are written to a http.Request
*/
type GetFrameworkModelsParams struct {

	/*FrameworkName*/
	FrameworkName string
	/*FrameworkVersion*/
	FrameworkVersion string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get framework models params
func (o *GetFrameworkModelsParams) WithTimeout(timeout time.Duration) *GetFrameworkModelsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get framework models params
func (o *GetFrameworkModelsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get framework models params
func (o *GetFrameworkModelsParams) WithContext(ctx context.Context) *GetFrameworkModelsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get framework models params
func (o *GetFrameworkModelsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get framework models params
func (o *GetFrameworkModelsParams) WithHTTPClient(client *http.Client) *GetFrameworkModelsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get framework models params
func (o *GetFrameworkModelsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFrameworkName adds the frameworkName to the get framework models params
func (o *GetFrameworkModelsParams) WithFrameworkName(frameworkName string) *GetFrameworkModelsParams {
	o.SetFrameworkName(frameworkName)
	return o
}

// SetFrameworkName adds the frameworkName to the get framework models params
func (o *GetFrameworkModelsParams) SetFrameworkName(frameworkName string) {
	o.FrameworkName = frameworkName
}

// WithFrameworkVersion adds the frameworkVersion to the get framework models params
func (o *GetFrameworkModelsParams) WithFrameworkVersion(frameworkVersion string) *GetFrameworkModelsParams {
	o.SetFrameworkVersion(frameworkVersion)
	return o
}

// SetFrameworkVersion adds the frameworkVersion to the get framework models params
func (o *GetFrameworkModelsParams) SetFrameworkVersion(frameworkVersion string) {
	o.FrameworkVersion = frameworkVersion
}

// WriteToRequest writes these params to a swagger request
func (o *GetFrameworkModelsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param framework_name
	if err := r.SetPathParam("framework_name", o.FrameworkName); err != nil {
		return err
	}

	// path param framework_version
	if err := r.SetPathParam("framework_version", o.FrameworkVersion); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
