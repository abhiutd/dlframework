package carml

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new carml API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for carml API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetFrameworkManifest get framework manifest API
*/
func (a *Client) GetFrameworkManifest(params *GetFrameworkManifestParams) (*GetFrameworkManifestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFrameworkManifestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetFrameworkManifest",
		Method:             "GET",
		PathPattern:        "/v1/framework/{framework_name}/{framework_version}/info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFrameworkManifestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFrameworkManifestOK), nil

}

/*
GetFrameworkManifests get framework manifests API
*/
func (a *Client) GetFrameworkManifests(params *GetFrameworkManifestsParams) (*GetFrameworkManifestsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFrameworkManifestsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetFrameworkManifests",
		Method:             "GET",
		PathPattern:        "/v1/frameworks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFrameworkManifestsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFrameworkManifestsOK), nil

}

/*
GetFrameworkModelManifest get framework model manifest API
*/
func (a *Client) GetFrameworkModelManifest(params *GetFrameworkModelManifestParams) (*GetFrameworkModelManifestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFrameworkModelManifestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetFrameworkModelManifest",
		Method:             "POST",
		PathPattern:        "/v1/framework/{framework_name}/{framework_version}/model/{model_name}/{model_version}/info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFrameworkModelManifestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFrameworkModelManifestOK), nil

}

/*
GetFrameworkModels get framework models API
*/
func (a *Client) GetFrameworkModels(params *GetFrameworkModelsParams) (*GetFrameworkModelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFrameworkModelsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetFrameworkModels",
		Method:             "GET",
		PathPattern:        "/v1/framework/{framework_name}/{framework_version}/models",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFrameworkModelsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFrameworkModelsOK), nil

}

/*
GetModelManifest get model manifest API
*/
func (a *Client) GetModelManifest(params *GetModelManifestParams) (*GetModelManifestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetModelManifestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetModelManifest",
		Method:             "POST",
		PathPattern:        "/v1/model/{model_name}/{model_version}/info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetModelManifestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetModelManifestOK), nil

}

/*
GetModelManifests get model manifests API
*/
func (a *Client) GetModelManifests(params *GetModelManifestsParams) (*GetModelManifestsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetModelManifestsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetModelManifests",
		Method:             "GET",
		PathPattern:        "/v1/models",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetModelManifestsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetModelManifestsOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
