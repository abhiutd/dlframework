package carml

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPredictUrlxParams creates a new PredictUrlxParams object
// with the default values initialized.
func NewPredictUrlxParams() *PredictUrlxParams {
	var ()
	return &PredictUrlxParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPredictUrlxParamsWithTimeout creates a new PredictUrlxParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPredictUrlxParamsWithTimeout(timeout time.Duration) *PredictUrlxParams {
	var ()
	return &PredictUrlxParams{

		timeout: timeout,
	}
}

// NewPredictUrlxParamsWithContext creates a new PredictUrlxParams object
// with the default values initialized, and the ability to set a context for a request
func NewPredictUrlxParamsWithContext(ctx context.Context) *PredictUrlxParams {
	var ()
	return &PredictUrlxParams{

		Context: ctx,
	}
}

// NewPredictUrlxParamsWithHTTPClient creates a new PredictUrlxParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPredictUrlxParamsWithHTTPClient(client *http.Client) *PredictUrlxParams {
	var ()
	return &PredictUrlxParams{
		HTTPClient: client,
	}
}

/*PredictUrlxParams contains all the parameters to send to the API endpoint
for the predict urlx operation typically these are written to a http.Request
*/
type PredictUrlxParams struct {

	/*Body*/
	Body *string
	/*FrameworkName*/
	FrameworkName string
	/*ModelName*/
	ModelName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the predict urlx params
func (o *PredictUrlxParams) WithTimeout(timeout time.Duration) *PredictUrlxParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the predict urlx params
func (o *PredictUrlxParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the predict urlx params
func (o *PredictUrlxParams) WithContext(ctx context.Context) *PredictUrlxParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the predict urlx params
func (o *PredictUrlxParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the predict urlx params
func (o *PredictUrlxParams) WithHTTPClient(client *http.Client) *PredictUrlxParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the predict urlx params
func (o *PredictUrlxParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the predict urlx params
func (o *PredictUrlxParams) WithBody(body *string) *PredictUrlxParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the predict urlx params
func (o *PredictUrlxParams) SetBody(body *string) {
	o.Body = body
}

// WithFrameworkName adds the frameworkName to the predict urlx params
func (o *PredictUrlxParams) WithFrameworkName(frameworkName string) *PredictUrlxParams {
	o.SetFrameworkName(frameworkName)
	return o
}

// SetFrameworkName adds the frameworkName to the predict urlx params
func (o *PredictUrlxParams) SetFrameworkName(frameworkName string) {
	o.FrameworkName = frameworkName
}

// WithModelName adds the modelName to the predict urlx params
func (o *PredictUrlxParams) WithModelName(modelName string) *PredictUrlxParams {
	o.SetModelName(modelName)
	return o
}

// SetModelName adds the modelName to the predict urlx params
func (o *PredictUrlxParams) SetModelName(modelName string) {
	o.ModelName = modelName
}

// WriteToRequest writes these params to a swagger request
func (o *PredictUrlxParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if err := r.SetBodyParam(o.Body); err != nil {
		return err
	}

	// path param framework_name
	if err := r.SetPathParam("framework_name", o.FrameworkName); err != nil {
		return err
	}

	// path param model_name
	if err := r.SetPathParam("model_name", o.ModelName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
