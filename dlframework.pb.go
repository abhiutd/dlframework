// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dlframework.proto

/*
	Package dlframework is a generated protocol buffer package.

	It is generated from these files:
		dlframework.proto

	It has these top-level messages:
		ErrorStatus
		ContainerHardware
		FrameworkManifest
		ModelManifest
		FrameworkRequest
		FrameworkManifestsResponse
		Agent
		Agents
		ModelRequest
		ModelManifestsResponse
		PredictRequest
		PredictionFeature
		PredictResponse
*/
package dlframework

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/types"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/gogo/protobuf/gogoproto"

import bytes "bytes"

import strings "strings"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ErrorStatus struct {
	Ok      bool   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty" yaml:"ok,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty" yaml:"message,omitempty"`
}

func (m *ErrorStatus) Reset()                    { *m = ErrorStatus{} }
func (*ErrorStatus) ProtoMessage()               {}
func (*ErrorStatus) Descriptor() ([]byte, []int) { return fileDescriptorDlframework, []int{0} }

func (m *ErrorStatus) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *ErrorStatus) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ContainerHardware struct {
	Gpu string `protobuf:"bytes,1,opt,name=gpu,proto3" json:"gpu,omitempty" yaml:"gpu,omitempty"`
	Cpu string `protobuf:"bytes,2,opt,name=cpu,proto3" json:"cpu,omitempty" yaml:"cpu,omitempty"`
}

func (m *ContainerHardware) Reset()                    { *m = ContainerHardware{} }
func (*ContainerHardware) ProtoMessage()               {}
func (*ContainerHardware) Descriptor() ([]byte, []int) { return fileDescriptorDlframework, []int{1} }

func (m *ContainerHardware) GetGpu() string {
	if m != nil {
		return m.Gpu
	}
	return ""
}

func (m *ContainerHardware) GetCpu() string {
	if m != nil {
		return m.Cpu
	}
	return ""
}

type FrameworkManifest struct {
	Name      string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	Version   string                        `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty" yaml:"version,omitempty"`
	Container map[string]*ContainerHardware `protobuf:"bytes,3,rep,name=container" json:"container,omitempty" yaml:"container,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *FrameworkManifest) Reset()                    { *m = FrameworkManifest{} }
func (*FrameworkManifest) ProtoMessage()               {}
func (*FrameworkManifest) Descriptor() ([]byte, []int) { return fileDescriptorDlframework, []int{2} }

func (m *FrameworkManifest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FrameworkManifest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *FrameworkManifest) GetContainer() map[string]*ContainerHardware {
	if m != nil {
		return m.Container
	}
	return nil
}

type ModelManifest struct {
	Name              string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	Version           string                        `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty" yaml:"version,omitempty"`
	Framework         *FrameworkManifest            `protobuf:"bytes,3,opt,name=framework" json:"framework,omitempty" yaml:"framework,omitempty"`
	Container         map[string]*ContainerHardware `protobuf:"bytes,4,rep,name=container" json:"container,omitempty" yaml:"container,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	Description       string                        `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty" yaml:"description,omitempty"`
	Reference         []string                      `protobuf:"bytes,6,rep,name=reference" json:"reference,omitempty" yaml:"references,omitempty"`
	License           string                        `protobuf:"bytes,7,opt,name=license,proto3" json:"license,omitempty" yaml:"license,omitempty"`
	Inputs            []*ModelManifest_Type         `protobuf:"bytes,8,rep,name=inputs" json:"inputs,omitempty" yaml:"inputs,omitempty"`
	Output            *ModelManifest_Type           `protobuf:"bytes,9,opt,name=output" json:"output,omitempty" yaml:"output,omitempty"`
	BeforePreprocess  string                        `protobuf:"bytes,10,opt,name=before_preprocess,json=beforePreprocess,proto3" json:"before_preprocess,omitempty" yaml:"before_preprocess,omitempty"`
	Preprocess        string                        `protobuf:"bytes,11,opt,name=preprocess,proto3" json:"preprocess,omitempty" yaml:"preprocess,omitempty"`
	AfterPreprocess   string                        `protobuf:"bytes,12,opt,name=after_preprocess,json=afterPreprocess,proto3" json:"after_preprocess,omitempty" yaml:"after_preprocess,omitempty"`
	BeforePostprocess string                        `protobuf:"bytes,13,opt,name=before_postprocess,json=beforePostprocess,proto3" json:"before_postprocess,omitempty" yaml:"before_postprocess,omitempty"`
	Postprocess       string                        `protobuf:"bytes,14,opt,name=postprocess,proto3" json:"postprocess,omitempty" yaml:"postprocess,omitempty"`
	AfterPostprocess  string                        `protobuf:"bytes,15,opt,name=after_postprocess,json=afterPostprocess,proto3" json:"after_postprocess,omitempty" yaml:"after_postprocess,omitempty"`
	Model             *ModelManifest_Model          `protobuf:"bytes,16,opt,name=model" json:"model,omitempty" yaml:"model,omitempty"`
	Attributes        map[string]string             `protobuf:"bytes,17,rep,name=attributes" json:"attributes,omitempty" yaml:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ModelManifest) Reset()                    { *m = ModelManifest{} }
func (*ModelManifest) ProtoMessage()               {}
func (*ModelManifest) Descriptor() ([]byte, []int) { return fileDescriptorDlframework, []int{3} }

func (m *ModelManifest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ModelManifest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ModelManifest) GetFramework() *FrameworkManifest {
	if m != nil {
		return m.Framework
	}
	return nil
}

func (m *ModelManifest) GetContainer() map[string]*ContainerHardware {
	if m != nil {
		return m.Container
	}
	return nil
}

func (m *ModelManifest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ModelManifest) GetReference() []string {
	if m != nil {
		return m.Reference
	}
	return nil
}

func (m *ModelManifest) GetLicense() string {
	if m != nil {
		return m.License
	}
	return ""
}

func (m *ModelManifest) GetInputs() []*ModelManifest_Type {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *ModelManifest) GetOutput() *ModelManifest_Type {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *ModelManifest) GetBeforePreprocess() string {
	if m != nil {
		return m.BeforePreprocess
	}
	return ""
}

func (m *ModelManifest) GetPreprocess() string {
	if m != nil {
		return m.Preprocess
	}
	return ""
}

func (m *ModelManifest) GetAfterPreprocess() string {
	if m != nil {
		return m.AfterPreprocess
	}
	return ""
}

func (m *ModelManifest) GetBeforePostprocess() string {
	if m != nil {
		return m.BeforePostprocess
	}
	return ""
}

func (m *ModelManifest) GetPostprocess() string {
	if m != nil {
		return m.Postprocess
	}
	return ""
}

func (m *ModelManifest) GetAfterPostprocess() string {
	if m != nil {
		return m.AfterPostprocess
	}
	return ""
}

func (m *ModelManifest) GetModel() *ModelManifest_Model {
	if m != nil {
		return m.Model
	}
	return nil
}

func (m *ModelManifest) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type ModelManifest_Type struct {
	Type        string                                   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty" yaml:"type,omitempty"`
	Description string                                   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty" yaml:"description,omitempty"`
	Parameters  map[string]*ModelManifest_Type_Parameter `protobuf:"bytes,3,rep,name=parameters" json:"parameters,omitempty" yaml:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ModelManifest_Type) Reset()                    { *m = ModelManifest_Type{} }
func (*ModelManifest_Type) ProtoMessage()               {}
func (*ModelManifest_Type) Descriptor() ([]byte, []int) { return fileDescriptorDlframework, []int{3, 0} }

func (m *ModelManifest_Type) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ModelManifest_Type) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ModelManifest_Type) GetParameters() map[string]*ModelManifest_Type_Parameter {
	if m != nil {
		return m.Parameters
	}
	return nil
}

type ModelManifest_Type_Parameter struct {
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" yaml:",inline"`
}

func (m *ModelManifest_Type_Parameter) Reset()      { *m = ModelManifest_Type_Parameter{} }
func (*ModelManifest_Type_Parameter) ProtoMessage() {}
func (*ModelManifest_Type_Parameter) Descriptor() ([]byte, []int) {
	return fileDescriptorDlframework, []int{3, 0, 0}
}

func (m *ModelManifest_Type_Parameter) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type ModelManifest_Model struct {
	BaseUrl     string `protobuf:"bytes,1,opt,name=base_url,json=baseUrl,proto3" json:"base_url,omitempty" yaml:"base_url,omitempty"`
	WeightsPath string `protobuf:"bytes,2,opt,name=weights_path,json=weightsPath,proto3" json:"weights_path,omitempty" yaml:"weights_path,omitempty"`
	GraphPath   string `protobuf:"bytes,3,opt,name=graph_path,json=graphPath,proto3" json:"graph_path,omitempty" yaml:"graph_path,omitempty"`
	IsArchive   bool   `protobuf:"varint,4,opt,name=is_archive,json=isArchive,proto3" json:"is_archive,omitempty" yaml:"is_archive,omitempty"`
}

func (m *ModelManifest_Model) Reset()      { *m = ModelManifest_Model{} }
func (*ModelManifest_Model) ProtoMessage() {}
func (*ModelManifest_Model) Descriptor() ([]byte, []int) {
	return fileDescriptorDlframework, []int{3, 1}
}

func (m *ModelManifest_Model) GetBaseUrl() string {
	if m != nil {
		return m.BaseUrl
	}
	return ""
}

func (m *ModelManifest_Model) GetWeightsPath() string {
	if m != nil {
		return m.WeightsPath
	}
	return ""
}

func (m *ModelManifest_Model) GetGraphPath() string {
	if m != nil {
		return m.GraphPath
	}
	return ""
}

func (m *ModelManifest_Model) GetIsArchive() bool {
	if m != nil {
		return m.IsArchive
	}
	return false
}

type FrameworkRequest struct {
	FrameworkName    string `protobuf:"bytes,1,opt,name=framework_name,json=frameworkName,proto3" json:"framework_name,omitempty" yaml:"framework_name,omitempty"`
	FrameworkVersion string `protobuf:"bytes,2,opt,name=framework_version,json=frameworkVersion,proto3" json:"framework_version,omitempty" yaml:"framework_version,omitempty"`
}

func (m *FrameworkRequest) Reset()                    { *m = FrameworkRequest{} }
func (*FrameworkRequest) ProtoMessage()               {}
func (*FrameworkRequest) Descriptor() ([]byte, []int) { return fileDescriptorDlframework, []int{4} }

func (m *FrameworkRequest) GetFrameworkName() string {
	if m != nil {
		return m.FrameworkName
	}
	return ""
}

func (m *FrameworkRequest) GetFrameworkVersion() string {
	if m != nil {
		return m.FrameworkVersion
	}
	return ""
}

type FrameworkManifestsResponse struct {
	Manifests []*FrameworkManifest `protobuf:"bytes,1,rep,name=manifests" json:"manifests,omitempty" yaml:"manifests,omitempty"`
}

func (m *FrameworkManifestsResponse) Reset()      { *m = FrameworkManifestsResponse{} }
func (*FrameworkManifestsResponse) ProtoMessage() {}
func (*FrameworkManifestsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorDlframework, []int{5}
}

func (m *FrameworkManifestsResponse) GetManifests() []*FrameworkManifest {
	if m != nil {
		return m.Manifests
	}
	return nil
}

type Agent struct {
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty" yaml:"host,omitempty"`
	Port string `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty" yaml:"port,omitempty"`
}

func (m *Agent) Reset()                    { *m = Agent{} }
func (*Agent) ProtoMessage()               {}
func (*Agent) Descriptor() ([]byte, []int) { return fileDescriptorDlframework, []int{6} }

func (m *Agent) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Agent) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

type Agents struct {
	Agents []*Agent `protobuf:"bytes,1,rep,name=agents" json:"agents,omitempty" yaml:"agents,omitempty"`
}

func (m *Agents) Reset()                    { *m = Agents{} }
func (*Agents) ProtoMessage()               {}
func (*Agents) Descriptor() ([]byte, []int) { return fileDescriptorDlframework, []int{7} }

func (m *Agents) GetAgents() []*Agent {
	if m != nil {
		return m.Agents
	}
	return nil
}

type ModelRequest struct {
	FrameworkName    string `protobuf:"bytes,1,opt,name=framework_name,json=frameworkName,proto3" json:"framework_name,omitempty" yaml:"framework_name,omitempty"`
	FrameworkVersion string `protobuf:"bytes,2,opt,name=framework_version,json=frameworkVersion,proto3" json:"framework_version,omitempty" yaml:"framework_version,omitempty"`
	ModelName        string `protobuf:"bytes,3,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty" yaml:"model_name,omitempty"`
	ModelVersion     string `protobuf:"bytes,4,opt,name=model_version,json=modelVersion,proto3" json:"model_version,omitempty" yaml:"model_version,omitempty"`
}

func (m *ModelRequest) Reset()                    { *m = ModelRequest{} }
func (*ModelRequest) ProtoMessage()               {}
func (*ModelRequest) Descriptor() ([]byte, []int) { return fileDescriptorDlframework, []int{8} }

func (m *ModelRequest) GetFrameworkName() string {
	if m != nil {
		return m.FrameworkName
	}
	return ""
}

func (m *ModelRequest) GetFrameworkVersion() string {
	if m != nil {
		return m.FrameworkVersion
	}
	return ""
}

func (m *ModelRequest) GetModelName() string {
	if m != nil {
		return m.ModelName
	}
	return ""
}

func (m *ModelRequest) GetModelVersion() string {
	if m != nil {
		return m.ModelVersion
	}
	return ""
}

type ModelManifestsResponse struct {
	Manifests []*ModelManifest `protobuf:"bytes,1,rep,name=manifests" json:"manifests,omitempty" yaml:"manifests,omitempty"`
}

func (m *ModelManifestsResponse) Reset()      { *m = ModelManifestsResponse{} }
func (*ModelManifestsResponse) ProtoMessage() {}
func (*ModelManifestsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorDlframework, []int{9}
}

func (m *ModelManifestsResponse) GetManifests() []*ModelManifest {
	if m != nil {
		return m.Manifests
	}
	return nil
}

type PredictRequest struct {
	ModelName        string `protobuf:"bytes,1,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty" yaml:"model_name,omitempty"`
	ModelVersion     string `protobuf:"bytes,2,opt,name=model_version,json=modelVersion,proto3" json:"model_version,omitempty" yaml:"model_version,omitempty"`
	FrameworkName    string `protobuf:"bytes,3,opt,name=framework_name,json=frameworkName,proto3" json:"framework_name,omitempty" yaml:"framework_name,omitempty"`
	FrameworkVersion string `protobuf:"bytes,4,opt,name=framework_version,json=frameworkVersion,proto3" json:"framework_version,omitempty" yaml:"framework_version,omitempty"`
	Limit            int32  `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty" yaml:"limit,omitempty"`
	// Types that are valid to be assigned to Input:
	//	*PredictRequest_Data
	//	*PredictRequest_Url
	Input isPredictRequest_Input `protobuf_oneof:"input"`
}

func (m *PredictRequest) Reset()                    { *m = PredictRequest{} }
func (*PredictRequest) ProtoMessage()               {}
func (*PredictRequest) Descriptor() ([]byte, []int) { return fileDescriptorDlframework, []int{10} }

type isPredictRequest_Input interface {
	isPredictRequest_Input()
	Equal(interface{}) bool
	VerboseEqual(interface{}) error
	MarshalTo([]byte) (int, error)
	Size() int
}

type PredictRequest_Data struct {
	Data []byte `protobuf:"bytes,6,opt,name=data,proto3,oneof"`
}
type PredictRequest_Url struct {
	Url string `protobuf:"bytes,7,opt,name=url,proto3,oneof"`
}

func (*PredictRequest_Data) isPredictRequest_Input() {}
func (*PredictRequest_Url) isPredictRequest_Input()  {}

func (m *PredictRequest) GetInput() isPredictRequest_Input {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *PredictRequest) GetModelName() string {
	if m != nil {
		return m.ModelName
	}
	return ""
}

func (m *PredictRequest) GetModelVersion() string {
	if m != nil {
		return m.ModelVersion
	}
	return ""
}

func (m *PredictRequest) GetFrameworkName() string {
	if m != nil {
		return m.FrameworkName
	}
	return ""
}

func (m *PredictRequest) GetFrameworkVersion() string {
	if m != nil {
		return m.FrameworkVersion
	}
	return ""
}

func (m *PredictRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *PredictRequest) GetData() []byte {
	if x, ok := m.GetInput().(*PredictRequest_Data); ok {
		return x.Data
	}
	return nil
}

func (m *PredictRequest) GetUrl() string {
	if x, ok := m.GetInput().(*PredictRequest_Url); ok {
		return x.Url
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PredictRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _PredictRequest_OneofMarshaler, _PredictRequest_OneofUnmarshaler, _PredictRequest_OneofSizer, []interface{}{
		(*PredictRequest_Data)(nil),
		(*PredictRequest_Url)(nil),
	}
}

func _PredictRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PredictRequest)
	// input
	switch x := m.Input.(type) {
	case *PredictRequest_Data:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		_ = b.EncodeRawBytes(x.Data)
	case *PredictRequest_Url:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Url)
	case nil:
	default:
		return fmt.Errorf("PredictRequest.Input has unexpected type %T", x)
	}
	return nil
}

func _PredictRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PredictRequest)
	switch tag {
	case 6: // input.data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Input = &PredictRequest_Data{x}
		return true, err
	case 7: // input.url
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Input = &PredictRequest_Url{x}
		return true, err
	default:
		return false, nil
	}
}

func _PredictRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*PredictRequest)
	// input
	switch x := m.Input.(type) {
	case *PredictRequest_Data:
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Data)))
		n += len(x.Data)
	case *PredictRequest_Url:
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Url)))
		n += len(x.Url)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type PredictionFeature struct {
	Index       int64   `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty" yaml:"index,omitempty"`
	Name        string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	Probability float32 `protobuf:"fixed32,3,opt,name=probability,proto3" json:"probability,omitempty" yaml:"probability,omitempty"`
}

func (m *PredictionFeature) Reset()                    { *m = PredictionFeature{} }
func (*PredictionFeature) ProtoMessage()               {}
func (*PredictionFeature) Descriptor() ([]byte, []int) { return fileDescriptorDlframework, []int{11} }

func (m *PredictionFeature) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *PredictionFeature) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PredictionFeature) GetProbability() float32 {
	if m != nil {
		return m.Probability
	}
	return 0
}

type PredictResponse struct {
	Id       string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id,omitempty"`
	Features []*PredictionFeature `protobuf:"bytes,2,rep,name=features" json:"features,omitempty" yaml:"features,omitempty"`
	Error    *ErrorStatus         `protobuf:"bytes,3,opt,name=error" json:"error,omitempty" yaml:"error,omitempty"`
}

func (m *PredictResponse) Reset()                    { *m = PredictResponse{} }
func (*PredictResponse) ProtoMessage()               {}
func (*PredictResponse) Descriptor() ([]byte, []int) { return fileDescriptorDlframework, []int{12} }

func (m *PredictResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PredictResponse) GetFeatures() []*PredictionFeature {
	if m != nil {
		return m.Features
	}
	return nil
}

func (m *PredictResponse) GetError() *ErrorStatus {
	if m != nil {
		return m.Error
	}
	return nil
}

func init() {
	proto.RegisterType((*ErrorStatus)(nil), "carml.org.dlframework.ErrorStatus")
	proto.RegisterType((*ContainerHardware)(nil), "carml.org.dlframework.ContainerHardware")
	proto.RegisterType((*FrameworkManifest)(nil), "carml.org.dlframework.FrameworkManifest")
	proto.RegisterType((*ModelManifest)(nil), "carml.org.dlframework.ModelManifest")
	proto.RegisterType((*ModelManifest_Type)(nil), "carml.org.dlframework.ModelManifest.Type")
	proto.RegisterType((*ModelManifest_Type_Parameter)(nil), "carml.org.dlframework.ModelManifest.Type.Parameter")
	proto.RegisterType((*ModelManifest_Model)(nil), "carml.org.dlframework.ModelManifest.Model")
	proto.RegisterType((*FrameworkRequest)(nil), "carml.org.dlframework.FrameworkRequest")
	proto.RegisterType((*FrameworkManifestsResponse)(nil), "carml.org.dlframework.FrameworkManifestsResponse")
	proto.RegisterType((*Agent)(nil), "carml.org.dlframework.Agent")
	proto.RegisterType((*Agents)(nil), "carml.org.dlframework.Agents")
	proto.RegisterType((*ModelRequest)(nil), "carml.org.dlframework.ModelRequest")
	proto.RegisterType((*ModelManifestsResponse)(nil), "carml.org.dlframework.ModelManifestsResponse")
	proto.RegisterType((*PredictRequest)(nil), "carml.org.dlframework.PredictRequest")
	proto.RegisterType((*PredictionFeature)(nil), "carml.org.dlframework.PredictionFeature")
	proto.RegisterType((*PredictResponse)(nil), "carml.org.dlframework.PredictResponse")
}
func (this *ErrorStatus) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ErrorStatus)
	if !ok {
		that2, ok := that.(ErrorStatus)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ErrorStatus")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ErrorStatus but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ErrorStatus but is not nil && this == nil")
	}
	if this.Ok != that1.Ok {
		return fmt.Errorf("Ok this(%v) Not Equal that(%v)", this.Ok, that1.Ok)
	}
	if this.Message != that1.Message {
		return fmt.Errorf("Message this(%v) Not Equal that(%v)", this.Message, that1.Message)
	}
	return nil
}
func (this *ErrorStatus) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ErrorStatus)
	if !ok {
		that2, ok := that.(ErrorStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Ok != that1.Ok {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}
func (this *ContainerHardware) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ContainerHardware)
	if !ok {
		that2, ok := that.(ContainerHardware)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ContainerHardware")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ContainerHardware but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ContainerHardware but is not nil && this == nil")
	}
	if this.Gpu != that1.Gpu {
		return fmt.Errorf("Gpu this(%v) Not Equal that(%v)", this.Gpu, that1.Gpu)
	}
	if this.Cpu != that1.Cpu {
		return fmt.Errorf("Cpu this(%v) Not Equal that(%v)", this.Cpu, that1.Cpu)
	}
	return nil
}
func (this *ContainerHardware) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ContainerHardware)
	if !ok {
		that2, ok := that.(ContainerHardware)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Gpu != that1.Gpu {
		return false
	}
	if this.Cpu != that1.Cpu {
		return false
	}
	return true
}
func (this *FrameworkManifest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*FrameworkManifest)
	if !ok {
		that2, ok := that.(FrameworkManifest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *FrameworkManifest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *FrameworkManifest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *FrameworkManifest but is not nil && this == nil")
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if this.Version != that1.Version {
		return fmt.Errorf("Version this(%v) Not Equal that(%v)", this.Version, that1.Version)
	}
	if len(this.Container) != len(that1.Container) {
		return fmt.Errorf("Container this(%v) Not Equal that(%v)", len(this.Container), len(that1.Container))
	}
	for i := range this.Container {
		if !this.Container[i].Equal(that1.Container[i]) {
			return fmt.Errorf("Container this[%v](%v) Not Equal that[%v](%v)", i, this.Container[i], i, that1.Container[i])
		}
	}
	return nil
}
func (this *FrameworkManifest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*FrameworkManifest)
	if !ok {
		that2, ok := that.(FrameworkManifest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if len(this.Container) != len(that1.Container) {
		return false
	}
	for i := range this.Container {
		if !this.Container[i].Equal(that1.Container[i]) {
			return false
		}
	}
	return true
}
func (this *ModelManifest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ModelManifest)
	if !ok {
		that2, ok := that.(ModelManifest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ModelManifest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ModelManifest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ModelManifest but is not nil && this == nil")
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if this.Version != that1.Version {
		return fmt.Errorf("Version this(%v) Not Equal that(%v)", this.Version, that1.Version)
	}
	if !this.Framework.Equal(that1.Framework) {
		return fmt.Errorf("Framework this(%v) Not Equal that(%v)", this.Framework, that1.Framework)
	}
	if len(this.Container) != len(that1.Container) {
		return fmt.Errorf("Container this(%v) Not Equal that(%v)", len(this.Container), len(that1.Container))
	}
	for i := range this.Container {
		if !this.Container[i].Equal(that1.Container[i]) {
			return fmt.Errorf("Container this[%v](%v) Not Equal that[%v](%v)", i, this.Container[i], i, that1.Container[i])
		}
	}
	if this.Description != that1.Description {
		return fmt.Errorf("Description this(%v) Not Equal that(%v)", this.Description, that1.Description)
	}
	if len(this.Reference) != len(that1.Reference) {
		return fmt.Errorf("Reference this(%v) Not Equal that(%v)", len(this.Reference), len(that1.Reference))
	}
	for i := range this.Reference {
		if this.Reference[i] != that1.Reference[i] {
			return fmt.Errorf("Reference this[%v](%v) Not Equal that[%v](%v)", i, this.Reference[i], i, that1.Reference[i])
		}
	}
	if this.License != that1.License {
		return fmt.Errorf("License this(%v) Not Equal that(%v)", this.License, that1.License)
	}
	if len(this.Inputs) != len(that1.Inputs) {
		return fmt.Errorf("Inputs this(%v) Not Equal that(%v)", len(this.Inputs), len(that1.Inputs))
	}
	for i := range this.Inputs {
		if !this.Inputs[i].Equal(that1.Inputs[i]) {
			return fmt.Errorf("Inputs this[%v](%v) Not Equal that[%v](%v)", i, this.Inputs[i], i, that1.Inputs[i])
		}
	}
	if !this.Output.Equal(that1.Output) {
		return fmt.Errorf("Output this(%v) Not Equal that(%v)", this.Output, that1.Output)
	}
	if this.BeforePreprocess != that1.BeforePreprocess {
		return fmt.Errorf("BeforePreprocess this(%v) Not Equal that(%v)", this.BeforePreprocess, that1.BeforePreprocess)
	}
	if this.Preprocess != that1.Preprocess {
		return fmt.Errorf("Preprocess this(%v) Not Equal that(%v)", this.Preprocess, that1.Preprocess)
	}
	if this.AfterPreprocess != that1.AfterPreprocess {
		return fmt.Errorf("AfterPreprocess this(%v) Not Equal that(%v)", this.AfterPreprocess, that1.AfterPreprocess)
	}
	if this.BeforePostprocess != that1.BeforePostprocess {
		return fmt.Errorf("BeforePostprocess this(%v) Not Equal that(%v)", this.BeforePostprocess, that1.BeforePostprocess)
	}
	if this.Postprocess != that1.Postprocess {
		return fmt.Errorf("Postprocess this(%v) Not Equal that(%v)", this.Postprocess, that1.Postprocess)
	}
	if this.AfterPostprocess != that1.AfterPostprocess {
		return fmt.Errorf("AfterPostprocess this(%v) Not Equal that(%v)", this.AfterPostprocess, that1.AfterPostprocess)
	}
	if !this.Model.Equal(that1.Model) {
		return fmt.Errorf("Model this(%v) Not Equal that(%v)", this.Model, that1.Model)
	}
	if len(this.Attributes) != len(that1.Attributes) {
		return fmt.Errorf("Attributes this(%v) Not Equal that(%v)", len(this.Attributes), len(that1.Attributes))
	}
	for i := range this.Attributes {
		if this.Attributes[i] != that1.Attributes[i] {
			return fmt.Errorf("Attributes this[%v](%v) Not Equal that[%v](%v)", i, this.Attributes[i], i, that1.Attributes[i])
		}
	}
	return nil
}
func (this *ModelManifest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ModelManifest)
	if !ok {
		that2, ok := that.(ModelManifest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if !this.Framework.Equal(that1.Framework) {
		return false
	}
	if len(this.Container) != len(that1.Container) {
		return false
	}
	for i := range this.Container {
		if !this.Container[i].Equal(that1.Container[i]) {
			return false
		}
	}
	if this.Description != that1.Description {
		return false
	}
	if len(this.Reference) != len(that1.Reference) {
		return false
	}
	for i := range this.Reference {
		if this.Reference[i] != that1.Reference[i] {
			return false
		}
	}
	if this.License != that1.License {
		return false
	}
	if len(this.Inputs) != len(that1.Inputs) {
		return false
	}
	for i := range this.Inputs {
		if !this.Inputs[i].Equal(that1.Inputs[i]) {
			return false
		}
	}
	if !this.Output.Equal(that1.Output) {
		return false
	}
	if this.BeforePreprocess != that1.BeforePreprocess {
		return false
	}
	if this.Preprocess != that1.Preprocess {
		return false
	}
	if this.AfterPreprocess != that1.AfterPreprocess {
		return false
	}
	if this.BeforePostprocess != that1.BeforePostprocess {
		return false
	}
	if this.Postprocess != that1.Postprocess {
		return false
	}
	if this.AfterPostprocess != that1.AfterPostprocess {
		return false
	}
	if !this.Model.Equal(that1.Model) {
		return false
	}
	if len(this.Attributes) != len(that1.Attributes) {
		return false
	}
	for i := range this.Attributes {
		if this.Attributes[i] != that1.Attributes[i] {
			return false
		}
	}
	return true
}
func (this *ModelManifest_Type) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ModelManifest_Type)
	if !ok {
		that2, ok := that.(ModelManifest_Type)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ModelManifest_Type")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ModelManifest_Type but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ModelManifest_Type but is not nil && this == nil")
	}
	if this.Type != that1.Type {
		return fmt.Errorf("Type this(%v) Not Equal that(%v)", this.Type, that1.Type)
	}
	if this.Description != that1.Description {
		return fmt.Errorf("Description this(%v) Not Equal that(%v)", this.Description, that1.Description)
	}
	if len(this.Parameters) != len(that1.Parameters) {
		return fmt.Errorf("Parameters this(%v) Not Equal that(%v)", len(this.Parameters), len(that1.Parameters))
	}
	for i := range this.Parameters {
		if !this.Parameters[i].Equal(that1.Parameters[i]) {
			return fmt.Errorf("Parameters this[%v](%v) Not Equal that[%v](%v)", i, this.Parameters[i], i, that1.Parameters[i])
		}
	}
	return nil
}
func (this *ModelManifest_Type) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ModelManifest_Type)
	if !ok {
		that2, ok := that.(ModelManifest_Type)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if len(this.Parameters) != len(that1.Parameters) {
		return false
	}
	for i := range this.Parameters {
		if !this.Parameters[i].Equal(that1.Parameters[i]) {
			return false
		}
	}
	return true
}
func (this *ModelManifest_Type_Parameter) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ModelManifest_Type_Parameter)
	if !ok {
		that2, ok := that.(ModelManifest_Type_Parameter)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ModelManifest_Type_Parameter")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ModelManifest_Type_Parameter but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ModelManifest_Type_Parameter but is not nil && this == nil")
	}
	if this.Value != that1.Value {
		return fmt.Errorf("Value this(%v) Not Equal that(%v)", this.Value, that1.Value)
	}
	return nil
}
func (this *ModelManifest_Type_Parameter) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ModelManifest_Type_Parameter)
	if !ok {
		that2, ok := that.(ModelManifest_Type_Parameter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *ModelManifest_Model) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ModelManifest_Model)
	if !ok {
		that2, ok := that.(ModelManifest_Model)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ModelManifest_Model")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ModelManifest_Model but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ModelManifest_Model but is not nil && this == nil")
	}
	if this.BaseUrl != that1.BaseUrl {
		return fmt.Errorf("BaseUrl this(%v) Not Equal that(%v)", this.BaseUrl, that1.BaseUrl)
	}
	if this.WeightsPath != that1.WeightsPath {
		return fmt.Errorf("WeightsPath this(%v) Not Equal that(%v)", this.WeightsPath, that1.WeightsPath)
	}
	if this.GraphPath != that1.GraphPath {
		return fmt.Errorf("GraphPath this(%v) Not Equal that(%v)", this.GraphPath, that1.GraphPath)
	}
	if this.IsArchive != that1.IsArchive {
		return fmt.Errorf("IsArchive this(%v) Not Equal that(%v)", this.IsArchive, that1.IsArchive)
	}
	return nil
}
func (this *ModelManifest_Model) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ModelManifest_Model)
	if !ok {
		that2, ok := that.(ModelManifest_Model)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.BaseUrl != that1.BaseUrl {
		return false
	}
	if this.WeightsPath != that1.WeightsPath {
		return false
	}
	if this.GraphPath != that1.GraphPath {
		return false
	}
	if this.IsArchive != that1.IsArchive {
		return false
	}
	return true
}
func (this *FrameworkRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*FrameworkRequest)
	if !ok {
		that2, ok := that.(FrameworkRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *FrameworkRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *FrameworkRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *FrameworkRequest but is not nil && this == nil")
	}
	if this.FrameworkName != that1.FrameworkName {
		return fmt.Errorf("FrameworkName this(%v) Not Equal that(%v)", this.FrameworkName, that1.FrameworkName)
	}
	if this.FrameworkVersion != that1.FrameworkVersion {
		return fmt.Errorf("FrameworkVersion this(%v) Not Equal that(%v)", this.FrameworkVersion, that1.FrameworkVersion)
	}
	return nil
}
func (this *FrameworkRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*FrameworkRequest)
	if !ok {
		that2, ok := that.(FrameworkRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.FrameworkName != that1.FrameworkName {
		return false
	}
	if this.FrameworkVersion != that1.FrameworkVersion {
		return false
	}
	return true
}
func (this *FrameworkManifestsResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*FrameworkManifestsResponse)
	if !ok {
		that2, ok := that.(FrameworkManifestsResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *FrameworkManifestsResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *FrameworkManifestsResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *FrameworkManifestsResponse but is not nil && this == nil")
	}
	if len(this.Manifests) != len(that1.Manifests) {
		return fmt.Errorf("Manifests this(%v) Not Equal that(%v)", len(this.Manifests), len(that1.Manifests))
	}
	for i := range this.Manifests {
		if !this.Manifests[i].Equal(that1.Manifests[i]) {
			return fmt.Errorf("Manifests this[%v](%v) Not Equal that[%v](%v)", i, this.Manifests[i], i, that1.Manifests[i])
		}
	}
	return nil
}
func (this *FrameworkManifestsResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*FrameworkManifestsResponse)
	if !ok {
		that2, ok := that.(FrameworkManifestsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Manifests) != len(that1.Manifests) {
		return false
	}
	for i := range this.Manifests {
		if !this.Manifests[i].Equal(that1.Manifests[i]) {
			return false
		}
	}
	return true
}
func (this *Agent) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Agent)
	if !ok {
		that2, ok := that.(Agent)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Agent")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Agent but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Agent but is not nil && this == nil")
	}
	if this.Host != that1.Host {
		return fmt.Errorf("Host this(%v) Not Equal that(%v)", this.Host, that1.Host)
	}
	if this.Port != that1.Port {
		return fmt.Errorf("Port this(%v) Not Equal that(%v)", this.Port, that1.Port)
	}
	return nil
}
func (this *Agent) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Agent)
	if !ok {
		that2, ok := that.(Agent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Host != that1.Host {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	return true
}
func (this *Agents) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Agents)
	if !ok {
		that2, ok := that.(Agents)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Agents")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Agents but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Agents but is not nil && this == nil")
	}
	if len(this.Agents) != len(that1.Agents) {
		return fmt.Errorf("Agents this(%v) Not Equal that(%v)", len(this.Agents), len(that1.Agents))
	}
	for i := range this.Agents {
		if !this.Agents[i].Equal(that1.Agents[i]) {
			return fmt.Errorf("Agents this[%v](%v) Not Equal that[%v](%v)", i, this.Agents[i], i, that1.Agents[i])
		}
	}
	return nil
}
func (this *Agents) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Agents)
	if !ok {
		that2, ok := that.(Agents)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Agents) != len(that1.Agents) {
		return false
	}
	for i := range this.Agents {
		if !this.Agents[i].Equal(that1.Agents[i]) {
			return false
		}
	}
	return true
}
func (this *ModelRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ModelRequest)
	if !ok {
		that2, ok := that.(ModelRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ModelRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ModelRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ModelRequest but is not nil && this == nil")
	}
	if this.FrameworkName != that1.FrameworkName {
		return fmt.Errorf("FrameworkName this(%v) Not Equal that(%v)", this.FrameworkName, that1.FrameworkName)
	}
	if this.FrameworkVersion != that1.FrameworkVersion {
		return fmt.Errorf("FrameworkVersion this(%v) Not Equal that(%v)", this.FrameworkVersion, that1.FrameworkVersion)
	}
	if this.ModelName != that1.ModelName {
		return fmt.Errorf("ModelName this(%v) Not Equal that(%v)", this.ModelName, that1.ModelName)
	}
	if this.ModelVersion != that1.ModelVersion {
		return fmt.Errorf("ModelVersion this(%v) Not Equal that(%v)", this.ModelVersion, that1.ModelVersion)
	}
	return nil
}
func (this *ModelRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ModelRequest)
	if !ok {
		that2, ok := that.(ModelRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.FrameworkName != that1.FrameworkName {
		return false
	}
	if this.FrameworkVersion != that1.FrameworkVersion {
		return false
	}
	if this.ModelName != that1.ModelName {
		return false
	}
	if this.ModelVersion != that1.ModelVersion {
		return false
	}
	return true
}
func (this *ModelManifestsResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ModelManifestsResponse)
	if !ok {
		that2, ok := that.(ModelManifestsResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ModelManifestsResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ModelManifestsResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ModelManifestsResponse but is not nil && this == nil")
	}
	if len(this.Manifests) != len(that1.Manifests) {
		return fmt.Errorf("Manifests this(%v) Not Equal that(%v)", len(this.Manifests), len(that1.Manifests))
	}
	for i := range this.Manifests {
		if !this.Manifests[i].Equal(that1.Manifests[i]) {
			return fmt.Errorf("Manifests this[%v](%v) Not Equal that[%v](%v)", i, this.Manifests[i], i, that1.Manifests[i])
		}
	}
	return nil
}
func (this *ModelManifestsResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ModelManifestsResponse)
	if !ok {
		that2, ok := that.(ModelManifestsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Manifests) != len(that1.Manifests) {
		return false
	}
	for i := range this.Manifests {
		if !this.Manifests[i].Equal(that1.Manifests[i]) {
			return false
		}
	}
	return true
}
func (this *PredictRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*PredictRequest)
	if !ok {
		that2, ok := that.(PredictRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *PredictRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *PredictRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *PredictRequest but is not nil && this == nil")
	}
	if this.ModelName != that1.ModelName {
		return fmt.Errorf("ModelName this(%v) Not Equal that(%v)", this.ModelName, that1.ModelName)
	}
	if this.ModelVersion != that1.ModelVersion {
		return fmt.Errorf("ModelVersion this(%v) Not Equal that(%v)", this.ModelVersion, that1.ModelVersion)
	}
	if this.FrameworkName != that1.FrameworkName {
		return fmt.Errorf("FrameworkName this(%v) Not Equal that(%v)", this.FrameworkName, that1.FrameworkName)
	}
	if this.FrameworkVersion != that1.FrameworkVersion {
		return fmt.Errorf("FrameworkVersion this(%v) Not Equal that(%v)", this.FrameworkVersion, that1.FrameworkVersion)
	}
	if this.Limit != that1.Limit {
		return fmt.Errorf("Limit this(%v) Not Equal that(%v)", this.Limit, that1.Limit)
	}
	if that1.Input == nil {
		if this.Input != nil {
			return fmt.Errorf("this.Input != nil && that1.Input == nil")
		}
	} else if this.Input == nil {
		return fmt.Errorf("this.Input == nil && that1.Input != nil")
	} else if err := this.Input.VerboseEqual(that1.Input); err != nil {
		return err
	}
	return nil
}
func (this *PredictRequest_Data) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*PredictRequest_Data)
	if !ok {
		that2, ok := that.(PredictRequest_Data)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *PredictRequest_Data")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *PredictRequest_Data but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *PredictRequest_Data but is not nil && this == nil")
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return fmt.Errorf("Data this(%v) Not Equal that(%v)", this.Data, that1.Data)
	}
	return nil
}
func (this *PredictRequest_Url) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*PredictRequest_Url)
	if !ok {
		that2, ok := that.(PredictRequest_Url)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *PredictRequest_Url")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *PredictRequest_Url but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *PredictRequest_Url but is not nil && this == nil")
	}
	if this.Url != that1.Url {
		return fmt.Errorf("Url this(%v) Not Equal that(%v)", this.Url, that1.Url)
	}
	return nil
}
func (this *PredictRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PredictRequest)
	if !ok {
		that2, ok := that.(PredictRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ModelName != that1.ModelName {
		return false
	}
	if this.ModelVersion != that1.ModelVersion {
		return false
	}
	if this.FrameworkName != that1.FrameworkName {
		return false
	}
	if this.FrameworkVersion != that1.FrameworkVersion {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if that1.Input == nil {
		if this.Input != nil {
			return false
		}
	} else if this.Input == nil {
		return false
	} else if !this.Input.Equal(that1.Input) {
		return false
	}
	return true
}
func (this *PredictRequest_Data) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PredictRequest_Data)
	if !ok {
		that2, ok := that.(PredictRequest_Data)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	return true
}
func (this *PredictRequest_Url) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PredictRequest_Url)
	if !ok {
		that2, ok := that.(PredictRequest_Url)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	return true
}
func (this *PredictionFeature) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*PredictionFeature)
	if !ok {
		that2, ok := that.(PredictionFeature)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *PredictionFeature")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *PredictionFeature but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *PredictionFeature but is not nil && this == nil")
	}
	if this.Index != that1.Index {
		return fmt.Errorf("Index this(%v) Not Equal that(%v)", this.Index, that1.Index)
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if this.Probability != that1.Probability {
		return fmt.Errorf("Probability this(%v) Not Equal that(%v)", this.Probability, that1.Probability)
	}
	return nil
}
func (this *PredictionFeature) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PredictionFeature)
	if !ok {
		that2, ok := that.(PredictionFeature)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Index != that1.Index {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Probability != that1.Probability {
		return false
	}
	return true
}
func (this *PredictResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*PredictResponse)
	if !ok {
		that2, ok := that.(PredictResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *PredictResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *PredictResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *PredictResponse but is not nil && this == nil")
	}
	if this.Id != that1.Id {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if len(this.Features) != len(that1.Features) {
		return fmt.Errorf("Features this(%v) Not Equal that(%v)", len(this.Features), len(that1.Features))
	}
	for i := range this.Features {
		if !this.Features[i].Equal(that1.Features[i]) {
			return fmt.Errorf("Features this[%v](%v) Not Equal that[%v](%v)", i, this.Features[i], i, that1.Features[i])
		}
	}
	if !this.Error.Equal(that1.Error) {
		return fmt.Errorf("Error this(%v) Not Equal that(%v)", this.Error, that1.Error)
	}
	return nil
}
func (this *PredictResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PredictResponse)
	if !ok {
		that2, ok := that.(PredictResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if len(this.Features) != len(that1.Features) {
		return false
	}
	for i := range this.Features {
		if !this.Features[i].Equal(that1.Features[i]) {
			return false
		}
	}
	if !this.Error.Equal(that1.Error) {
		return false
	}
	return true
}
func (this *ErrorStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dlframework.ErrorStatus{")
	s = append(s, "Ok: "+fmt.Sprintf("%#v", this.Ok)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ContainerHardware) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dlframework.ContainerHardware{")
	s = append(s, "Gpu: "+fmt.Sprintf("%#v", this.Gpu)+",\n")
	s = append(s, "Cpu: "+fmt.Sprintf("%#v", this.Cpu)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FrameworkManifest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dlframework.FrameworkManifest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	keysForContainer := make([]string, 0, len(this.Container))
	for k := range this.Container {
		keysForContainer = append(keysForContainer, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForContainer)
	mapStringForContainer := "map[string]*ContainerHardware{"
	for _, k := range keysForContainer {
		mapStringForContainer += fmt.Sprintf("%#v: %#v,", k, this.Container[k])
	}
	mapStringForContainer += "}"
	if this.Container != nil {
		s = append(s, "Container: "+mapStringForContainer+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ModelManifest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 21)
	s = append(s, "&dlframework.ModelManifest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	if this.Framework != nil {
		s = append(s, "Framework: "+fmt.Sprintf("%#v", this.Framework)+",\n")
	}
	keysForContainer := make([]string, 0, len(this.Container))
	for k := range this.Container {
		keysForContainer = append(keysForContainer, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForContainer)
	mapStringForContainer := "map[string]*ContainerHardware{"
	for _, k := range keysForContainer {
		mapStringForContainer += fmt.Sprintf("%#v: %#v,", k, this.Container[k])
	}
	mapStringForContainer += "}"
	if this.Container != nil {
		s = append(s, "Container: "+mapStringForContainer+",\n")
	}
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "Reference: "+fmt.Sprintf("%#v", this.Reference)+",\n")
	s = append(s, "License: "+fmt.Sprintf("%#v", this.License)+",\n")
	if this.Inputs != nil {
		s = append(s, "Inputs: "+fmt.Sprintf("%#v", this.Inputs)+",\n")
	}
	if this.Output != nil {
		s = append(s, "Output: "+fmt.Sprintf("%#v", this.Output)+",\n")
	}
	s = append(s, "BeforePreprocess: "+fmt.Sprintf("%#v", this.BeforePreprocess)+",\n")
	s = append(s, "Preprocess: "+fmt.Sprintf("%#v", this.Preprocess)+",\n")
	s = append(s, "AfterPreprocess: "+fmt.Sprintf("%#v", this.AfterPreprocess)+",\n")
	s = append(s, "BeforePostprocess: "+fmt.Sprintf("%#v", this.BeforePostprocess)+",\n")
	s = append(s, "Postprocess: "+fmt.Sprintf("%#v", this.Postprocess)+",\n")
	s = append(s, "AfterPostprocess: "+fmt.Sprintf("%#v", this.AfterPostprocess)+",\n")
	if this.Model != nil {
		s = append(s, "Model: "+fmt.Sprintf("%#v", this.Model)+",\n")
	}
	keysForAttributes := make([]string, 0, len(this.Attributes))
	for k := range this.Attributes {
		keysForAttributes = append(keysForAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAttributes)
	mapStringForAttributes := "map[string]string{"
	for _, k := range keysForAttributes {
		mapStringForAttributes += fmt.Sprintf("%#v: %#v,", k, this.Attributes[k])
	}
	mapStringForAttributes += "}"
	if this.Attributes != nil {
		s = append(s, "Attributes: "+mapStringForAttributes+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ModelManifest_Type) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dlframework.ModelManifest_Type{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	keysForParameters := make([]string, 0, len(this.Parameters))
	for k := range this.Parameters {
		keysForParameters = append(keysForParameters, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForParameters)
	mapStringForParameters := "map[string]*ModelManifest_Type_Parameter{"
	for _, k := range keysForParameters {
		mapStringForParameters += fmt.Sprintf("%#v: %#v,", k, this.Parameters[k])
	}
	mapStringForParameters += "}"
	if this.Parameters != nil {
		s = append(s, "Parameters: "+mapStringForParameters+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ModelManifest_Type_Parameter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dlframework.ModelManifest_Type_Parameter{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ModelManifest_Model) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dlframework.ModelManifest_Model{")
	s = append(s, "BaseUrl: "+fmt.Sprintf("%#v", this.BaseUrl)+",\n")
	s = append(s, "WeightsPath: "+fmt.Sprintf("%#v", this.WeightsPath)+",\n")
	s = append(s, "GraphPath: "+fmt.Sprintf("%#v", this.GraphPath)+",\n")
	s = append(s, "IsArchive: "+fmt.Sprintf("%#v", this.IsArchive)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FrameworkRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dlframework.FrameworkRequest{")
	s = append(s, "FrameworkName: "+fmt.Sprintf("%#v", this.FrameworkName)+",\n")
	s = append(s, "FrameworkVersion: "+fmt.Sprintf("%#v", this.FrameworkVersion)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FrameworkManifestsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dlframework.FrameworkManifestsResponse{")
	if this.Manifests != nil {
		s = append(s, "Manifests: "+fmt.Sprintf("%#v", this.Manifests)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Agent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dlframework.Agent{")
	s = append(s, "Host: "+fmt.Sprintf("%#v", this.Host)+",\n")
	s = append(s, "Port: "+fmt.Sprintf("%#v", this.Port)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Agents) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dlframework.Agents{")
	if this.Agents != nil {
		s = append(s, "Agents: "+fmt.Sprintf("%#v", this.Agents)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ModelRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dlframework.ModelRequest{")
	s = append(s, "FrameworkName: "+fmt.Sprintf("%#v", this.FrameworkName)+",\n")
	s = append(s, "FrameworkVersion: "+fmt.Sprintf("%#v", this.FrameworkVersion)+",\n")
	s = append(s, "ModelName: "+fmt.Sprintf("%#v", this.ModelName)+",\n")
	s = append(s, "ModelVersion: "+fmt.Sprintf("%#v", this.ModelVersion)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ModelManifestsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dlframework.ModelManifestsResponse{")
	if this.Manifests != nil {
		s = append(s, "Manifests: "+fmt.Sprintf("%#v", this.Manifests)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PredictRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&dlframework.PredictRequest{")
	s = append(s, "ModelName: "+fmt.Sprintf("%#v", this.ModelName)+",\n")
	s = append(s, "ModelVersion: "+fmt.Sprintf("%#v", this.ModelVersion)+",\n")
	s = append(s, "FrameworkName: "+fmt.Sprintf("%#v", this.FrameworkName)+",\n")
	s = append(s, "FrameworkVersion: "+fmt.Sprintf("%#v", this.FrameworkVersion)+",\n")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	if this.Input != nil {
		s = append(s, "Input: "+fmt.Sprintf("%#v", this.Input)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PredictRequest_Data) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dlframework.PredictRequest_Data{` +
		`Data:` + fmt.Sprintf("%#v", this.Data) + `}`}, ", ")
	return s
}
func (this *PredictRequest_Url) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dlframework.PredictRequest_Url{` +
		`Url:` + fmt.Sprintf("%#v", this.Url) + `}`}, ", ")
	return s
}
func (this *PredictionFeature) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dlframework.PredictionFeature{")
	s = append(s, "Index: "+fmt.Sprintf("%#v", this.Index)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Probability: "+fmt.Sprintf("%#v", this.Probability)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PredictResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dlframework.PredictResponse{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.Features != nil {
		s = append(s, "Features: "+fmt.Sprintf("%#v", this.Features)+",\n")
	}
	if this.Error != nil {
		s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringDlframework(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Registry service

type RegistryClient interface {
	FrameworkManifests(ctx context.Context, in *FrameworkRequest, opts ...grpc.CallOption) (*FrameworkManifestsResponse, error)
	FrameworkAgents(ctx context.Context, in *FrameworkRequest, opts ...grpc.CallOption) (*Agents, error)
	ModelManifests(ctx context.Context, in *ModelRequest, opts ...grpc.CallOption) (*ModelManifestsResponse, error)
	ModelAgents(ctx context.Context, in *ModelRequest, opts ...grpc.CallOption) (*Agents, error)
}

type registryClient struct {
	cc *grpc.ClientConn
}

func NewRegistryClient(cc *grpc.ClientConn) RegistryClient {
	return &registryClient{cc}
}

func (c *registryClient) FrameworkManifests(ctx context.Context, in *FrameworkRequest, opts ...grpc.CallOption) (*FrameworkManifestsResponse, error) {
	out := new(FrameworkManifestsResponse)
	err := grpc.Invoke(ctx, "/carml.org.dlframework.Registry/FrameworkManifests", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) FrameworkAgents(ctx context.Context, in *FrameworkRequest, opts ...grpc.CallOption) (*Agents, error) {
	out := new(Agents)
	err := grpc.Invoke(ctx, "/carml.org.dlframework.Registry/FrameworkAgents", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) ModelManifests(ctx context.Context, in *ModelRequest, opts ...grpc.CallOption) (*ModelManifestsResponse, error) {
	out := new(ModelManifestsResponse)
	err := grpc.Invoke(ctx, "/carml.org.dlframework.Registry/ModelManifests", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) ModelAgents(ctx context.Context, in *ModelRequest, opts ...grpc.CallOption) (*Agents, error) {
	out := new(Agents)
	err := grpc.Invoke(ctx, "/carml.org.dlframework.Registry/ModelAgents", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Registry service

type RegistryServer interface {
	FrameworkManifests(context.Context, *FrameworkRequest) (*FrameworkManifestsResponse, error)
	FrameworkAgents(context.Context, *FrameworkRequest) (*Agents, error)
	ModelManifests(context.Context, *ModelRequest) (*ModelManifestsResponse, error)
	ModelAgents(context.Context, *ModelRequest) (*Agents, error)
}

func RegisterRegistryServer(s *grpc.Server, srv RegistryServer) {
	s.RegisterService(&_Registry_serviceDesc, srv)
}

func _Registry_FrameworkManifests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FrameworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).FrameworkManifests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carml.org.dlframework.Registry/FrameworkManifests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).FrameworkManifests(ctx, req.(*FrameworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_FrameworkAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FrameworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).FrameworkAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carml.org.dlframework.Registry/FrameworkAgents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).FrameworkAgents(ctx, req.(*FrameworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_ModelManifests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).ModelManifests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carml.org.dlframework.Registry/ModelManifests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).ModelManifests(ctx, req.(*ModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_ModelAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).ModelAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carml.org.dlframework.Registry/ModelAgents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).ModelAgents(ctx, req.(*ModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Registry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "carml.org.dlframework.Registry",
	HandlerType: (*RegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FrameworkManifests",
			Handler:    _Registry_FrameworkManifests_Handler,
		},
		{
			MethodName: "FrameworkAgents",
			Handler:    _Registry_FrameworkAgents_Handler,
		},
		{
			MethodName: "ModelManifests",
			Handler:    _Registry_ModelManifests_Handler,
		},
		{
			MethodName: "ModelAgents",
			Handler:    _Registry_ModelAgents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dlframework.proto",
}

// Client API for Predictor service

type PredictorClient interface {
	Predict(ctx context.Context, in *PredictRequest, opts ...grpc.CallOption) (*PredictResponse, error)
}

type predictorClient struct {
	cc *grpc.ClientConn
}

func NewPredictorClient(cc *grpc.ClientConn) PredictorClient {
	return &predictorClient{cc}
}

func (c *predictorClient) Predict(ctx context.Context, in *PredictRequest, opts ...grpc.CallOption) (*PredictResponse, error) {
	out := new(PredictResponse)
	err := grpc.Invoke(ctx, "/carml.org.dlframework.Predictor/Predict", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Predictor service

type PredictorServer interface {
	Predict(context.Context, *PredictRequest) (*PredictResponse, error)
}

func RegisterPredictorServer(s *grpc.Server, srv PredictorServer) {
	s.RegisterService(&_Predictor_serviceDesc, srv)
}

func _Predictor_Predict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PredictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PredictorServer).Predict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carml.org.dlframework.Predictor/Predict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PredictorServer).Predict(ctx, req.(*PredictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Predictor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "carml.org.dlframework.Predictor",
	HandlerType: (*PredictorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Predict",
			Handler:    _Predictor_Predict_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dlframework.proto",
}

func (m *ErrorStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ErrorStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ok {
		dAtA[i] = 0x8
		i++
		if m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *ContainerHardware) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerHardware) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Gpu) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.Gpu)))
		i += copy(dAtA[i:], m.Gpu)
	}
	if len(m.Cpu) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.Cpu)))
		i += copy(dAtA[i:], m.Cpu)
	}
	return i, nil
}

func (m *FrameworkManifest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FrameworkManifest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Version) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	if len(m.Container) > 0 {
		for k := range m.Container {
			dAtA[i] = 0x1a
			i++
			v := m.Container[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovDlframework(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovDlframework(uint64(len(k))) + msgSize
			i = encodeVarintDlframework(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintDlframework(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintDlframework(dAtA, i, uint64(v.Size()))
				n1, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n1
			}
		}
	}
	return i, nil
}

func (m *ModelManifest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelManifest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Version) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	if m.Framework != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(m.Framework.Size()))
		n2, err := m.Framework.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Container) > 0 {
		for k := range m.Container {
			dAtA[i] = 0x22
			i++
			v := m.Container[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovDlframework(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovDlframework(uint64(len(k))) + msgSize
			i = encodeVarintDlframework(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintDlframework(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintDlframework(dAtA, i, uint64(v.Size()))
				n3, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n3
			}
		}
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.Reference) > 0 {
		for _, s := range m.Reference {
			dAtA[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.License) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.License)))
		i += copy(dAtA[i:], m.License)
	}
	if len(m.Inputs) > 0 {
		for _, msg := range m.Inputs {
			dAtA[i] = 0x42
			i++
			i = encodeVarintDlframework(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Output != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(m.Output.Size()))
		n4, err := m.Output.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.BeforePreprocess) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.BeforePreprocess)))
		i += copy(dAtA[i:], m.BeforePreprocess)
	}
	if len(m.Preprocess) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.Preprocess)))
		i += copy(dAtA[i:], m.Preprocess)
	}
	if len(m.AfterPreprocess) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.AfterPreprocess)))
		i += copy(dAtA[i:], m.AfterPreprocess)
	}
	if len(m.BeforePostprocess) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.BeforePostprocess)))
		i += copy(dAtA[i:], m.BeforePostprocess)
	}
	if len(m.Postprocess) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.Postprocess)))
		i += copy(dAtA[i:], m.Postprocess)
	}
	if len(m.AfterPostprocess) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.AfterPostprocess)))
		i += copy(dAtA[i:], m.AfterPostprocess)
	}
	if m.Model != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(m.Model.Size()))
		n5, err := m.Model.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.Attributes) > 0 {
		for k := range m.Attributes {
			dAtA[i] = 0x8a
			i++
			dAtA[i] = 0x1
			i++
			v := m.Attributes[k]
			mapSize := 1 + len(k) + sovDlframework(uint64(len(k))) + 1 + len(v) + sovDlframework(uint64(len(v)))
			i = encodeVarintDlframework(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintDlframework(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintDlframework(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func (m *ModelManifest_Type) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelManifest_Type) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.Parameters) > 0 {
		for k := range m.Parameters {
			dAtA[i] = 0x1a
			i++
			v := m.Parameters[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovDlframework(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovDlframework(uint64(len(k))) + msgSize
			i = encodeVarintDlframework(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintDlframework(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintDlframework(dAtA, i, uint64(v.Size()))
				n6, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n6
			}
		}
	}
	return i, nil
}

func (m *ModelManifest_Type_Parameter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelManifest_Type_Parameter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func (m *ModelManifest_Model) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelManifest_Model) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BaseUrl) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.BaseUrl)))
		i += copy(dAtA[i:], m.BaseUrl)
	}
	if len(m.WeightsPath) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.WeightsPath)))
		i += copy(dAtA[i:], m.WeightsPath)
	}
	if len(m.GraphPath) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.GraphPath)))
		i += copy(dAtA[i:], m.GraphPath)
	}
	if m.IsArchive {
		dAtA[i] = 0x20
		i++
		if m.IsArchive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *FrameworkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FrameworkRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FrameworkName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.FrameworkName)))
		i += copy(dAtA[i:], m.FrameworkName)
	}
	if len(m.FrameworkVersion) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.FrameworkVersion)))
		i += copy(dAtA[i:], m.FrameworkVersion)
	}
	return i, nil
}

func (m *FrameworkManifestsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FrameworkManifestsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Manifests) > 0 {
		for _, msg := range m.Manifests {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDlframework(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Agent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Agent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Host) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.Host)))
		i += copy(dAtA[i:], m.Host)
	}
	if len(m.Port) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.Port)))
		i += copy(dAtA[i:], m.Port)
	}
	return i, nil
}

func (m *Agents) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Agents) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Agents) > 0 {
		for _, msg := range m.Agents {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDlframework(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ModelRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FrameworkName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.FrameworkName)))
		i += copy(dAtA[i:], m.FrameworkName)
	}
	if len(m.FrameworkVersion) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.FrameworkVersion)))
		i += copy(dAtA[i:], m.FrameworkVersion)
	}
	if len(m.ModelName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.ModelName)))
		i += copy(dAtA[i:], m.ModelName)
	}
	if len(m.ModelVersion) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.ModelVersion)))
		i += copy(dAtA[i:], m.ModelVersion)
	}
	return i, nil
}

func (m *ModelManifestsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelManifestsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Manifests) > 0 {
		for _, msg := range m.Manifests {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDlframework(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PredictRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PredictRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ModelName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.ModelName)))
		i += copy(dAtA[i:], m.ModelName)
	}
	if len(m.ModelVersion) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.ModelVersion)))
		i += copy(dAtA[i:], m.ModelVersion)
	}
	if len(m.FrameworkName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.FrameworkName)))
		i += copy(dAtA[i:], m.FrameworkName)
	}
	if len(m.FrameworkVersion) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.FrameworkVersion)))
		i += copy(dAtA[i:], m.FrameworkVersion)
	}
	if m.Limit != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(m.Limit))
	}
	if m.Input != nil {
		nn7, err := m.Input.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn7
	}
	return i, nil
}

func (m *PredictRequest_Data) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Data != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}
func (m *PredictRequest_Url) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x3a
	i++
	i = encodeVarintDlframework(dAtA, i, uint64(len(m.Url)))
	i += copy(dAtA[i:], m.Url)
	return i, nil
}
func (m *PredictionFeature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PredictionFeature) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(m.Index))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Probability != 0 {
		dAtA[i] = 0x1d
		i++
		i = encodeFixed32Dlframework(dAtA, i, uint32(math.Float32bits(float32(m.Probability))))
	}
	return i, nil
}

func (m *PredictResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PredictResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Features) > 0 {
		for _, msg := range m.Features {
			dAtA[i] = 0x12
			i++
			i = encodeVarintDlframework(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(m.Error.Size()))
		n8, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func encodeFixed64Dlframework(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Dlframework(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintDlframework(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedErrorStatus(r randyDlframework, easy bool) *ErrorStatus {
	this := &ErrorStatus{}
	this.Ok = bool(bool(r.Intn(2) == 0))
	this.Message = string(randStringDlframework(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedContainerHardware(r randyDlframework, easy bool) *ContainerHardware {
	this := &ContainerHardware{}
	this.Gpu = string(randStringDlframework(r))
	this.Cpu = string(randStringDlframework(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedFrameworkManifest(r randyDlframework, easy bool) *FrameworkManifest {
	this := &FrameworkManifest{}
	this.Name = string(randStringDlframework(r))
	this.Version = string(randStringDlframework(r))
	if r.Intn(10) != 0 {
		v1 := r.Intn(10)
		this.Container = make(map[string]*ContainerHardware)
		for i := 0; i < v1; i++ {
			this.Container[randStringDlframework(r)] = NewPopulatedContainerHardware(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedModelManifest(r randyDlframework, easy bool) *ModelManifest {
	this := &ModelManifest{}
	this.Name = string(randStringDlframework(r))
	this.Version = string(randStringDlframework(r))
	if r.Intn(10) != 0 {
		this.Framework = NewPopulatedFrameworkManifest(r, easy)
	}
	if r.Intn(10) != 0 {
		v2 := r.Intn(10)
		this.Container = make(map[string]*ContainerHardware)
		for i := 0; i < v2; i++ {
			this.Container[randStringDlframework(r)] = NewPopulatedContainerHardware(r, easy)
		}
	}
	this.Description = string(randStringDlframework(r))
	v3 := r.Intn(10)
	this.Reference = make([]string, v3)
	for i := 0; i < v3; i++ {
		this.Reference[i] = string(randStringDlframework(r))
	}
	this.License = string(randStringDlframework(r))
	if r.Intn(10) != 0 {
		v4 := r.Intn(5)
		this.Inputs = make([]*ModelManifest_Type, v4)
		for i := 0; i < v4; i++ {
			this.Inputs[i] = NewPopulatedModelManifest_Type(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		this.Output = NewPopulatedModelManifest_Type(r, easy)
	}
	this.BeforePreprocess = string(randStringDlframework(r))
	this.Preprocess = string(randStringDlframework(r))
	this.AfterPreprocess = string(randStringDlframework(r))
	this.BeforePostprocess = string(randStringDlframework(r))
	this.Postprocess = string(randStringDlframework(r))
	this.AfterPostprocess = string(randStringDlframework(r))
	if r.Intn(10) != 0 {
		this.Model = NewPopulatedModelManifest_Model(r, easy)
	}
	if r.Intn(10) != 0 {
		v5 := r.Intn(10)
		this.Attributes = make(map[string]string)
		for i := 0; i < v5; i++ {
			this.Attributes[randStringDlframework(r)] = randStringDlframework(r)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedModelManifest_Type(r randyDlframework, easy bool) *ModelManifest_Type {
	this := &ModelManifest_Type{}
	this.Type = string(randStringDlframework(r))
	this.Description = string(randStringDlframework(r))
	if r.Intn(10) != 0 {
		v6 := r.Intn(10)
		this.Parameters = make(map[string]*ModelManifest_Type_Parameter)
		for i := 0; i < v6; i++ {
			this.Parameters[randStringDlframework(r)] = NewPopulatedModelManifest_Type_Parameter(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedModelManifest_Type_Parameter(r randyDlframework, easy bool) *ModelManifest_Type_Parameter {
	this := &ModelManifest_Type_Parameter{}
	this.Value = string(randStringDlframework(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedModelManifest_Model(r randyDlframework, easy bool) *ModelManifest_Model {
	this := &ModelManifest_Model{}
	this.BaseUrl = string(randStringDlframework(r))
	this.WeightsPath = string(randStringDlframework(r))
	this.GraphPath = string(randStringDlframework(r))
	this.IsArchive = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedFrameworkRequest(r randyDlframework, easy bool) *FrameworkRequest {
	this := &FrameworkRequest{}
	this.FrameworkName = string(randStringDlframework(r))
	this.FrameworkVersion = string(randStringDlframework(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedFrameworkManifestsResponse(r randyDlframework, easy bool) *FrameworkManifestsResponse {
	this := &FrameworkManifestsResponse{}
	if r.Intn(10) != 0 {
		v7 := r.Intn(5)
		this.Manifests = make([]*FrameworkManifest, v7)
		for i := 0; i < v7; i++ {
			this.Manifests[i] = NewPopulatedFrameworkManifest(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAgent(r randyDlframework, easy bool) *Agent {
	this := &Agent{}
	this.Host = string(randStringDlframework(r))
	this.Port = string(randStringDlframework(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAgents(r randyDlframework, easy bool) *Agents {
	this := &Agents{}
	if r.Intn(10) != 0 {
		v8 := r.Intn(5)
		this.Agents = make([]*Agent, v8)
		for i := 0; i < v8; i++ {
			this.Agents[i] = NewPopulatedAgent(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedModelRequest(r randyDlframework, easy bool) *ModelRequest {
	this := &ModelRequest{}
	this.FrameworkName = string(randStringDlframework(r))
	this.FrameworkVersion = string(randStringDlframework(r))
	this.ModelName = string(randStringDlframework(r))
	this.ModelVersion = string(randStringDlframework(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedModelManifestsResponse(r randyDlframework, easy bool) *ModelManifestsResponse {
	this := &ModelManifestsResponse{}
	if r.Intn(10) != 0 {
		v9 := r.Intn(5)
		this.Manifests = make([]*ModelManifest, v9)
		for i := 0; i < v9; i++ {
			this.Manifests[i] = NewPopulatedModelManifest(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPredictRequest(r randyDlframework, easy bool) *PredictRequest {
	this := &PredictRequest{}
	this.ModelName = string(randStringDlframework(r))
	this.ModelVersion = string(randStringDlframework(r))
	this.FrameworkName = string(randStringDlframework(r))
	this.FrameworkVersion = string(randStringDlframework(r))
	this.Limit = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Limit *= -1
	}
	oneofNumber_Input := []int32{6, 7}[r.Intn(2)]
	switch oneofNumber_Input {
	case 6:
		this.Input = NewPopulatedPredictRequest_Data(r, easy)
	case 7:
		this.Input = NewPopulatedPredictRequest_Url(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPredictRequest_Data(r randyDlframework, easy bool) *PredictRequest_Data {
	this := &PredictRequest_Data{}
	v10 := r.Intn(100)
	this.Data = make([]byte, v10)
	for i := 0; i < v10; i++ {
		this.Data[i] = byte(r.Intn(256))
	}
	return this
}
func NewPopulatedPredictRequest_Url(r randyDlframework, easy bool) *PredictRequest_Url {
	this := &PredictRequest_Url{}
	this.Url = string(randStringDlframework(r))
	return this
}
func NewPopulatedPredictionFeature(r randyDlframework, easy bool) *PredictionFeature {
	this := &PredictionFeature{}
	this.Index = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Index *= -1
	}
	this.Name = string(randStringDlframework(r))
	this.Probability = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.Probability *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPredictResponse(r randyDlframework, easy bool) *PredictResponse {
	this := &PredictResponse{}
	this.Id = string(randStringDlframework(r))
	if r.Intn(10) != 0 {
		v11 := r.Intn(5)
		this.Features = make([]*PredictionFeature, v11)
		for i := 0; i < v11; i++ {
			this.Features[i] = NewPopulatedPredictionFeature(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		this.Error = NewPopulatedErrorStatus(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyDlframework interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneDlframework(r randyDlframework) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringDlframework(r randyDlframework) string {
	v12 := r.Intn(100)
	tmps := make([]rune, v12)
	for i := 0; i < v12; i++ {
		tmps[i] = randUTF8RuneDlframework(r)
	}
	return string(tmps)
}
func randUnrecognizedDlframework(r randyDlframework, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldDlframework(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldDlframework(dAtA []byte, r randyDlframework, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateDlframework(dAtA, uint64(key))
		v13 := r.Int63()
		if r.Intn(2) == 0 {
			v13 *= -1
		}
		dAtA = encodeVarintPopulateDlframework(dAtA, uint64(v13))
	case 1:
		dAtA = encodeVarintPopulateDlframework(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateDlframework(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateDlframework(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateDlframework(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateDlframework(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *ErrorStatus) Size() (n int) {
	var l int
	_ = l
	if m.Ok {
		n += 2
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	return n
}

func (m *ContainerHardware) Size() (n int) {
	var l int
	_ = l
	l = len(m.Gpu)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	l = len(m.Cpu)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	return n
}

func (m *FrameworkManifest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	if len(m.Container) > 0 {
		for k, v := range m.Container {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovDlframework(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovDlframework(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovDlframework(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ModelManifest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	if m.Framework != nil {
		l = m.Framework.Size()
		n += 1 + l + sovDlframework(uint64(l))
	}
	if len(m.Container) > 0 {
		for k, v := range m.Container {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovDlframework(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovDlframework(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovDlframework(uint64(mapEntrySize))
		}
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	if len(m.Reference) > 0 {
		for _, s := range m.Reference {
			l = len(s)
			n += 1 + l + sovDlframework(uint64(l))
		}
	}
	l = len(m.License)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	if len(m.Inputs) > 0 {
		for _, e := range m.Inputs {
			l = e.Size()
			n += 1 + l + sovDlframework(uint64(l))
		}
	}
	if m.Output != nil {
		l = m.Output.Size()
		n += 1 + l + sovDlframework(uint64(l))
	}
	l = len(m.BeforePreprocess)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	l = len(m.Preprocess)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	l = len(m.AfterPreprocess)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	l = len(m.BeforePostprocess)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	l = len(m.Postprocess)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	l = len(m.AfterPostprocess)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	if m.Model != nil {
		l = m.Model.Size()
		n += 2 + l + sovDlframework(uint64(l))
	}
	if len(m.Attributes) > 0 {
		for k, v := range m.Attributes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovDlframework(uint64(len(k))) + 1 + len(v) + sovDlframework(uint64(len(v)))
			n += mapEntrySize + 2 + sovDlframework(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ModelManifest_Type) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	if len(m.Parameters) > 0 {
		for k, v := range m.Parameters {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovDlframework(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovDlframework(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovDlframework(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ModelManifest_Type_Parameter) Size() (n int) {
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	return n
}

func (m *ModelManifest_Model) Size() (n int) {
	var l int
	_ = l
	l = len(m.BaseUrl)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	l = len(m.WeightsPath)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	l = len(m.GraphPath)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	if m.IsArchive {
		n += 2
	}
	return n
}

func (m *FrameworkRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.FrameworkName)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	l = len(m.FrameworkVersion)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	return n
}

func (m *FrameworkManifestsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Manifests) > 0 {
		for _, e := range m.Manifests {
			l = e.Size()
			n += 1 + l + sovDlframework(uint64(l))
		}
	}
	return n
}

func (m *Agent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	l = len(m.Port)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	return n
}

func (m *Agents) Size() (n int) {
	var l int
	_ = l
	if len(m.Agents) > 0 {
		for _, e := range m.Agents {
			l = e.Size()
			n += 1 + l + sovDlframework(uint64(l))
		}
	}
	return n
}

func (m *ModelRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.FrameworkName)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	l = len(m.FrameworkVersion)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	l = len(m.ModelName)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	l = len(m.ModelVersion)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	return n
}

func (m *ModelManifestsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Manifests) > 0 {
		for _, e := range m.Manifests {
			l = e.Size()
			n += 1 + l + sovDlframework(uint64(l))
		}
	}
	return n
}

func (m *PredictRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ModelName)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	l = len(m.ModelVersion)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	l = len(m.FrameworkName)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	l = len(m.FrameworkVersion)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovDlframework(uint64(m.Limit))
	}
	if m.Input != nil {
		n += m.Input.Size()
	}
	return n
}

func (m *PredictRequest_Data) Size() (n int) {
	var l int
	_ = l
	if m.Data != nil {
		l = len(m.Data)
		n += 1 + l + sovDlframework(uint64(l))
	}
	return n
}
func (m *PredictRequest_Url) Size() (n int) {
	var l int
	_ = l
	l = len(m.Url)
	n += 1 + l + sovDlframework(uint64(l))
	return n
}
func (m *PredictionFeature) Size() (n int) {
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovDlframework(uint64(m.Index))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	if m.Probability != 0 {
		n += 5
	}
	return n
}

func (m *PredictResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	if len(m.Features) > 0 {
		for _, e := range m.Features {
			l = e.Size()
			n += 1 + l + sovDlframework(uint64(l))
		}
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovDlframework(uint64(l))
	}
	return n
}

func sovDlframework(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDlframework(x uint64) (n int) {
	return sovDlframework(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ErrorStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ErrorStatus{`,
		`Ok:` + fmt.Sprintf("%v", this.Ok) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ContainerHardware) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ContainerHardware{`,
		`Gpu:` + fmt.Sprintf("%v", this.Gpu) + `,`,
		`Cpu:` + fmt.Sprintf("%v", this.Cpu) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FrameworkManifest) String() string {
	if this == nil {
		return "nil"
	}
	keysForContainer := make([]string, 0, len(this.Container))
	for k := range this.Container {
		keysForContainer = append(keysForContainer, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForContainer)
	mapStringForContainer := "map[string]*ContainerHardware{"
	for _, k := range keysForContainer {
		mapStringForContainer += fmt.Sprintf("%v: %v,", k, this.Container[k])
	}
	mapStringForContainer += "}"
	s := strings.Join([]string{`&FrameworkManifest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`Container:` + mapStringForContainer + `,`,
		`}`,
	}, "")
	return s
}
func (this *ModelManifest) String() string {
	if this == nil {
		return "nil"
	}
	keysForContainer := make([]string, 0, len(this.Container))
	for k := range this.Container {
		keysForContainer = append(keysForContainer, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForContainer)
	mapStringForContainer := "map[string]*ContainerHardware{"
	for _, k := range keysForContainer {
		mapStringForContainer += fmt.Sprintf("%v: %v,", k, this.Container[k])
	}
	mapStringForContainer += "}"
	keysForAttributes := make([]string, 0, len(this.Attributes))
	for k := range this.Attributes {
		keysForAttributes = append(keysForAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAttributes)
	mapStringForAttributes := "map[string]string{"
	for _, k := range keysForAttributes {
		mapStringForAttributes += fmt.Sprintf("%v: %v,", k, this.Attributes[k])
	}
	mapStringForAttributes += "}"
	s := strings.Join([]string{`&ModelManifest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`Framework:` + strings.Replace(fmt.Sprintf("%v", this.Framework), "FrameworkManifest", "FrameworkManifest", 1) + `,`,
		`Container:` + mapStringForContainer + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Reference:` + fmt.Sprintf("%v", this.Reference) + `,`,
		`License:` + fmt.Sprintf("%v", this.License) + `,`,
		`Inputs:` + strings.Replace(fmt.Sprintf("%v", this.Inputs), "ModelManifest_Type", "ModelManifest_Type", 1) + `,`,
		`Output:` + strings.Replace(fmt.Sprintf("%v", this.Output), "ModelManifest_Type", "ModelManifest_Type", 1) + `,`,
		`BeforePreprocess:` + fmt.Sprintf("%v", this.BeforePreprocess) + `,`,
		`Preprocess:` + fmt.Sprintf("%v", this.Preprocess) + `,`,
		`AfterPreprocess:` + fmt.Sprintf("%v", this.AfterPreprocess) + `,`,
		`BeforePostprocess:` + fmt.Sprintf("%v", this.BeforePostprocess) + `,`,
		`Postprocess:` + fmt.Sprintf("%v", this.Postprocess) + `,`,
		`AfterPostprocess:` + fmt.Sprintf("%v", this.AfterPostprocess) + `,`,
		`Model:` + strings.Replace(fmt.Sprintf("%v", this.Model), "ModelManifest_Model", "ModelManifest_Model", 1) + `,`,
		`Attributes:` + mapStringForAttributes + `,`,
		`}`,
	}, "")
	return s
}
func (this *ModelManifest_Type) String() string {
	if this == nil {
		return "nil"
	}
	keysForParameters := make([]string, 0, len(this.Parameters))
	for k := range this.Parameters {
		keysForParameters = append(keysForParameters, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForParameters)
	mapStringForParameters := "map[string]*ModelManifest_Type_Parameter{"
	for _, k := range keysForParameters {
		mapStringForParameters += fmt.Sprintf("%v: %v,", k, this.Parameters[k])
	}
	mapStringForParameters += "}"
	s := strings.Join([]string{`&ModelManifest_Type{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Parameters:` + mapStringForParameters + `,`,
		`}`,
	}, "")
	return s
}
func (this *ModelManifest_Type_Parameter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ModelManifest_Type_Parameter{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ModelManifest_Model) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ModelManifest_Model{`,
		`BaseUrl:` + fmt.Sprintf("%v", this.BaseUrl) + `,`,
		`WeightsPath:` + fmt.Sprintf("%v", this.WeightsPath) + `,`,
		`GraphPath:` + fmt.Sprintf("%v", this.GraphPath) + `,`,
		`IsArchive:` + fmt.Sprintf("%v", this.IsArchive) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FrameworkRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FrameworkRequest{`,
		`FrameworkName:` + fmt.Sprintf("%v", this.FrameworkName) + `,`,
		`FrameworkVersion:` + fmt.Sprintf("%v", this.FrameworkVersion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FrameworkManifestsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FrameworkManifestsResponse{`,
		`Manifests:` + strings.Replace(fmt.Sprintf("%v", this.Manifests), "FrameworkManifest", "FrameworkManifest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Agent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Agent{`,
		`Host:` + fmt.Sprintf("%v", this.Host) + `,`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Agents) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Agents{`,
		`Agents:` + strings.Replace(fmt.Sprintf("%v", this.Agents), "Agent", "Agent", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ModelRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ModelRequest{`,
		`FrameworkName:` + fmt.Sprintf("%v", this.FrameworkName) + `,`,
		`FrameworkVersion:` + fmt.Sprintf("%v", this.FrameworkVersion) + `,`,
		`ModelName:` + fmt.Sprintf("%v", this.ModelName) + `,`,
		`ModelVersion:` + fmt.Sprintf("%v", this.ModelVersion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ModelManifestsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ModelManifestsResponse{`,
		`Manifests:` + strings.Replace(fmt.Sprintf("%v", this.Manifests), "ModelManifest", "ModelManifest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PredictRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PredictRequest{`,
		`ModelName:` + fmt.Sprintf("%v", this.ModelName) + `,`,
		`ModelVersion:` + fmt.Sprintf("%v", this.ModelVersion) + `,`,
		`FrameworkName:` + fmt.Sprintf("%v", this.FrameworkName) + `,`,
		`FrameworkVersion:` + fmt.Sprintf("%v", this.FrameworkVersion) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Input:` + fmt.Sprintf("%v", this.Input) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PredictRequest_Data) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PredictRequest_Data{`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PredictRequest_Url) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PredictRequest_Url{`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PredictionFeature) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PredictionFeature{`,
		`Index:` + fmt.Sprintf("%v", this.Index) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Probability:` + fmt.Sprintf("%v", this.Probability) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PredictResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PredictResponse{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Features:` + strings.Replace(fmt.Sprintf("%v", this.Features), "PredictionFeature", "PredictionFeature", 1) + `,`,
		`Error:` + strings.Replace(fmt.Sprintf("%v", this.Error), "ErrorStatus", "ErrorStatus", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringDlframework(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ErrorStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDlframework
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ErrorStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ErrorStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDlframework(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDlframework
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerHardware) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDlframework
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerHardware: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerHardware: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gpu", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gpu = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cpu", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cpu = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDlframework(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDlframework
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FrameworkManifest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDlframework
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FrameworkManifest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FrameworkManifest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Container", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthDlframework
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Container == nil {
				m.Container = make(map[string]*ContainerHardware)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDlframework
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapmsglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDlframework
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					mapmsglen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if mapmsglen < 0 {
					return ErrInvalidLengthDlframework
				}
				postmsgIndex := iNdEx + mapmsglen
				if mapmsglen < 0 {
					return ErrInvalidLengthDlframework
				}
				if postmsgIndex > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := &ContainerHardware{}
				if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
					return err
				}
				iNdEx = postmsgIndex
				m.Container[mapkey] = mapvalue
			} else {
				var mapvalue *ContainerHardware
				m.Container[mapkey] = mapvalue
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDlframework(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDlframework
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelManifest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDlframework
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelManifest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelManifest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Framework", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Framework == nil {
				m.Framework = &FrameworkManifest{}
			}
			if err := m.Framework.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Container", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthDlframework
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Container == nil {
				m.Container = make(map[string]*ContainerHardware)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDlframework
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapmsglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDlframework
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					mapmsglen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if mapmsglen < 0 {
					return ErrInvalidLengthDlframework
				}
				postmsgIndex := iNdEx + mapmsglen
				if mapmsglen < 0 {
					return ErrInvalidLengthDlframework
				}
				if postmsgIndex > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := &ContainerHardware{}
				if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
					return err
				}
				iNdEx = postmsgIndex
				m.Container[mapkey] = mapvalue
			} else {
				var mapvalue *ContainerHardware
				m.Container[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reference", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reference = append(m.Reference, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field License", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.License = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inputs = append(m.Inputs, &ModelManifest_Type{})
			if err := m.Inputs[len(m.Inputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Output == nil {
				m.Output = &ModelManifest_Type{}
			}
			if err := m.Output.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeforePreprocess", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BeforePreprocess = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Preprocess", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Preprocess = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AfterPreprocess", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AfterPreprocess = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeforePostprocess", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BeforePostprocess = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Postprocess", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Postprocess = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AfterPostprocess", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AfterPostprocess = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Model == nil {
				m.Model = &ModelManifest_Model{}
			}
			if err := m.Model.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthDlframework
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Attributes == nil {
				m.Attributes = make(map[string]string)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDlframework
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var stringLenmapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDlframework
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLenmapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLenmapvalue := int(stringLenmapvalue)
				if intStringLenmapvalue < 0 {
					return ErrInvalidLengthDlframework
				}
				postStringIndexmapvalue := iNdEx + intStringLenmapvalue
				if postStringIndexmapvalue > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := string(dAtA[iNdEx:postStringIndexmapvalue])
				iNdEx = postStringIndexmapvalue
				m.Attributes[mapkey] = mapvalue
			} else {
				var mapvalue string
				m.Attributes[mapkey] = mapvalue
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDlframework(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDlframework
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelManifest_Type) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDlframework
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthDlframework
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Parameters == nil {
				m.Parameters = make(map[string]*ModelManifest_Type_Parameter)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDlframework
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapmsglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDlframework
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					mapmsglen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if mapmsglen < 0 {
					return ErrInvalidLengthDlframework
				}
				postmsgIndex := iNdEx + mapmsglen
				if mapmsglen < 0 {
					return ErrInvalidLengthDlframework
				}
				if postmsgIndex > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := &ModelManifest_Type_Parameter{}
				if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
					return err
				}
				iNdEx = postmsgIndex
				m.Parameters[mapkey] = mapvalue
			} else {
				var mapvalue *ModelManifest_Type_Parameter
				m.Parameters[mapkey] = mapvalue
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDlframework(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDlframework
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelManifest_Type_Parameter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDlframework
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Parameter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Parameter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDlframework(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDlframework
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelManifest_Model) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDlframework
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Model: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Model: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeightsPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WeightsPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GraphPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GraphPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsArchive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsArchive = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDlframework(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDlframework
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FrameworkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDlframework
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FrameworkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FrameworkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrameworkName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FrameworkName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrameworkVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FrameworkVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDlframework(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDlframework
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FrameworkManifestsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDlframework
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FrameworkManifestsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FrameworkManifestsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Manifests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Manifests = append(m.Manifests, &FrameworkManifest{})
			if err := m.Manifests[len(m.Manifests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDlframework(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDlframework
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Agent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDlframework
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Agent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Agent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Port = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDlframework(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDlframework
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Agents) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDlframework
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Agents: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Agents: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agents = append(m.Agents, &Agent{})
			if err := m.Agents[len(m.Agents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDlframework(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDlframework
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDlframework
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrameworkName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FrameworkName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrameworkVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FrameworkVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDlframework(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDlframework
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelManifestsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDlframework
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelManifestsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelManifestsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Manifests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Manifests = append(m.Manifests, &ModelManifest{})
			if err := m.Manifests[len(m.Manifests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDlframework(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDlframework
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PredictRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDlframework
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PredictRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PredictRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrameworkName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FrameworkName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrameworkVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FrameworkVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Input = &PredictRequest_Data{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Input = &PredictRequest_Url{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDlframework(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDlframework
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PredictionFeature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDlframework
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PredictionFeature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PredictionFeature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Probability", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Probability = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipDlframework(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDlframework
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PredictResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDlframework
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PredictResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PredictResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Features", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Features = append(m.Features, &PredictionFeature{})
			if err := m.Features[len(m.Features)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &ErrorStatus{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDlframework(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDlframework
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDlframework(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDlframework
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDlframework
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDlframework
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDlframework(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDlframework = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDlframework   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("dlframework.proto", fileDescriptorDlframework) }

var fileDescriptorDlframework = []byte{
	// 1679 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x58, 0xcb, 0x6f, 0x1b, 0x5b,
	0x19, 0xcf, 0xf8, 0x91, 0xc4, 0x9f, 0xf3, 0xf2, 0xe1, 0xde, 0xde, 0xa9, 0x9b, 0x78, 0xd2, 0xe9,
	0xed, 0x8d, 0xa9, 0x5a, 0x9b, 0x9b, 0xf2, 0xb8, 0x54, 0x6a, 0x51, 0x0d, 0x2d, 0x05, 0xa9, 0x28,
	0xb8, 0xa5, 0x0b, 0x40, 0x44, 0x63, 0xfb, 0xd8, 0x19, 0xc5, 0x9e, 0x99, 0x9e, 0x39, 0x93, 0x12,
	0x04, 0x52, 0x85, 0x90, 0x90, 0x58, 0x21, 0xb1, 0x63, 0xc5, 0x92, 0x0d, 0x2b, 0x36, 0x5d, 0xb2,
	0x64, 0x85, 0x90, 0x60, 0x01, 0x9b, 0x51, 0x13, 0xf8, 0x03, 0xd0, 0x48, 0x48, 0x2c, 0xd1, 0x79,
	0xcc, 0xf8, 0x1c, 0xdb, 0x49, 0x4d, 0x8a, 0x2a, 0xdd, 0x9d, 0xfd, 0x3d, 0x7e, 0xdf, 0xf3, 0x7c,
	0xdf, 0x67, 0x43, 0xa5, 0x37, 0xec, 0x13, 0x67, 0x84, 0x5f, 0xf8, 0xe4, 0xb0, 0x11, 0x10, 0x9f,
	0xfa, 0xe8, 0xfd, 0xae, 0x43, 0x46, 0xc3, 0x86, 0x4f, 0x06, 0x0d, 0x85, 0x59, 0xdd, 0x1c, 0xf8,
	0xfe, 0x60, 0x88, 0x9b, 0x5c, 0xa8, 0x13, 0xf5, 0x9b, 0x21, 0x25, 0x51, 0x97, 0x0a, 0xa5, 0x8c,
	0xeb, 0x04, 0x6e, 0xd3, 0xf1, 0x3c, 0x9f, 0x3a, 0xd4, 0xf5, 0xbd, 0x50, 0x72, 0x6f, 0x0d, 0x5c,
	0x7a, 0x10, 0x75, 0x1a, 0x5d, 0x7f, 0xd4, 0x1c, 0xf8, 0x03, 0x7f, 0x0c, 0xc2, 0xbe, 0xf1, 0x2f,
	0xfc, 0x93, 0x10, 0xb7, 0x3d, 0x28, 0x3f, 0x20, 0xc4, 0x27, 0x4f, 0xa8, 0x43, 0xa3, 0x10, 0xed,
	0x40, 0xce, 0x3f, 0x34, 0x8d, 0x6d, 0xa3, 0xbe, 0xdc, 0xfa, 0x20, 0x89, 0xad, 0xcf, 0x1c, 0x3b,
	0xa3, 0xe1, 0x1d, 0xdb, 0x3f, 0xbc, 0xe9, 0x8f, 0x5c, 0x8a, 0x47, 0x01, 0x3d, 0xb6, 0xdb, 0x39,
	0xff, 0x10, 0x7d, 0x11, 0x96, 0x46, 0x38, 0x0c, 0x9d, 0x01, 0x36, 0x73, 0xdb, 0x46, 0xbd, 0xd4,
	0xda, 0x4c, 0x62, 0xcb, 0x14, 0xd2, 0x92, 0xa1, 0xaa, 0xa4, 0xc2, 0xf6, 0x21, 0x54, 0xbe, 0xea,
	0x7b, 0xd4, 0x71, 0x3d, 0x4c, 0x1e, 0x39, 0xa4, 0xf7, 0xc2, 0x21, 0x18, 0xdd, 0x80, 0xfc, 0x20,
	0x88, 0xb8, 0xd9, 0x52, 0xcb, 0x4c, 0x62, 0xeb, 0x3d, 0x01, 0x34, 0x08, 0x22, 0x15, 0x84, 0x09,
	0x31, 0xd9, 0x6e, 0x10, 0x49, 0xa3, 0x8a, 0x6c, 0x77, 0x42, 0xb6, 0x1b, 0x44, 0xf6, 0xdf, 0x73,
	0x50, 0x79, 0x98, 0x66, 0xf5, 0xb1, 0xe3, 0xb9, 0x7d, 0x1c, 0x52, 0x74, 0x0b, 0x0a, 0x9e, 0x33,
	0xc2, 0xd2, 0xdc, 0xe5, 0x24, 0xb6, 0xde, 0x17, 0x10, 0x8c, 0xaa, 0x62, 0x70, 0x31, 0x16, 0xe9,
	0x11, 0x26, 0xa1, 0xeb, 0x7b, 0xd3, 0x91, 0x4a, 0x86, 0x16, 0xa9, 0xa4, 0xa1, 0x08, 0x4a, 0xdd,
	0x34, 0x52, 0x33, 0xbf, 0x9d, 0xaf, 0x97, 0x77, 0xbf, 0xd4, 0x98, 0x59, 0xef, 0xc6, 0x94, 0x8f,
	0x8d, 0x2c, 0x47, 0x0f, 0x3c, 0x4a, 0x8e, 0x5b, 0xb5, 0x24, 0xb6, 0xaa, 0x32, 0xce, 0x94, 0xa3,
	0x1a, 0x1d, 0x5b, 0xaa, 0xf6, 0x61, 0x4d, 0x57, 0x46, 0x1b, 0x90, 0x3f, 0xc4, 0xc7, 0x22, 0xdc,
	0x36, 0xfb, 0x88, 0xee, 0x41, 0xf1, 0xc8, 0x19, 0x46, 0xa2, 0x74, 0xe5, 0xdd, 0xfa, 0x19, 0x6e,
	0x4d, 0x15, 0xaa, 0x2d, 0xd4, 0xee, 0xe4, 0x3e, 0x31, 0xec, 0x3f, 0x55, 0x60, 0xf5, 0xb1, 0xdf,
	0xc3, 0xc3, 0x77, 0x9d, 0xd7, 0x3e, 0x94, 0x32, 0x17, 0xcd, 0xfc, 0xb9, 0x01, 0x4c, 0xe5, 0x55,
	0x4d, 0x64, 0x26, 0xa6, 0x25, 0x32, 0xa3, 0xa2, 0xe7, 0x6a, 0xfd, 0x0a, 0xbc, 0x7e, 0xb7, 0xcf,
	0xb0, 0xa3, 0xe5, 0xe1, 0xe2, 0xb5, 0x43, 0x2d, 0x28, 0xf7, 0x70, 0xd8, 0x25, 0x6e, 0xc0, 0x5e,
	0xb4, 0x59, 0xe4, 0x69, 0xd9, 0x4e, 0x62, 0x6b, 0x53, 0xe8, 0x2b, 0x4c, 0x15, 0x41, 0x55, 0x42,
	0x77, 0xa1, 0x44, 0x70, 0x1f, 0x13, 0xec, 0x75, 0xb1, 0xb9, 0xb8, 0x9d, 0xaf, 0x97, 0x5a, 0x56,
	0x12, 0x5b, 0x57, 0x04, 0x42, 0xc6, 0x0a, 0x35, 0x17, 0x32, 0x32, 0xab, 0xca, 0xd0, 0xed, 0x62,
	0x2f, 0xc4, 0xe6, 0xd2, 0x64, 0x55, 0x24, 0x43, 0xab, 0x8a, 0xa4, 0xa1, 0x1f, 0xc0, 0xa2, 0xeb,
	0x05, 0x11, 0x0d, 0xcd, 0x65, 0x9e, 0xaa, 0xcf, 0xce, 0x95, 0xaa, 0xa7, 0xc7, 0x01, 0x6e, 0x5d,
	0x49, 0x62, 0xeb, 0x03, 0x61, 0x41, 0x40, 0xa8, 0x06, 0x24, 0x2a, 0xc3, 0xf7, 0x23, 0x1a, 0x44,
	0xd4, 0x2c, 0xf1, 0x92, 0x5f, 0x0c, 0x5f, 0x40, 0x68, 0xf8, 0x82, 0x84, 0x9e, 0x40, 0xa5, 0x83,
	0xfb, 0x3e, 0xc1, 0xfb, 0x01, 0xc1, 0x01, 0xf1, 0xbb, 0x38, 0x0c, 0x4d, 0xe0, 0x19, 0xf8, 0x28,
	0x89, 0x2d, 0x5b, 0xe8, 0x4f, 0x89, 0xa8, 0x50, 0x1b, 0x82, 0xbb, 0x97, 0x31, 0xd1, 0x57, 0x00,
	0x14, 0xb4, 0x32, 0x47, 0x53, 0x8a, 0x31, 0x1b, 0x46, 0x51, 0x41, 0x7b, 0xb0, 0xe1, 0xf4, 0x29,
	0x26, 0xaa, 0x53, 0x2b, 0x1c, 0xe6, 0x7a, 0x12, 0x5b, 0x57, 0x05, 0xcc, 0xa4, 0x84, 0x0a, 0xb6,
	0xce, 0x99, 0x8a, 0x4b, 0xcf, 0x00, 0xa5, 0x41, 0xf8, 0x21, 0x4d, 0x31, 0x57, 0x39, 0xe6, 0x4e,
	0x12, 0x5b, 0xd7, 0xf4, 0x40, 0xc7, 0x32, 0x2a, 0xaa, 0x4c, 0xd5, 0xde, 0x98, 0xcb, 0x5a, 0x57,
	0x05, 0x5c, 0x9b, 0x6c, 0xdd, 0x33, 0x90, 0x54, 0x25, 0x56, 0x03, 0x19, 0x8b, 0x82, 0xb4, 0x3e,
	0x59, 0x83, 0x29, 0x11, 0xad, 0x06, 0x22, 0x5e, 0x05, 0xf4, 0xfb, 0x50, 0x1c, 0xb1, 0x9e, 0x30,
	0x37, 0x78, 0xdf, 0xdc, 0x98, 0xab, 0x6f, 0xf8, 0xb7, 0x56, 0x35, 0x89, 0xad, 0x4b, 0x72, 0xa5,
	0x31, 0x82, 0x6a, 0x48, 0x80, 0xa2, 0x08, 0xc0, 0xa1, 0x94, 0xb8, 0x9d, 0x88, 0xe2, 0xd0, 0xac,
	0xf0, 0xd6, 0xff, 0xfc, 0x5c, 0x26, 0xee, 0x67, 0x6a, 0x62, 0x4c, 0x28, 0x7d, 0x31, 0x46, 0xd4,
	0xfa, 0x62, 0x4c, 0xae, 0xfe, 0x26, 0x0f, 0x05, 0xd6, 0xdb, 0x6c, 0xe6, 0xd2, 0xe3, 0x60, 0xc6,
	0xcc, 0x65, 0x54, 0x6d, 0xe6, 0x32, 0xc2, 0xe4, 0x80, 0xc9, 0x5d, 0x64, 0xc0, 0xfc, 0x08, 0x20,
	0x70, 0x58, 0x50, 0x14, 0x93, 0x50, 0x2e, 0xb6, 0x2f, 0xcf, 0xfd, 0x1a, 0x1b, 0x7b, 0x99, 0xee,
	0x54, 0xdc, 0x63, 0x58, 0xfd, 0x3d, 0x64, 0xe4, 0xea, 0x17, 0xa0, 0x94, 0xe9, 0xa3, 0x7a, 0xba,
	0xc5, 0x44, 0xf0, 0x28, 0x89, 0xad, 0x35, 0x01, 0x74, 0xd3, 0xf5, 0x86, 0xae, 0x87, 0x6d, 0xb9,
	0xaf, 0xaa, 0x04, 0xd6, 0x27, 0xcc, 0xce, 0x58, 0x8a, 0xdf, 0xd0, 0x97, 0xe2, 0xed, 0x0b, 0x84,
	0xa4, 0xec, 0xc7, 0xea, 0xcf, 0x73, 0x50, 0xe4, 0xb2, 0xe8, 0x13, 0x58, 0xee, 0x38, 0x21, 0xde,
	0x8f, 0xc8, 0x50, 0xba, 0xba, 0x95, 0xc4, 0xd6, 0x65, 0xf9, 0xd0, 0x24, 0x47, 0x1b, 0xaa, 0x8c,
	0xf8, 0x1d, 0x32, 0x44, 0x5f, 0x83, 0x95, 0x17, 0xd8, 0x1d, 0x1c, 0xd0, 0x70, 0x3f, 0x70, 0xe8,
	0x81, 0xac, 0xd7, 0xd5, 0x24, 0xb6, 0xb6, 0x84, 0xb6, 0xca, 0xd5, 0x0a, 0x26, 0x19, 0x7b, 0x0e,
	0x3d, 0x40, 0xf7, 0x00, 0x06, 0xc4, 0x09, 0x0e, 0x04, 0x46, 0x7e, 0x72, 0x0a, 0x8d, 0x79, 0xda,
	0x4a, 0xe0, 0xe4, 0x54, 0xdf, 0x0d, 0xf7, 0x1d, 0xd2, 0x3d, 0x70, 0x8f, 0xb0, 0x59, 0xe0, 0xb7,
	0xa1, 0xa2, 0x3f, 0xe6, 0x69, 0xfa, 0x6e, 0x78, 0x5f, 0x50, 0xdf, 0xd5, 0x45, 0x52, 0xbd, 0x0b,
	0xeb, 0x13, 0x8f, 0x6a, 0x86, 0xa1, 0xf7, 0x54, 0x43, 0x25, 0xf5, 0xa0, 0xf9, 0xbd, 0x01, 0x1b,
	0xd9, 0xc1, 0xd0, 0xc6, 0xcf, 0x23, 0x76, 0xd3, 0x7c, 0x13, 0xd6, 0x32, 0xeb, 0xfb, 0xca, 0x75,
	0x73, 0x2d, 0x89, 0x2d, 0x6b, 0xe2, 0x8e, 0xd8, 0x9f, 0xbc, 0x73, 0x56, 0x33, 0xd6, 0xb7, 0xd8,
	0xc1, 0xf3, 0x04, 0x2a, 0x63, 0x59, 0xfd, 0xf4, 0x51, 0xc6, 0xdb, 0x94, 0x88, 0x36, 0xde, 0x32,
	0xee, 0x33, 0xc1, 0xb4, 0x7f, 0x66, 0x40, 0x75, 0xea, 0xcc, 0x09, 0xdb, 0x38, 0x0c, 0x7c, 0xb6,
	0x96, 0xfb, 0x50, 0x1a, 0xa5, 0x44, 0xd3, 0xe0, 0x6f, 0xf5, 0x42, 0xc7, 0x52, 0x06, 0xa2, 0xd5,
	0x38, 0xa3, 0xda, 0x18, 0x8a, 0xf7, 0x07, 0xd8, 0xe3, 0x47, 0xe0, 0x81, 0x1f, 0xd2, 0xe9, 0x81,
	0xc4, 0xa8, 0xda, 0x40, 0x62, 0x04, 0x26, 0x1e, 0xf8, 0x84, 0xca, 0x34, 0x28, 0xe2, 0x8c, 0xaa,
	0x89, 0x33, 0x82, 0xfd, 0x3d, 0x58, 0xe4, 0x66, 0x42, 0xf4, 0x6d, 0x58, 0x74, 0xf8, 0x27, 0x19,
	0xd5, 0xe6, 0x19, 0x51, 0x71, 0x71, 0xf5, 0x04, 0x10, 0x5a, 0xda, 0x09, 0x20, 0x48, 0xf6, 0xab,
	0x1c, 0xac, 0xf0, 0x17, 0xfb, 0x69, 0x29, 0x3e, 0x7b, 0x99, 0x7c, 0x0d, 0x09, 0xe7, 0xa6, 0x5e,
	0xf6, 0x98, 0xa7, 0x57, 0x8d, 0x91, 0xb9, 0x53, 0x5f, 0x87, 0x55, 0x21, 0x93, 0x3a, 0x54, 0xe0,
	0x10, 0x76, 0x12, 0x5b, 0x35, 0x15, 0x62, 0x86, 0x33, 0x2b, 0x9c, 0x93, 0x76, 0xe1, 0x8f, 0xe1,
	0x92, 0x36, 0x17, 0xc7, 0x0d, 0xd8, 0x99, 0x6e, 0xc0, 0x0f, 0xe7, 0x99, 0xac, 0xff, 0x4b, 0xf3,
	0xfd, 0x35, 0x0f, 0x6b, 0x7b, 0x04, 0xf7, 0xdc, 0x2e, 0x4d, 0x4b, 0xa7, 0x67, 0xc6, 0x78, 0xfb,
	0xcc, 0xe4, 0x2e, 0x96, 0x99, 0x19, 0x3d, 0x94, 0xff, 0xff, 0xf6, 0x50, 0xe1, 0x2d, 0x7b, 0xe8,
	0x73, 0x50, 0x1c, 0xba, 0x23, 0x97, 0xf2, 0x5f, 0x1b, 0x45, 0xf5, 0xe6, 0xe1, 0x64, 0xed, 0xe6,
	0xe1, 0x14, 0xd4, 0x84, 0x42, 0xcf, 0xa1, 0x8e, 0xb9, 0xb8, 0x6d, 0xd4, 0x57, 0xd4, 0x37, 0xcb,
	0xa8, 0x8a, 0xfc, 0xa3, 0x85, 0x36, 0x17, 0x44, 0x37, 0x21, 0xcf, 0x76, 0xdf, 0xd2, 0xe4, 0x4f,
	0x76, 0x7d, 0xed, 0x3d, 0x5a, 0x68, 0x33, 0xb1, 0xd6, 0x12, 0x14, 0xf9, 0xcd, 0x6f, 0xbf, 0x32,
	0xa0, 0x22, 0xcb, 0xea, 0xfa, 0xde, 0x43, 0xec, 0xd0, 0x88, 0x60, 0xe6, 0xaf, 0xeb, 0xf5, 0xf0,
	0x0f, 0x79, 0x51, 0xf3, 0xaa, 0xbf, 0x9c, 0xac, 0xf9, 0xcb, 0x29, 0xd9, 0xef, 0xd2, 0xdc, 0x7c,
	0xbf, 0x4b, 0xd9, 0x25, 0x4b, 0xfc, 0x8e, 0xd3, 0x71, 0x87, 0x2e, 0x3d, 0xe6, 0xe5, 0xca, 0x69,
	0x97, 0xec, 0x98, 0xa9, 0x5f, 0xb2, 0x63, 0xba, 0xfd, 0x6f, 0x03, 0xd6, 0xb3, 0x8e, 0x94, 0x2f,
	0x61, 0x07, 0x72, 0x6e, 0x4f, 0xb6, 0xa2, 0xf2, 0xd7, 0x8a, 0xdb, 0xd3, 0xfe, 0x5a, 0x71, 0x7b,
	0xa8, 0x0b, 0xcb, 0x7d, 0x11, 0x6c, 0x68, 0xe6, 0xce, 0x1d, 0xd9, 0x53, 0xd9, 0x51, 0x2f, 0x8b,
	0x14, 0x43, 0x85, 0xcf, 0x80, 0xd1, 0x53, 0x28, 0x62, 0x42, 0x7c, 0x22, 0x7f, 0x41, 0xdb, 0x67,
	0x58, 0x50, 0xfe, 0x1b, 0x52, 0x53, 0xcd, 0x55, 0xb5, 0x54, 0x73, 0xca, 0xee, 0xef, 0x0a, 0xb0,
	0xdc, 0xc6, 0x03, 0x37, 0x64, 0xcb, 0xf7, 0xd7, 0x06, 0xa0, 0xe9, 0xd5, 0x84, 0x76, 0xde, 0xb4,
	0x7f, 0xe4, 0x1b, 0xae, 0x7e, 0x3c, 0xef, 0xa2, 0xca, 0xa6, 0x8d, 0x5d, 0xff, 0xe9, 0x5f, 0xfe,
	0xf9, 0xab, 0x9c, 0x8d, 0xb6, 0x9b, 0x47, 0x1f, 0x37, 0x89, 0x74, 0xa4, 0x99, 0xa9, 0x86, 0xcd,
	0x74, 0x68, 0xa0, 0x97, 0x06, 0xac, 0x67, 0x40, 0x72, 0xa7, 0xcc, 0xed, 0xd9, 0xd6, 0x79, 0xcb,
	0x26, 0xb4, 0xaf, 0x73, 0x2f, 0x2c, 0xb4, 0x75, 0x96, 0x17, 0x7c, 0xe1, 0xa0, 0x5f, 0x18, 0xb0,
	0xa6, 0x4f, 0x4d, 0x74, 0xed, 0xbc, 0xd1, 0x98, 0x5a, 0xbf, 0x35, 0xcf, 0xfc, 0x1c, 0xe7, 0xe4,
	0x43, 0xee, 0x4d, 0x0d, 0x6d, 0x6a, 0xde, 0xf0, 0x21, 0xa5, 0xe4, 0x83, 0x42, 0x99, 0xeb, 0xcb,
	0x54, 0xcc, 0xe5, 0xc8, 0x1b, 0xd2, 0x70, 0x95, 0x1b, 0xbe, 0x82, 0x2e, 0xcf, 0x32, 0xcc, 0x53,
	0xb0, 0xfb, 0x13, 0x28, 0xc9, 0x1e, 0xf6, 0x09, 0x0a, 0x60, 0x49, 0x7e, 0x41, 0xd7, 0xcf, 0x6f,
	0xf8, 0xd4, 0x81, 0x8f, 0xde, 0x24, 0x26, 0x53, 0x70, 0x89, 0x7b, 0xb2, 0x61, 0x97, 0x99, 0x27,
	0x81, 0x60, 0xde, 0x31, 0x6e, 0xb4, 0xee, 0xfe, 0xed, 0xa4, 0xb6, 0xf0, 0xfa, 0xa4, 0x66, 0xfc,
	0xeb, 0xa4, 0x66, 0xfc, 0xe7, 0xa4, 0x66, 0xbc, 0x3c, 0xad, 0x19, 0xbf, 0x3d, 0xad, 0x19, 0xaf,
	0x4e, 0x6b, 0xc6, 0x1f, 0x4e, 0x6b, 0xc6, 0x1f, 0x4f, 0x6b, 0xc6, 0x9f, 0x4f, 0x6b, 0xc6, 0xeb,
	0xd3, 0x9a, 0xf1, 0xcb, 0x7f, 0xd4, 0x16, 0xbe, 0x5b, 0x56, 0xcc, 0x74, 0x16, 0xf9, 0x5f, 0xa8,
	0xb7, 0xff, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xc6, 0x58, 0x0c, 0x9e, 0xd9, 0x15, 0x00, 0x00,
}
