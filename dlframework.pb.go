// Code generated by protoc-gen-gogo.
// source: dlframework.proto
// DO NOT EDIT!

/*
	Package dlframework is a generated protocol buffer package.

	It is generated from these files:
		dlframework.proto

	It has these top-level messages:
		ErrorStatus
		ContainerHardware
		FrameworkManifest
		ModelManifest
		GetModelManifestsResponse
		GetFrameworkManifestsResponse
		GetFrameworkModelManifestRequest
		GetModelManifestRequest
		GetFrameworkManifestRequest
		Null
		PredictRequest
		PredictionFeature
		PredictResponse
*/
package dlframework

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/gogo/protobuf/gogoproto"

import bytes "bytes"

import strings "strings"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ErrorStatus struct {
	Ok      bool   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty" yaml:"ok,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty" yaml:"message,omitempty"`
}

func (m *ErrorStatus) Reset()                    { *m = ErrorStatus{} }
func (*ErrorStatus) ProtoMessage()               {}
func (*ErrorStatus) Descriptor() ([]byte, []int) { return fileDescriptorDlframework, []int{0} }

func (m *ErrorStatus) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *ErrorStatus) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ContainerHardware struct {
	Gpu string `protobuf:"bytes,1,opt,name=gpu,proto3" json:"gpu,omitempty" yaml:"gpu,omitempty"`
	Cpu string `protobuf:"bytes,2,opt,name=cpu,proto3" json:"cpu,omitempty" yaml:"cpu,omitempty"`
}

func (m *ContainerHardware) Reset()                    { *m = ContainerHardware{} }
func (*ContainerHardware) ProtoMessage()               {}
func (*ContainerHardware) Descriptor() ([]byte, []int) { return fileDescriptorDlframework, []int{1} }

func (m *ContainerHardware) GetGpu() string {
	if m != nil {
		return m.Gpu
	}
	return ""
}

func (m *ContainerHardware) GetCpu() string {
	if m != nil {
		return m.Cpu
	}
	return ""
}

type FrameworkManifest struct {
	Name      string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	Version   string                        `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty" yaml:"version,omitempty"`
	Container map[string]*ContainerHardware `protobuf:"bytes,3,rep,name=container" json:"container,omitempty" yaml:"container,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *FrameworkManifest) Reset()                    { *m = FrameworkManifest{} }
func (*FrameworkManifest) ProtoMessage()               {}
func (*FrameworkManifest) Descriptor() ([]byte, []int) { return fileDescriptorDlframework, []int{2} }

func (m *FrameworkManifest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FrameworkManifest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *FrameworkManifest) GetContainer() map[string]*ContainerHardware {
	if m != nil {
		return m.Container
	}
	return nil
}

type ModelManifest struct {
	Name              string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	Version           string                        `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty" yaml:"version,omitempty"`
	Framework         *FrameworkManifest            `protobuf:"bytes,3,opt,name=framework" json:"framework,omitempty" yaml:"framework,omitempty"`
	Container         map[string]*ContainerHardware `protobuf:"bytes,4,rep,name=container" json:"container,omitempty" yaml:"container,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	Description       string                        `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty" yaml:"description,omitempty"`
	Reference         []string                      `protobuf:"bytes,6,rep,name=reference" json:"reference,omitempty" yaml:"references,omitempty"`
	License           string                        `protobuf:"bytes,7,opt,name=license,proto3" json:"license,omitempty" yaml:"license,omitempty"`
	Inputs            []*ModelManifest_Type         `protobuf:"bytes,8,rep,name=inputs" json:"inputs,omitempty" yaml:"inputs,omitempty"`
	Output            *ModelManifest_Type           `protobuf:"bytes,9,opt,name=output" json:"output,omitempty" yaml:"inputs,omitempty"`
	BeforePreprocess  string                        `protobuf:"bytes,10,opt,name=before_preprocess,json=beforePreprocess,proto3" json:"before_preprocess,omitempty" yaml:"before_preprocess,omitempty"`
	Preprocess        string                        `protobuf:"bytes,11,opt,name=preprocess,proto3" json:"preprocess,omitempty" yaml:"preprocess,omitempty"`
	AfterPreprocess   string                        `protobuf:"bytes,12,opt,name=after_preprocess,json=afterPreprocess,proto3" json:"after_preprocess,omitempty" yaml:"after_preprocess,omitempty"`
	BeforePostprocess string                        `protobuf:"bytes,13,opt,name=before_postprocess,json=beforePostprocess,proto3" json:"before_postprocess,omitempty" yaml:"before_postprocess,omitempty"`
	Postprocess       string                        `protobuf:"bytes,14,opt,name=postprocess,proto3" json:"postprocess,omitempty" yaml:"postprocess,omitempty"`
	AfterPostprocess  string                        `protobuf:"bytes,15,opt,name=after_postprocess,json=afterPostprocess,proto3" json:"after_postprocess,omitempty" yaml:"after_postprocess,omitempty"`
	Model             *ModelManifest_Model          `protobuf:"bytes,16,opt,name=model" json:"model,omitempty" yaml:"model,omitempty"`
	Attributes        map[string]string             `protobuf:"bytes,17,rep,name=attributes" json:"attributes,omitempty" yaml:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ModelManifest) Reset()                    { *m = ModelManifest{} }
func (*ModelManifest) ProtoMessage()               {}
func (*ModelManifest) Descriptor() ([]byte, []int) { return fileDescriptorDlframework, []int{3} }

func (m *ModelManifest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ModelManifest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ModelManifest) GetFramework() *FrameworkManifest {
	if m != nil {
		return m.Framework
	}
	return nil
}

func (m *ModelManifest) GetContainer() map[string]*ContainerHardware {
	if m != nil {
		return m.Container
	}
	return nil
}

func (m *ModelManifest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ModelManifest) GetReference() []string {
	if m != nil {
		return m.Reference
	}
	return nil
}

func (m *ModelManifest) GetLicense() string {
	if m != nil {
		return m.License
	}
	return ""
}

func (m *ModelManifest) GetInputs() []*ModelManifest_Type {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *ModelManifest) GetOutput() *ModelManifest_Type {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *ModelManifest) GetBeforePreprocess() string {
	if m != nil {
		return m.BeforePreprocess
	}
	return ""
}

func (m *ModelManifest) GetPreprocess() string {
	if m != nil {
		return m.Preprocess
	}
	return ""
}

func (m *ModelManifest) GetAfterPreprocess() string {
	if m != nil {
		return m.AfterPreprocess
	}
	return ""
}

func (m *ModelManifest) GetBeforePostprocess() string {
	if m != nil {
		return m.BeforePostprocess
	}
	return ""
}

func (m *ModelManifest) GetPostprocess() string {
	if m != nil {
		return m.Postprocess
	}
	return ""
}

func (m *ModelManifest) GetAfterPostprocess() string {
	if m != nil {
		return m.AfterPostprocess
	}
	return ""
}

func (m *ModelManifest) GetModel() *ModelManifest_Model {
	if m != nil {
		return m.Model
	}
	return nil
}

func (m *ModelManifest) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type ModelManifest_Type struct {
	Type        string                                   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty" yaml:"type,omitempty"`
	Description string                                   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty" yaml:"description,omitempty"`
	Parameters  map[string]*ModelManifest_Type_Parameter `protobuf:"bytes,3,rep,name=parameters" json:"parameters,omitempty" yaml:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ModelManifest_Type) Reset()                    { *m = ModelManifest_Type{} }
func (*ModelManifest_Type) ProtoMessage()               {}
func (*ModelManifest_Type) Descriptor() ([]byte, []int) { return fileDescriptorDlframework, []int{3, 0} }

func (m *ModelManifest_Type) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ModelManifest_Type) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ModelManifest_Type) GetParameters() map[string]*ModelManifest_Type_Parameter {
	if m != nil {
		return m.Parameters
	}
	return nil
}

type ModelManifest_Type_Parameter struct {
	Parameter string `protobuf:"bytes,1,opt,name=parameter,proto3" json:"parameter,omitempty" yaml:",flow"`
}

func (m *ModelManifest_Type_Parameter) Reset()      { *m = ModelManifest_Type_Parameter{} }
func (*ModelManifest_Type_Parameter) ProtoMessage() {}
func (*ModelManifest_Type_Parameter) Descriptor() ([]byte, []int) {
	return fileDescriptorDlframework, []int{3, 0, 0}
}

func (m *ModelManifest_Type_Parameter) GetParameter() string {
	if m != nil {
		return m.Parameter
	}
	return ""
}

type ModelManifest_Model struct {
	BaseUrl     string `protobuf:"bytes,1,opt,name=base_url,json=baseUrl,proto3" json:"base_url,omitempty" yaml:"base_url,omitempty"`
	WeightsPath string `protobuf:"bytes,2,opt,name=weights_path,json=weightsPath,proto3" json:"weights_path,omitempty" yaml:"weights_path,omitempty"`
	GraphPath   string `protobuf:"bytes,3,opt,name=graph_path,json=graphPath,proto3" json:"graph_path,omitempty" yaml:"graph_path,omitempty"`
	IsArchive   bool   `protobuf:"varint,4,opt,name=is_archive,json=isArchive,proto3" json:"is_archive,omitempty" yaml:"is_archive,omitempty"`
}

func (m *ModelManifest_Model) Reset()      { *m = ModelManifest_Model{} }
func (*ModelManifest_Model) ProtoMessage() {}
func (*ModelManifest_Model) Descriptor() ([]byte, []int) {
	return fileDescriptorDlframework, []int{3, 1}
}

func (m *ModelManifest_Model) GetBaseUrl() string {
	if m != nil {
		return m.BaseUrl
	}
	return ""
}

func (m *ModelManifest_Model) GetWeightsPath() string {
	if m != nil {
		return m.WeightsPath
	}
	return ""
}

func (m *ModelManifest_Model) GetGraphPath() string {
	if m != nil {
		return m.GraphPath
	}
	return ""
}

func (m *ModelManifest_Model) GetIsArchive() bool {
	if m != nil {
		return m.IsArchive
	}
	return false
}

type GetModelManifestsResponse struct {
	Manifests []*ModelManifest `protobuf:"bytes,1,rep,name=manifests" json:"manifests,omitempty" yaml:"manifests,omitempty"`
}

func (m *GetModelManifestsResponse) Reset()      { *m = GetModelManifestsResponse{} }
func (*GetModelManifestsResponse) ProtoMessage() {}
func (*GetModelManifestsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorDlframework, []int{4}
}

func (m *GetModelManifestsResponse) GetManifests() []*ModelManifest {
	if m != nil {
		return m.Manifests
	}
	return nil
}

type GetFrameworkManifestsResponse struct {
	Manifests []*FrameworkManifest `protobuf:"bytes,1,rep,name=manifests" json:"manifests,omitempty" yaml:"manifests,omitempty"`
}

func (m *GetFrameworkManifestsResponse) Reset()      { *m = GetFrameworkManifestsResponse{} }
func (*GetFrameworkManifestsResponse) ProtoMessage() {}
func (*GetFrameworkManifestsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorDlframework, []int{5}
}

func (m *GetFrameworkManifestsResponse) GetManifests() []*FrameworkManifest {
	if m != nil {
		return m.Manifests
	}
	return nil
}

type GetFrameworkModelManifestRequest struct {
	FrameworkName    string `protobuf:"bytes,1,opt,name=framework_name,json=frameworkName,proto3" json:"framework_name,omitempty" yaml:"framework_name,omitempty"`
	FrameworkVersion string `protobuf:"bytes,2,opt,name=framework_version,json=frameworkVersion,proto3" json:"framework_version,omitempty" yaml:"framework_version,omitempty"`
	ModelName        string `protobuf:"bytes,3,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty" yaml:"model_name,omitempty"`
	ModelVersion     string `protobuf:"bytes,4,opt,name=model_version,json=modelVersion,proto3" json:"model_version,omitempty" yaml:"model_version,omitempty"`
}

func (m *GetFrameworkModelManifestRequest) Reset()      { *m = GetFrameworkModelManifestRequest{} }
func (*GetFrameworkModelManifestRequest) ProtoMessage() {}
func (*GetFrameworkModelManifestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorDlframework, []int{6}
}

func (m *GetFrameworkModelManifestRequest) GetFrameworkName() string {
	if m != nil {
		return m.FrameworkName
	}
	return ""
}

func (m *GetFrameworkModelManifestRequest) GetFrameworkVersion() string {
	if m != nil {
		return m.FrameworkVersion
	}
	return ""
}

func (m *GetFrameworkModelManifestRequest) GetModelName() string {
	if m != nil {
		return m.ModelName
	}
	return ""
}

func (m *GetFrameworkModelManifestRequest) GetModelVersion() string {
	if m != nil {
		return m.ModelVersion
	}
	return ""
}

type GetModelManifestRequest struct {
	ModelName    string `protobuf:"bytes,1,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty" yaml:"model_name,omitempty"`
	ModelVersion string `protobuf:"bytes,2,opt,name=model_version,json=modelVersion,proto3" json:"model_version,omitempty" yaml:"model_version,omitempty"`
}

func (m *GetModelManifestRequest) Reset()      { *m = GetModelManifestRequest{} }
func (*GetModelManifestRequest) ProtoMessage() {}
func (*GetModelManifestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorDlframework, []int{7}
}

func (m *GetModelManifestRequest) GetModelName() string {
	if m != nil {
		return m.ModelName
	}
	return ""
}

func (m *GetModelManifestRequest) GetModelVersion() string {
	if m != nil {
		return m.ModelVersion
	}
	return ""
}

type GetFrameworkManifestRequest struct {
	FrameworkName    string `protobuf:"bytes,1,opt,name=framework_name,json=frameworkName,proto3" json:"framework_name,omitempty" yaml:"framework_name,omitempty"`
	FrameworkVersion string `protobuf:"bytes,2,opt,name=framework_version,json=frameworkVersion,proto3" json:"framework_version,omitempty" yaml:"framework_version,omitempty"`
}

func (m *GetFrameworkManifestRequest) Reset()      { *m = GetFrameworkManifestRequest{} }
func (*GetFrameworkManifestRequest) ProtoMessage() {}
func (*GetFrameworkManifestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorDlframework, []int{8}
}

func (m *GetFrameworkManifestRequest) GetFrameworkName() string {
	if m != nil {
		return m.FrameworkName
	}
	return ""
}

func (m *GetFrameworkManifestRequest) GetFrameworkVersion() string {
	if m != nil {
		return m.FrameworkVersion
	}
	return ""
}

type Null struct {
}

func (m *Null) Reset()                    { *m = Null{} }
func (*Null) ProtoMessage()               {}
func (*Null) Descriptor() ([]byte, []int) { return fileDescriptorDlframework, []int{9} }

type PredictRequest struct {
	ModelName        string `protobuf:"bytes,1,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty" yaml:"model_name,omitempty"`
	ModelVersion     string `protobuf:"bytes,2,opt,name=model_version,json=modelVersion,proto3" json:"model_version,omitempty" yaml:"model_version,omitempty"`
	FrameworkName    string `protobuf:"bytes,3,opt,name=framework_name,json=frameworkName,proto3" json:"framework_name,omitempty" yaml:"framework_name,omitempty"`
	FrameworkVersion string `protobuf:"bytes,4,opt,name=framework_version,json=frameworkVersion,proto3" json:"framework_version,omitempty" yaml:"framework_version,omitempty"`
	Limit            int32  `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty" yaml:"limit,omitempty"`
	// Types that are valid to be assigned to Input:
	//	*PredictRequest_Data
	//	*PredictRequest_Url
	Input isPredictRequest_Input `protobuf_oneof:"input"`
}

func (m *PredictRequest) Reset()                    { *m = PredictRequest{} }
func (*PredictRequest) ProtoMessage()               {}
func (*PredictRequest) Descriptor() ([]byte, []int) { return fileDescriptorDlframework, []int{10} }

type isPredictRequest_Input interface {
	isPredictRequest_Input()
	Equal(interface{}) bool
	VerboseEqual(interface{}) error
	MarshalTo([]byte) (int, error)
	Size() int
}

type PredictRequest_Data struct {
	Data []byte `protobuf:"bytes,6,opt,name=data,proto3,oneof"`
}
type PredictRequest_Url struct {
	Url string `protobuf:"bytes,7,opt,name=url,proto3,oneof"`
}

func (*PredictRequest_Data) isPredictRequest_Input() {}
func (*PredictRequest_Url) isPredictRequest_Input()  {}

func (m *PredictRequest) GetInput() isPredictRequest_Input {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *PredictRequest) GetModelName() string {
	if m != nil {
		return m.ModelName
	}
	return ""
}

func (m *PredictRequest) GetModelVersion() string {
	if m != nil {
		return m.ModelVersion
	}
	return ""
}

func (m *PredictRequest) GetFrameworkName() string {
	if m != nil {
		return m.FrameworkName
	}
	return ""
}

func (m *PredictRequest) GetFrameworkVersion() string {
	if m != nil {
		return m.FrameworkVersion
	}
	return ""
}

func (m *PredictRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *PredictRequest) GetData() []byte {
	if x, ok := m.GetInput().(*PredictRequest_Data); ok {
		return x.Data
	}
	return nil
}

func (m *PredictRequest) GetUrl() string {
	if x, ok := m.GetInput().(*PredictRequest_Url); ok {
		return x.Url
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PredictRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _PredictRequest_OneofMarshaler, _PredictRequest_OneofUnmarshaler, _PredictRequest_OneofSizer, []interface{}{
		(*PredictRequest_Data)(nil),
		(*PredictRequest_Url)(nil),
	}
}

func _PredictRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PredictRequest)
	// input
	switch x := m.Input.(type) {
	case *PredictRequest_Data:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		_ = b.EncodeRawBytes(x.Data)
	case *PredictRequest_Url:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Url)
	case nil:
	default:
		return fmt.Errorf("PredictRequest.Input has unexpected type %T", x)
	}
	return nil
}

func _PredictRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PredictRequest)
	switch tag {
	case 6: // input.data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Input = &PredictRequest_Data{x}
		return true, err
	case 7: // input.url
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Input = &PredictRequest_Url{x}
		return true, err
	default:
		return false, nil
	}
}

func _PredictRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*PredictRequest)
	// input
	switch x := m.Input.(type) {
	case *PredictRequest_Data:
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Data)))
		n += len(x.Data)
	case *PredictRequest_Url:
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Url)))
		n += len(x.Url)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type PredictionFeature struct {
	Index       int64   `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty" yaml:"index,omitempty"`
	Name        string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	Probability float32 `protobuf:"fixed32,3,opt,name=probability,proto3" json:"probability,omitempty" yaml:"probability,omitempty"`
}

func (m *PredictionFeature) Reset()                    { *m = PredictionFeature{} }
func (*PredictionFeature) ProtoMessage()               {}
func (*PredictionFeature) Descriptor() ([]byte, []int) { return fileDescriptorDlframework, []int{11} }

func (m *PredictionFeature) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *PredictionFeature) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PredictionFeature) GetProbability() float32 {
	if m != nil {
		return m.Probability
	}
	return 0
}

type PredictResponse struct {
	Id       string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id,omitempty"`
	Features []*PredictionFeature `protobuf:"bytes,2,rep,name=features" json:"features,omitempty" yaml:"features,omitempty"`
	Error    *ErrorStatus         `protobuf:"bytes,3,opt,name=error" json:"error,omitempty" yaml:"error,omitempty"`
}

func (m *PredictResponse) Reset()                    { *m = PredictResponse{} }
func (*PredictResponse) ProtoMessage()               {}
func (*PredictResponse) Descriptor() ([]byte, []int) { return fileDescriptorDlframework, []int{12} }

func (m *PredictResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PredictResponse) GetFeatures() []*PredictionFeature {
	if m != nil {
		return m.Features
	}
	return nil
}

func (m *PredictResponse) GetError() *ErrorStatus {
	if m != nil {
		return m.Error
	}
	return nil
}

func init() {
	proto.RegisterType((*ErrorStatus)(nil), "carml.org.dlframework.ErrorStatus")
	proto.RegisterType((*ContainerHardware)(nil), "carml.org.dlframework.ContainerHardware")
	proto.RegisterType((*FrameworkManifest)(nil), "carml.org.dlframework.FrameworkManifest")
	proto.RegisterType((*ModelManifest)(nil), "carml.org.dlframework.ModelManifest")
	proto.RegisterType((*ModelManifest_Type)(nil), "carml.org.dlframework.ModelManifest.Type")
	proto.RegisterType((*ModelManifest_Type_Parameter)(nil), "carml.org.dlframework.ModelManifest.Type.Parameter")
	proto.RegisterType((*ModelManifest_Model)(nil), "carml.org.dlframework.ModelManifest.Model")
	proto.RegisterType((*GetModelManifestsResponse)(nil), "carml.org.dlframework.GetModelManifestsResponse")
	proto.RegisterType((*GetFrameworkManifestsResponse)(nil), "carml.org.dlframework.GetFrameworkManifestsResponse")
	proto.RegisterType((*GetFrameworkModelManifestRequest)(nil), "carml.org.dlframework.GetFrameworkModelManifestRequest")
	proto.RegisterType((*GetModelManifestRequest)(nil), "carml.org.dlframework.GetModelManifestRequest")
	proto.RegisterType((*GetFrameworkManifestRequest)(nil), "carml.org.dlframework.GetFrameworkManifestRequest")
	proto.RegisterType((*Null)(nil), "carml.org.dlframework.Null")
	proto.RegisterType((*PredictRequest)(nil), "carml.org.dlframework.PredictRequest")
	proto.RegisterType((*PredictionFeature)(nil), "carml.org.dlframework.PredictionFeature")
	proto.RegisterType((*PredictResponse)(nil), "carml.org.dlframework.PredictResponse")
}
func (this *ErrorStatus) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ErrorStatus)
	if !ok {
		that2, ok := that.(ErrorStatus)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ErrorStatus")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ErrorStatus but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ErrorStatus but is not nil && this == nil")
	}
	if this.Ok != that1.Ok {
		return fmt.Errorf("Ok this(%v) Not Equal that(%v)", this.Ok, that1.Ok)
	}
	if this.Message != that1.Message {
		return fmt.Errorf("Message this(%v) Not Equal that(%v)", this.Message, that1.Message)
	}
	return nil
}
func (this *ErrorStatus) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ErrorStatus)
	if !ok {
		that2, ok := that.(ErrorStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Ok != that1.Ok {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}
func (this *ContainerHardware) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ContainerHardware)
	if !ok {
		that2, ok := that.(ContainerHardware)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ContainerHardware")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ContainerHardware but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ContainerHardware but is not nil && this == nil")
	}
	if this.Gpu != that1.Gpu {
		return fmt.Errorf("Gpu this(%v) Not Equal that(%v)", this.Gpu, that1.Gpu)
	}
	if this.Cpu != that1.Cpu {
		return fmt.Errorf("Cpu this(%v) Not Equal that(%v)", this.Cpu, that1.Cpu)
	}
	return nil
}
func (this *ContainerHardware) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ContainerHardware)
	if !ok {
		that2, ok := that.(ContainerHardware)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Gpu != that1.Gpu {
		return false
	}
	if this.Cpu != that1.Cpu {
		return false
	}
	return true
}
func (this *FrameworkManifest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*FrameworkManifest)
	if !ok {
		that2, ok := that.(FrameworkManifest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *FrameworkManifest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *FrameworkManifest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *FrameworkManifest but is not nil && this == nil")
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if this.Version != that1.Version {
		return fmt.Errorf("Version this(%v) Not Equal that(%v)", this.Version, that1.Version)
	}
	if len(this.Container) != len(that1.Container) {
		return fmt.Errorf("Container this(%v) Not Equal that(%v)", len(this.Container), len(that1.Container))
	}
	for i := range this.Container {
		if !this.Container[i].Equal(that1.Container[i]) {
			return fmt.Errorf("Container this[%v](%v) Not Equal that[%v](%v)", i, this.Container[i], i, that1.Container[i])
		}
	}
	return nil
}
func (this *FrameworkManifest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*FrameworkManifest)
	if !ok {
		that2, ok := that.(FrameworkManifest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if len(this.Container) != len(that1.Container) {
		return false
	}
	for i := range this.Container {
		if !this.Container[i].Equal(that1.Container[i]) {
			return false
		}
	}
	return true
}
func (this *ModelManifest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ModelManifest)
	if !ok {
		that2, ok := that.(ModelManifest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ModelManifest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ModelManifest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ModelManifest but is not nil && this == nil")
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if this.Version != that1.Version {
		return fmt.Errorf("Version this(%v) Not Equal that(%v)", this.Version, that1.Version)
	}
	if !this.Framework.Equal(that1.Framework) {
		return fmt.Errorf("Framework this(%v) Not Equal that(%v)", this.Framework, that1.Framework)
	}
	if len(this.Container) != len(that1.Container) {
		return fmt.Errorf("Container this(%v) Not Equal that(%v)", len(this.Container), len(that1.Container))
	}
	for i := range this.Container {
		if !this.Container[i].Equal(that1.Container[i]) {
			return fmt.Errorf("Container this[%v](%v) Not Equal that[%v](%v)", i, this.Container[i], i, that1.Container[i])
		}
	}
	if this.Description != that1.Description {
		return fmt.Errorf("Description this(%v) Not Equal that(%v)", this.Description, that1.Description)
	}
	if len(this.Reference) != len(that1.Reference) {
		return fmt.Errorf("Reference this(%v) Not Equal that(%v)", len(this.Reference), len(that1.Reference))
	}
	for i := range this.Reference {
		if this.Reference[i] != that1.Reference[i] {
			return fmt.Errorf("Reference this[%v](%v) Not Equal that[%v](%v)", i, this.Reference[i], i, that1.Reference[i])
		}
	}
	if this.License != that1.License {
		return fmt.Errorf("License this(%v) Not Equal that(%v)", this.License, that1.License)
	}
	if len(this.Inputs) != len(that1.Inputs) {
		return fmt.Errorf("Inputs this(%v) Not Equal that(%v)", len(this.Inputs), len(that1.Inputs))
	}
	for i := range this.Inputs {
		if !this.Inputs[i].Equal(that1.Inputs[i]) {
			return fmt.Errorf("Inputs this[%v](%v) Not Equal that[%v](%v)", i, this.Inputs[i], i, that1.Inputs[i])
		}
	}
	if !this.Output.Equal(that1.Output) {
		return fmt.Errorf("Output this(%v) Not Equal that(%v)", this.Output, that1.Output)
	}
	if this.BeforePreprocess != that1.BeforePreprocess {
		return fmt.Errorf("BeforePreprocess this(%v) Not Equal that(%v)", this.BeforePreprocess, that1.BeforePreprocess)
	}
	if this.Preprocess != that1.Preprocess {
		return fmt.Errorf("Preprocess this(%v) Not Equal that(%v)", this.Preprocess, that1.Preprocess)
	}
	if this.AfterPreprocess != that1.AfterPreprocess {
		return fmt.Errorf("AfterPreprocess this(%v) Not Equal that(%v)", this.AfterPreprocess, that1.AfterPreprocess)
	}
	if this.BeforePostprocess != that1.BeforePostprocess {
		return fmt.Errorf("BeforePostprocess this(%v) Not Equal that(%v)", this.BeforePostprocess, that1.BeforePostprocess)
	}
	if this.Postprocess != that1.Postprocess {
		return fmt.Errorf("Postprocess this(%v) Not Equal that(%v)", this.Postprocess, that1.Postprocess)
	}
	if this.AfterPostprocess != that1.AfterPostprocess {
		return fmt.Errorf("AfterPostprocess this(%v) Not Equal that(%v)", this.AfterPostprocess, that1.AfterPostprocess)
	}
	if !this.Model.Equal(that1.Model) {
		return fmt.Errorf("Model this(%v) Not Equal that(%v)", this.Model, that1.Model)
	}
	if len(this.Attributes) != len(that1.Attributes) {
		return fmt.Errorf("Attributes this(%v) Not Equal that(%v)", len(this.Attributes), len(that1.Attributes))
	}
	for i := range this.Attributes {
		if this.Attributes[i] != that1.Attributes[i] {
			return fmt.Errorf("Attributes this[%v](%v) Not Equal that[%v](%v)", i, this.Attributes[i], i, that1.Attributes[i])
		}
	}
	return nil
}
func (this *ModelManifest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ModelManifest)
	if !ok {
		that2, ok := that.(ModelManifest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if !this.Framework.Equal(that1.Framework) {
		return false
	}
	if len(this.Container) != len(that1.Container) {
		return false
	}
	for i := range this.Container {
		if !this.Container[i].Equal(that1.Container[i]) {
			return false
		}
	}
	if this.Description != that1.Description {
		return false
	}
	if len(this.Reference) != len(that1.Reference) {
		return false
	}
	for i := range this.Reference {
		if this.Reference[i] != that1.Reference[i] {
			return false
		}
	}
	if this.License != that1.License {
		return false
	}
	if len(this.Inputs) != len(that1.Inputs) {
		return false
	}
	for i := range this.Inputs {
		if !this.Inputs[i].Equal(that1.Inputs[i]) {
			return false
		}
	}
	if !this.Output.Equal(that1.Output) {
		return false
	}
	if this.BeforePreprocess != that1.BeforePreprocess {
		return false
	}
	if this.Preprocess != that1.Preprocess {
		return false
	}
	if this.AfterPreprocess != that1.AfterPreprocess {
		return false
	}
	if this.BeforePostprocess != that1.BeforePostprocess {
		return false
	}
	if this.Postprocess != that1.Postprocess {
		return false
	}
	if this.AfterPostprocess != that1.AfterPostprocess {
		return false
	}
	if !this.Model.Equal(that1.Model) {
		return false
	}
	if len(this.Attributes) != len(that1.Attributes) {
		return false
	}
	for i := range this.Attributes {
		if this.Attributes[i] != that1.Attributes[i] {
			return false
		}
	}
	return true
}
func (this *ModelManifest_Type) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ModelManifest_Type)
	if !ok {
		that2, ok := that.(ModelManifest_Type)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ModelManifest_Type")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ModelManifest_Type but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ModelManifest_Type but is not nil && this == nil")
	}
	if this.Type != that1.Type {
		return fmt.Errorf("Type this(%v) Not Equal that(%v)", this.Type, that1.Type)
	}
	if this.Description != that1.Description {
		return fmt.Errorf("Description this(%v) Not Equal that(%v)", this.Description, that1.Description)
	}
	if len(this.Parameters) != len(that1.Parameters) {
		return fmt.Errorf("Parameters this(%v) Not Equal that(%v)", len(this.Parameters), len(that1.Parameters))
	}
	for i := range this.Parameters {
		if !this.Parameters[i].Equal(that1.Parameters[i]) {
			return fmt.Errorf("Parameters this[%v](%v) Not Equal that[%v](%v)", i, this.Parameters[i], i, that1.Parameters[i])
		}
	}
	return nil
}
func (this *ModelManifest_Type) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ModelManifest_Type)
	if !ok {
		that2, ok := that.(ModelManifest_Type)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if len(this.Parameters) != len(that1.Parameters) {
		return false
	}
	for i := range this.Parameters {
		if !this.Parameters[i].Equal(that1.Parameters[i]) {
			return false
		}
	}
	return true
}
func (this *ModelManifest_Type_Parameter) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ModelManifest_Type_Parameter)
	if !ok {
		that2, ok := that.(ModelManifest_Type_Parameter)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ModelManifest_Type_Parameter")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ModelManifest_Type_Parameter but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ModelManifest_Type_Parameter but is not nil && this == nil")
	}
	if this.Parameter != that1.Parameter {
		return fmt.Errorf("Parameter this(%v) Not Equal that(%v)", this.Parameter, that1.Parameter)
	}
	return nil
}
func (this *ModelManifest_Type_Parameter) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ModelManifest_Type_Parameter)
	if !ok {
		that2, ok := that.(ModelManifest_Type_Parameter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Parameter != that1.Parameter {
		return false
	}
	return true
}
func (this *ModelManifest_Model) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ModelManifest_Model)
	if !ok {
		that2, ok := that.(ModelManifest_Model)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ModelManifest_Model")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ModelManifest_Model but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ModelManifest_Model but is not nil && this == nil")
	}
	if this.BaseUrl != that1.BaseUrl {
		return fmt.Errorf("BaseUrl this(%v) Not Equal that(%v)", this.BaseUrl, that1.BaseUrl)
	}
	if this.WeightsPath != that1.WeightsPath {
		return fmt.Errorf("WeightsPath this(%v) Not Equal that(%v)", this.WeightsPath, that1.WeightsPath)
	}
	if this.GraphPath != that1.GraphPath {
		return fmt.Errorf("GraphPath this(%v) Not Equal that(%v)", this.GraphPath, that1.GraphPath)
	}
	if this.IsArchive != that1.IsArchive {
		return fmt.Errorf("IsArchive this(%v) Not Equal that(%v)", this.IsArchive, that1.IsArchive)
	}
	return nil
}
func (this *ModelManifest_Model) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ModelManifest_Model)
	if !ok {
		that2, ok := that.(ModelManifest_Model)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.BaseUrl != that1.BaseUrl {
		return false
	}
	if this.WeightsPath != that1.WeightsPath {
		return false
	}
	if this.GraphPath != that1.GraphPath {
		return false
	}
	if this.IsArchive != that1.IsArchive {
		return false
	}
	return true
}
func (this *GetModelManifestsResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GetModelManifestsResponse)
	if !ok {
		that2, ok := that.(GetModelManifestsResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GetModelManifestsResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GetModelManifestsResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GetModelManifestsResponse but is not nil && this == nil")
	}
	if len(this.Manifests) != len(that1.Manifests) {
		return fmt.Errorf("Manifests this(%v) Not Equal that(%v)", len(this.Manifests), len(that1.Manifests))
	}
	for i := range this.Manifests {
		if !this.Manifests[i].Equal(that1.Manifests[i]) {
			return fmt.Errorf("Manifests this[%v](%v) Not Equal that[%v](%v)", i, this.Manifests[i], i, that1.Manifests[i])
		}
	}
	return nil
}
func (this *GetModelManifestsResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetModelManifestsResponse)
	if !ok {
		that2, ok := that.(GetModelManifestsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Manifests) != len(that1.Manifests) {
		return false
	}
	for i := range this.Manifests {
		if !this.Manifests[i].Equal(that1.Manifests[i]) {
			return false
		}
	}
	return true
}
func (this *GetFrameworkManifestsResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GetFrameworkManifestsResponse)
	if !ok {
		that2, ok := that.(GetFrameworkManifestsResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GetFrameworkManifestsResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GetFrameworkManifestsResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GetFrameworkManifestsResponse but is not nil && this == nil")
	}
	if len(this.Manifests) != len(that1.Manifests) {
		return fmt.Errorf("Manifests this(%v) Not Equal that(%v)", len(this.Manifests), len(that1.Manifests))
	}
	for i := range this.Manifests {
		if !this.Manifests[i].Equal(that1.Manifests[i]) {
			return fmt.Errorf("Manifests this[%v](%v) Not Equal that[%v](%v)", i, this.Manifests[i], i, that1.Manifests[i])
		}
	}
	return nil
}
func (this *GetFrameworkManifestsResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetFrameworkManifestsResponse)
	if !ok {
		that2, ok := that.(GetFrameworkManifestsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Manifests) != len(that1.Manifests) {
		return false
	}
	for i := range this.Manifests {
		if !this.Manifests[i].Equal(that1.Manifests[i]) {
			return false
		}
	}
	return true
}
func (this *GetFrameworkModelManifestRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GetFrameworkModelManifestRequest)
	if !ok {
		that2, ok := that.(GetFrameworkModelManifestRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GetFrameworkModelManifestRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GetFrameworkModelManifestRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GetFrameworkModelManifestRequest but is not nil && this == nil")
	}
	if this.FrameworkName != that1.FrameworkName {
		return fmt.Errorf("FrameworkName this(%v) Not Equal that(%v)", this.FrameworkName, that1.FrameworkName)
	}
	if this.FrameworkVersion != that1.FrameworkVersion {
		return fmt.Errorf("FrameworkVersion this(%v) Not Equal that(%v)", this.FrameworkVersion, that1.FrameworkVersion)
	}
	if this.ModelName != that1.ModelName {
		return fmt.Errorf("ModelName this(%v) Not Equal that(%v)", this.ModelName, that1.ModelName)
	}
	if this.ModelVersion != that1.ModelVersion {
		return fmt.Errorf("ModelVersion this(%v) Not Equal that(%v)", this.ModelVersion, that1.ModelVersion)
	}
	return nil
}
func (this *GetFrameworkModelManifestRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetFrameworkModelManifestRequest)
	if !ok {
		that2, ok := that.(GetFrameworkModelManifestRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.FrameworkName != that1.FrameworkName {
		return false
	}
	if this.FrameworkVersion != that1.FrameworkVersion {
		return false
	}
	if this.ModelName != that1.ModelName {
		return false
	}
	if this.ModelVersion != that1.ModelVersion {
		return false
	}
	return true
}
func (this *GetModelManifestRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GetModelManifestRequest)
	if !ok {
		that2, ok := that.(GetModelManifestRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GetModelManifestRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GetModelManifestRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GetModelManifestRequest but is not nil && this == nil")
	}
	if this.ModelName != that1.ModelName {
		return fmt.Errorf("ModelName this(%v) Not Equal that(%v)", this.ModelName, that1.ModelName)
	}
	if this.ModelVersion != that1.ModelVersion {
		return fmt.Errorf("ModelVersion this(%v) Not Equal that(%v)", this.ModelVersion, that1.ModelVersion)
	}
	return nil
}
func (this *GetModelManifestRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetModelManifestRequest)
	if !ok {
		that2, ok := that.(GetModelManifestRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ModelName != that1.ModelName {
		return false
	}
	if this.ModelVersion != that1.ModelVersion {
		return false
	}
	return true
}
func (this *GetFrameworkManifestRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GetFrameworkManifestRequest)
	if !ok {
		that2, ok := that.(GetFrameworkManifestRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GetFrameworkManifestRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GetFrameworkManifestRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GetFrameworkManifestRequest but is not nil && this == nil")
	}
	if this.FrameworkName != that1.FrameworkName {
		return fmt.Errorf("FrameworkName this(%v) Not Equal that(%v)", this.FrameworkName, that1.FrameworkName)
	}
	if this.FrameworkVersion != that1.FrameworkVersion {
		return fmt.Errorf("FrameworkVersion this(%v) Not Equal that(%v)", this.FrameworkVersion, that1.FrameworkVersion)
	}
	return nil
}
func (this *GetFrameworkManifestRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetFrameworkManifestRequest)
	if !ok {
		that2, ok := that.(GetFrameworkManifestRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.FrameworkName != that1.FrameworkName {
		return false
	}
	if this.FrameworkVersion != that1.FrameworkVersion {
		return false
	}
	return true
}
func (this *Null) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Null)
	if !ok {
		that2, ok := that.(Null)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Null")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Null but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Null but is not nil && this == nil")
	}
	return nil
}
func (this *Null) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Null)
	if !ok {
		that2, ok := that.(Null)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *PredictRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*PredictRequest)
	if !ok {
		that2, ok := that.(PredictRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *PredictRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *PredictRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *PredictRequest but is not nil && this == nil")
	}
	if this.ModelName != that1.ModelName {
		return fmt.Errorf("ModelName this(%v) Not Equal that(%v)", this.ModelName, that1.ModelName)
	}
	if this.ModelVersion != that1.ModelVersion {
		return fmt.Errorf("ModelVersion this(%v) Not Equal that(%v)", this.ModelVersion, that1.ModelVersion)
	}
	if this.FrameworkName != that1.FrameworkName {
		return fmt.Errorf("FrameworkName this(%v) Not Equal that(%v)", this.FrameworkName, that1.FrameworkName)
	}
	if this.FrameworkVersion != that1.FrameworkVersion {
		return fmt.Errorf("FrameworkVersion this(%v) Not Equal that(%v)", this.FrameworkVersion, that1.FrameworkVersion)
	}
	if this.Limit != that1.Limit {
		return fmt.Errorf("Limit this(%v) Not Equal that(%v)", this.Limit, that1.Limit)
	}
	if that1.Input == nil {
		if this.Input != nil {
			return fmt.Errorf("this.Input != nil && that1.Input == nil")
		}
	} else if this.Input == nil {
		return fmt.Errorf("this.Input == nil && that1.Input != nil")
	} else if err := this.Input.VerboseEqual(that1.Input); err != nil {
		return err
	}
	return nil
}
func (this *PredictRequest_Data) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*PredictRequest_Data)
	if !ok {
		that2, ok := that.(PredictRequest_Data)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *PredictRequest_Data")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *PredictRequest_Data but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *PredictRequest_Data but is not nil && this == nil")
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return fmt.Errorf("Data this(%v) Not Equal that(%v)", this.Data, that1.Data)
	}
	return nil
}
func (this *PredictRequest_Url) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*PredictRequest_Url)
	if !ok {
		that2, ok := that.(PredictRequest_Url)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *PredictRequest_Url")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *PredictRequest_Url but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *PredictRequest_Url but is not nil && this == nil")
	}
	if this.Url != that1.Url {
		return fmt.Errorf("Url this(%v) Not Equal that(%v)", this.Url, that1.Url)
	}
	return nil
}
func (this *PredictRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PredictRequest)
	if !ok {
		that2, ok := that.(PredictRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ModelName != that1.ModelName {
		return false
	}
	if this.ModelVersion != that1.ModelVersion {
		return false
	}
	if this.FrameworkName != that1.FrameworkName {
		return false
	}
	if this.FrameworkVersion != that1.FrameworkVersion {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if that1.Input == nil {
		if this.Input != nil {
			return false
		}
	} else if this.Input == nil {
		return false
	} else if !this.Input.Equal(that1.Input) {
		return false
	}
	return true
}
func (this *PredictRequest_Data) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PredictRequest_Data)
	if !ok {
		that2, ok := that.(PredictRequest_Data)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	return true
}
func (this *PredictRequest_Url) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PredictRequest_Url)
	if !ok {
		that2, ok := that.(PredictRequest_Url)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	return true
}
func (this *PredictionFeature) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*PredictionFeature)
	if !ok {
		that2, ok := that.(PredictionFeature)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *PredictionFeature")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *PredictionFeature but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *PredictionFeature but is not nil && this == nil")
	}
	if this.Index != that1.Index {
		return fmt.Errorf("Index this(%v) Not Equal that(%v)", this.Index, that1.Index)
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if this.Probability != that1.Probability {
		return fmt.Errorf("Probability this(%v) Not Equal that(%v)", this.Probability, that1.Probability)
	}
	return nil
}
func (this *PredictionFeature) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PredictionFeature)
	if !ok {
		that2, ok := that.(PredictionFeature)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Index != that1.Index {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Probability != that1.Probability {
		return false
	}
	return true
}
func (this *PredictResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*PredictResponse)
	if !ok {
		that2, ok := that.(PredictResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *PredictResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *PredictResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *PredictResponse but is not nil && this == nil")
	}
	if this.Id != that1.Id {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if len(this.Features) != len(that1.Features) {
		return fmt.Errorf("Features this(%v) Not Equal that(%v)", len(this.Features), len(that1.Features))
	}
	for i := range this.Features {
		if !this.Features[i].Equal(that1.Features[i]) {
			return fmt.Errorf("Features this[%v](%v) Not Equal that[%v](%v)", i, this.Features[i], i, that1.Features[i])
		}
	}
	if !this.Error.Equal(that1.Error) {
		return fmt.Errorf("Error this(%v) Not Equal that(%v)", this.Error, that1.Error)
	}
	return nil
}
func (this *PredictResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PredictResponse)
	if !ok {
		that2, ok := that.(PredictResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if len(this.Features) != len(that1.Features) {
		return false
	}
	for i := range this.Features {
		if !this.Features[i].Equal(that1.Features[i]) {
			return false
		}
	}
	if !this.Error.Equal(that1.Error) {
		return false
	}
	return true
}
func (this *ErrorStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dlframework.ErrorStatus{")
	s = append(s, "Ok: "+fmt.Sprintf("%#v", this.Ok)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ContainerHardware) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dlframework.ContainerHardware{")
	s = append(s, "Gpu: "+fmt.Sprintf("%#v", this.Gpu)+",\n")
	s = append(s, "Cpu: "+fmt.Sprintf("%#v", this.Cpu)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FrameworkManifest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dlframework.FrameworkManifest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	keysForContainer := make([]string, 0, len(this.Container))
	for k, _ := range this.Container {
		keysForContainer = append(keysForContainer, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForContainer)
	mapStringForContainer := "map[string]*ContainerHardware{"
	for _, k := range keysForContainer {
		mapStringForContainer += fmt.Sprintf("%#v: %#v,", k, this.Container[k])
	}
	mapStringForContainer += "}"
	if this.Container != nil {
		s = append(s, "Container: "+mapStringForContainer+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ModelManifest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 21)
	s = append(s, "&dlframework.ModelManifest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	if this.Framework != nil {
		s = append(s, "Framework: "+fmt.Sprintf("%#v", this.Framework)+",\n")
	}
	keysForContainer := make([]string, 0, len(this.Container))
	for k, _ := range this.Container {
		keysForContainer = append(keysForContainer, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForContainer)
	mapStringForContainer := "map[string]*ContainerHardware{"
	for _, k := range keysForContainer {
		mapStringForContainer += fmt.Sprintf("%#v: %#v,", k, this.Container[k])
	}
	mapStringForContainer += "}"
	if this.Container != nil {
		s = append(s, "Container: "+mapStringForContainer+",\n")
	}
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "Reference: "+fmt.Sprintf("%#v", this.Reference)+",\n")
	s = append(s, "License: "+fmt.Sprintf("%#v", this.License)+",\n")
	if this.Inputs != nil {
		s = append(s, "Inputs: "+fmt.Sprintf("%#v", this.Inputs)+",\n")
	}
	if this.Output != nil {
		s = append(s, "Output: "+fmt.Sprintf("%#v", this.Output)+",\n")
	}
	s = append(s, "BeforePreprocess: "+fmt.Sprintf("%#v", this.BeforePreprocess)+",\n")
	s = append(s, "Preprocess: "+fmt.Sprintf("%#v", this.Preprocess)+",\n")
	s = append(s, "AfterPreprocess: "+fmt.Sprintf("%#v", this.AfterPreprocess)+",\n")
	s = append(s, "BeforePostprocess: "+fmt.Sprintf("%#v", this.BeforePostprocess)+",\n")
	s = append(s, "Postprocess: "+fmt.Sprintf("%#v", this.Postprocess)+",\n")
	s = append(s, "AfterPostprocess: "+fmt.Sprintf("%#v", this.AfterPostprocess)+",\n")
	if this.Model != nil {
		s = append(s, "Model: "+fmt.Sprintf("%#v", this.Model)+",\n")
	}
	keysForAttributes := make([]string, 0, len(this.Attributes))
	for k, _ := range this.Attributes {
		keysForAttributes = append(keysForAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAttributes)
	mapStringForAttributes := "map[string]string{"
	for _, k := range keysForAttributes {
		mapStringForAttributes += fmt.Sprintf("%#v: %#v,", k, this.Attributes[k])
	}
	mapStringForAttributes += "}"
	if this.Attributes != nil {
		s = append(s, "Attributes: "+mapStringForAttributes+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ModelManifest_Type) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dlframework.ModelManifest_Type{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	keysForParameters := make([]string, 0, len(this.Parameters))
	for k, _ := range this.Parameters {
		keysForParameters = append(keysForParameters, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForParameters)
	mapStringForParameters := "map[string]*ModelManifest_Type_Parameter{"
	for _, k := range keysForParameters {
		mapStringForParameters += fmt.Sprintf("%#v: %#v,", k, this.Parameters[k])
	}
	mapStringForParameters += "}"
	if this.Parameters != nil {
		s = append(s, "Parameters: "+mapStringForParameters+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ModelManifest_Type_Parameter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dlframework.ModelManifest_Type_Parameter{")
	s = append(s, "Parameter: "+fmt.Sprintf("%#v", this.Parameter)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ModelManifest_Model) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dlframework.ModelManifest_Model{")
	s = append(s, "BaseUrl: "+fmt.Sprintf("%#v", this.BaseUrl)+",\n")
	s = append(s, "WeightsPath: "+fmt.Sprintf("%#v", this.WeightsPath)+",\n")
	s = append(s, "GraphPath: "+fmt.Sprintf("%#v", this.GraphPath)+",\n")
	s = append(s, "IsArchive: "+fmt.Sprintf("%#v", this.IsArchive)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetModelManifestsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dlframework.GetModelManifestsResponse{")
	if this.Manifests != nil {
		s = append(s, "Manifests: "+fmt.Sprintf("%#v", this.Manifests)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetFrameworkManifestsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dlframework.GetFrameworkManifestsResponse{")
	if this.Manifests != nil {
		s = append(s, "Manifests: "+fmt.Sprintf("%#v", this.Manifests)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetFrameworkModelManifestRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dlframework.GetFrameworkModelManifestRequest{")
	s = append(s, "FrameworkName: "+fmt.Sprintf("%#v", this.FrameworkName)+",\n")
	s = append(s, "FrameworkVersion: "+fmt.Sprintf("%#v", this.FrameworkVersion)+",\n")
	s = append(s, "ModelName: "+fmt.Sprintf("%#v", this.ModelName)+",\n")
	s = append(s, "ModelVersion: "+fmt.Sprintf("%#v", this.ModelVersion)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetModelManifestRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dlframework.GetModelManifestRequest{")
	s = append(s, "ModelName: "+fmt.Sprintf("%#v", this.ModelName)+",\n")
	s = append(s, "ModelVersion: "+fmt.Sprintf("%#v", this.ModelVersion)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetFrameworkManifestRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dlframework.GetFrameworkManifestRequest{")
	s = append(s, "FrameworkName: "+fmt.Sprintf("%#v", this.FrameworkName)+",\n")
	s = append(s, "FrameworkVersion: "+fmt.Sprintf("%#v", this.FrameworkVersion)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Null) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&dlframework.Null{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PredictRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&dlframework.PredictRequest{")
	s = append(s, "ModelName: "+fmt.Sprintf("%#v", this.ModelName)+",\n")
	s = append(s, "ModelVersion: "+fmt.Sprintf("%#v", this.ModelVersion)+",\n")
	s = append(s, "FrameworkName: "+fmt.Sprintf("%#v", this.FrameworkName)+",\n")
	s = append(s, "FrameworkVersion: "+fmt.Sprintf("%#v", this.FrameworkVersion)+",\n")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	if this.Input != nil {
		s = append(s, "Input: "+fmt.Sprintf("%#v", this.Input)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PredictRequest_Data) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dlframework.PredictRequest_Data{` +
		`Data:` + fmt.Sprintf("%#v", this.Data) + `}`}, ", ")
	return s
}
func (this *PredictRequest_Url) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dlframework.PredictRequest_Url{` +
		`Url:` + fmt.Sprintf("%#v", this.Url) + `}`}, ", ")
	return s
}
func (this *PredictionFeature) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dlframework.PredictionFeature{")
	s = append(s, "Index: "+fmt.Sprintf("%#v", this.Index)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Probability: "+fmt.Sprintf("%#v", this.Probability)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PredictResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dlframework.PredictResponse{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.Features != nil {
		s = append(s, "Features: "+fmt.Sprintf("%#v", this.Features)+",\n")
	}
	if this.Error != nil {
		s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringDlframework(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Carml service

type CarmlClient interface {
	GetFrameworkManifests(ctx context.Context, in *Null, opts ...grpc.CallOption) (*GetFrameworkManifestsResponse, error)
	GetFrameworkManifest(ctx context.Context, in *GetFrameworkManifestRequest, opts ...grpc.CallOption) (*FrameworkManifest, error)
	GetFrameworkModels(ctx context.Context, in *GetFrameworkManifestRequest, opts ...grpc.CallOption) (*GetModelManifestsResponse, error)
	GetModelManifests(ctx context.Context, in *Null, opts ...grpc.CallOption) (*GetModelManifestsResponse, error)
	GetFrameworkModelManifest(ctx context.Context, in *GetFrameworkModelManifestRequest, opts ...grpc.CallOption) (*ModelManifest, error)
	GetModelManifest(ctx context.Context, in *GetModelManifestRequest, opts ...grpc.CallOption) (*ModelManifest, error)
	Predict(ctx context.Context, in *PredictRequest, opts ...grpc.CallOption) (*PredictResponse, error)
}

type carmlClient struct {
	cc *grpc.ClientConn
}

func NewCarmlClient(cc *grpc.ClientConn) CarmlClient {
	return &carmlClient{cc}
}

func (c *carmlClient) GetFrameworkManifests(ctx context.Context, in *Null, opts ...grpc.CallOption) (*GetFrameworkManifestsResponse, error) {
	out := new(GetFrameworkManifestsResponse)
	err := grpc.Invoke(ctx, "/carml.org.dlframework.carml/GetFrameworkManifests", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carmlClient) GetFrameworkManifest(ctx context.Context, in *GetFrameworkManifestRequest, opts ...grpc.CallOption) (*FrameworkManifest, error) {
	out := new(FrameworkManifest)
	err := grpc.Invoke(ctx, "/carml.org.dlframework.carml/GetFrameworkManifest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carmlClient) GetFrameworkModels(ctx context.Context, in *GetFrameworkManifestRequest, opts ...grpc.CallOption) (*GetModelManifestsResponse, error) {
	out := new(GetModelManifestsResponse)
	err := grpc.Invoke(ctx, "/carml.org.dlframework.carml/GetFrameworkModels", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carmlClient) GetModelManifests(ctx context.Context, in *Null, opts ...grpc.CallOption) (*GetModelManifestsResponse, error) {
	out := new(GetModelManifestsResponse)
	err := grpc.Invoke(ctx, "/carml.org.dlframework.carml/GetModelManifests", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carmlClient) GetFrameworkModelManifest(ctx context.Context, in *GetFrameworkModelManifestRequest, opts ...grpc.CallOption) (*ModelManifest, error) {
	out := new(ModelManifest)
	err := grpc.Invoke(ctx, "/carml.org.dlframework.carml/GetFrameworkModelManifest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carmlClient) GetModelManifest(ctx context.Context, in *GetModelManifestRequest, opts ...grpc.CallOption) (*ModelManifest, error) {
	out := new(ModelManifest)
	err := grpc.Invoke(ctx, "/carml.org.dlframework.carml/GetModelManifest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carmlClient) Predict(ctx context.Context, in *PredictRequest, opts ...grpc.CallOption) (*PredictResponse, error) {
	out := new(PredictResponse)
	err := grpc.Invoke(ctx, "/carml.org.dlframework.carml/Predict", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Carml service

type CarmlServer interface {
	GetFrameworkManifests(context.Context, *Null) (*GetFrameworkManifestsResponse, error)
	GetFrameworkManifest(context.Context, *GetFrameworkManifestRequest) (*FrameworkManifest, error)
	GetFrameworkModels(context.Context, *GetFrameworkManifestRequest) (*GetModelManifestsResponse, error)
	GetModelManifests(context.Context, *Null) (*GetModelManifestsResponse, error)
	GetFrameworkModelManifest(context.Context, *GetFrameworkModelManifestRequest) (*ModelManifest, error)
	GetModelManifest(context.Context, *GetModelManifestRequest) (*ModelManifest, error)
	Predict(context.Context, *PredictRequest) (*PredictResponse, error)
}

func RegisterCarmlServer(s *grpc.Server, srv CarmlServer) {
	s.RegisterService(&_Carml_serviceDesc, srv)
}

func _Carml_GetFrameworkManifests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Null)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarmlServer).GetFrameworkManifests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carml.org.dlframework.carml/GetFrameworkManifests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarmlServer).GetFrameworkManifests(ctx, req.(*Null))
	}
	return interceptor(ctx, in, info, handler)
}

func _Carml_GetFrameworkManifest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFrameworkManifestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarmlServer).GetFrameworkManifest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carml.org.dlframework.carml/GetFrameworkManifest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarmlServer).GetFrameworkManifest(ctx, req.(*GetFrameworkManifestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Carml_GetFrameworkModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFrameworkManifestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarmlServer).GetFrameworkModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carml.org.dlframework.carml/GetFrameworkModels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarmlServer).GetFrameworkModels(ctx, req.(*GetFrameworkManifestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Carml_GetModelManifests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Null)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarmlServer).GetModelManifests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carml.org.dlframework.carml/GetModelManifests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarmlServer).GetModelManifests(ctx, req.(*Null))
	}
	return interceptor(ctx, in, info, handler)
}

func _Carml_GetFrameworkModelManifest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFrameworkModelManifestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarmlServer).GetFrameworkModelManifest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carml.org.dlframework.carml/GetFrameworkModelManifest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarmlServer).GetFrameworkModelManifest(ctx, req.(*GetFrameworkModelManifestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Carml_GetModelManifest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelManifestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarmlServer).GetModelManifest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carml.org.dlframework.carml/GetModelManifest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarmlServer).GetModelManifest(ctx, req.(*GetModelManifestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Carml_Predict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PredictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarmlServer).Predict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carml.org.dlframework.carml/Predict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarmlServer).Predict(ctx, req.(*PredictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Carml_serviceDesc = grpc.ServiceDesc{
	ServiceName: "carml.org.dlframework.carml",
	HandlerType: (*CarmlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFrameworkManifests",
			Handler:    _Carml_GetFrameworkManifests_Handler,
		},
		{
			MethodName: "GetFrameworkManifest",
			Handler:    _Carml_GetFrameworkManifest_Handler,
		},
		{
			MethodName: "GetFrameworkModels",
			Handler:    _Carml_GetFrameworkModels_Handler,
		},
		{
			MethodName: "GetModelManifests",
			Handler:    _Carml_GetModelManifests_Handler,
		},
		{
			MethodName: "GetFrameworkModelManifest",
			Handler:    _Carml_GetFrameworkModelManifest_Handler,
		},
		{
			MethodName: "GetModelManifest",
			Handler:    _Carml_GetModelManifest_Handler,
		},
		{
			MethodName: "Predict",
			Handler:    _Carml_Predict_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dlframework.proto",
}

func (m *ErrorStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ErrorStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ok {
		dAtA[i] = 0x8
		i++
		if m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *ContainerHardware) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerHardware) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Gpu) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.Gpu)))
		i += copy(dAtA[i:], m.Gpu)
	}
	if len(m.Cpu) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.Cpu)))
		i += copy(dAtA[i:], m.Cpu)
	}
	return i, nil
}

func (m *FrameworkManifest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FrameworkManifest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Version) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	if len(m.Container) > 0 {
		for k, _ := range m.Container {
			dAtA[i] = 0x1a
			i++
			v := m.Container[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovDlframework(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovDlframework(uint64(len(k))) + msgSize
			i = encodeVarintDlframework(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintDlframework(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintDlframework(dAtA, i, uint64(v.Size()))
				n1, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n1
			}
		}
	}
	return i, nil
}

func (m *ModelManifest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelManifest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Version) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	if m.Framework != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(m.Framework.Size()))
		n2, err := m.Framework.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Container) > 0 {
		for k, _ := range m.Container {
			dAtA[i] = 0x22
			i++
			v := m.Container[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovDlframework(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovDlframework(uint64(len(k))) + msgSize
			i = encodeVarintDlframework(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintDlframework(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintDlframework(dAtA, i, uint64(v.Size()))
				n3, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n3
			}
		}
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.Reference) > 0 {
		for _, s := range m.Reference {
			dAtA[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.License) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.License)))
		i += copy(dAtA[i:], m.License)
	}
	if len(m.Inputs) > 0 {
		for _, msg := range m.Inputs {
			dAtA[i] = 0x42
			i++
			i = encodeVarintDlframework(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Output != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(m.Output.Size()))
		n4, err := m.Output.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.BeforePreprocess) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.BeforePreprocess)))
		i += copy(dAtA[i:], m.BeforePreprocess)
	}
	if len(m.Preprocess) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.Preprocess)))
		i += copy(dAtA[i:], m.Preprocess)
	}
	if len(m.AfterPreprocess) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.AfterPreprocess)))
		i += copy(dAtA[i:], m.AfterPreprocess)
	}
	if len(m.BeforePostprocess) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.BeforePostprocess)))
		i += copy(dAtA[i:], m.BeforePostprocess)
	}
	if len(m.Postprocess) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.Postprocess)))
		i += copy(dAtA[i:], m.Postprocess)
	}
	if len(m.AfterPostprocess) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.AfterPostprocess)))
		i += copy(dAtA[i:], m.AfterPostprocess)
	}
	if m.Model != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(m.Model.Size()))
		n5, err := m.Model.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.Attributes) > 0 {
		for k, _ := range m.Attributes {
			dAtA[i] = 0x8a
			i++
			dAtA[i] = 0x1
			i++
			v := m.Attributes[k]
			mapSize := 1 + len(k) + sovDlframework(uint64(len(k))) + 1 + len(v) + sovDlframework(uint64(len(v)))
			i = encodeVarintDlframework(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintDlframework(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintDlframework(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func (m *ModelManifest_Type) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelManifest_Type) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.Parameters) > 0 {
		for k, _ := range m.Parameters {
			dAtA[i] = 0x1a
			i++
			v := m.Parameters[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovDlframework(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovDlframework(uint64(len(k))) + msgSize
			i = encodeVarintDlframework(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintDlframework(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintDlframework(dAtA, i, uint64(v.Size()))
				n6, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n6
			}
		}
	}
	return i, nil
}

func (m *ModelManifest_Type_Parameter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelManifest_Type_Parameter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Parameter) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.Parameter)))
		i += copy(dAtA[i:], m.Parameter)
	}
	return i, nil
}

func (m *ModelManifest_Model) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelManifest_Model) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BaseUrl) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.BaseUrl)))
		i += copy(dAtA[i:], m.BaseUrl)
	}
	if len(m.WeightsPath) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.WeightsPath)))
		i += copy(dAtA[i:], m.WeightsPath)
	}
	if len(m.GraphPath) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.GraphPath)))
		i += copy(dAtA[i:], m.GraphPath)
	}
	if m.IsArchive {
		dAtA[i] = 0x20
		i++
		if m.IsArchive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GetModelManifestsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetModelManifestsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Manifests) > 0 {
		for _, msg := range m.Manifests {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDlframework(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetFrameworkManifestsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFrameworkManifestsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Manifests) > 0 {
		for _, msg := range m.Manifests {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDlframework(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetFrameworkModelManifestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFrameworkModelManifestRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FrameworkName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.FrameworkName)))
		i += copy(dAtA[i:], m.FrameworkName)
	}
	if len(m.FrameworkVersion) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.FrameworkVersion)))
		i += copy(dAtA[i:], m.FrameworkVersion)
	}
	if len(m.ModelName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.ModelName)))
		i += copy(dAtA[i:], m.ModelName)
	}
	if len(m.ModelVersion) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.ModelVersion)))
		i += copy(dAtA[i:], m.ModelVersion)
	}
	return i, nil
}

func (m *GetModelManifestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetModelManifestRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ModelName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.ModelName)))
		i += copy(dAtA[i:], m.ModelName)
	}
	if len(m.ModelVersion) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.ModelVersion)))
		i += copy(dAtA[i:], m.ModelVersion)
	}
	return i, nil
}

func (m *GetFrameworkManifestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFrameworkManifestRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FrameworkName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.FrameworkName)))
		i += copy(dAtA[i:], m.FrameworkName)
	}
	if len(m.FrameworkVersion) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.FrameworkVersion)))
		i += copy(dAtA[i:], m.FrameworkVersion)
	}
	return i, nil
}

func (m *Null) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Null) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *PredictRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PredictRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ModelName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.ModelName)))
		i += copy(dAtA[i:], m.ModelName)
	}
	if len(m.ModelVersion) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.ModelVersion)))
		i += copy(dAtA[i:], m.ModelVersion)
	}
	if len(m.FrameworkName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.FrameworkName)))
		i += copy(dAtA[i:], m.FrameworkName)
	}
	if len(m.FrameworkVersion) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.FrameworkVersion)))
		i += copy(dAtA[i:], m.FrameworkVersion)
	}
	if m.Limit != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(m.Limit))
	}
	if m.Input != nil {
		nn7, err := m.Input.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn7
	}
	return i, nil
}

func (m *PredictRequest_Data) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Data != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}
func (m *PredictRequest_Url) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x3a
	i++
	i = encodeVarintDlframework(dAtA, i, uint64(len(m.Url)))
	i += copy(dAtA[i:], m.Url)
	return i, nil
}
func (m *PredictionFeature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PredictionFeature) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(m.Index))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Probability != 0 {
		dAtA[i] = 0x1d
		i++
		i = encodeFixed32Dlframework(dAtA, i, uint32(math.Float32bits(float32(m.Probability))))
	}
	return i, nil
}

func (m *PredictResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PredictResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Features) > 0 {
		for _, msg := range m.Features {
			dAtA[i] = 0x12
			i++
			i = encodeVarintDlframework(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDlframework(dAtA, i, uint64(m.Error.Size()))
		n8, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func encodeFixed64Dlframework(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Dlframework(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintDlframework(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedErrorStatus(r randyDlframework, easy bool) *ErrorStatus {
	this := &ErrorStatus{}
	this.Ok = bool(bool(r.Intn(2) == 0))
	this.Message = string(randStringDlframework(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedContainerHardware(r randyDlframework, easy bool) *ContainerHardware {
	this := &ContainerHardware{}
	this.Gpu = string(randStringDlframework(r))
	this.Cpu = string(randStringDlframework(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedFrameworkManifest(r randyDlframework, easy bool) *FrameworkManifest {
	this := &FrameworkManifest{}
	this.Name = string(randStringDlframework(r))
	this.Version = string(randStringDlframework(r))
	if r.Intn(10) != 0 {
		v1 := r.Intn(10)
		this.Container = make(map[string]*ContainerHardware)
		for i := 0; i < v1; i++ {
			this.Container[randStringDlframework(r)] = NewPopulatedContainerHardware(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedModelManifest(r randyDlframework, easy bool) *ModelManifest {
	this := &ModelManifest{}
	this.Name = string(randStringDlframework(r))
	this.Version = string(randStringDlframework(r))
	if r.Intn(10) != 0 {
		this.Framework = NewPopulatedFrameworkManifest(r, easy)
	}
	if r.Intn(10) != 0 {
		v2 := r.Intn(10)
		this.Container = make(map[string]*ContainerHardware)
		for i := 0; i < v2; i++ {
			this.Container[randStringDlframework(r)] = NewPopulatedContainerHardware(r, easy)
		}
	}
	this.Description = string(randStringDlframework(r))
	v3 := r.Intn(10)
	this.Reference = make([]string, v3)
	for i := 0; i < v3; i++ {
		this.Reference[i] = string(randStringDlframework(r))
	}
	this.License = string(randStringDlframework(r))
	if r.Intn(10) != 0 {
		v4 := r.Intn(5)
		this.Inputs = make([]*ModelManifest_Type, v4)
		for i := 0; i < v4; i++ {
			this.Inputs[i] = NewPopulatedModelManifest_Type(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		this.Output = NewPopulatedModelManifest_Type(r, easy)
	}
	this.BeforePreprocess = string(randStringDlframework(r))
	this.Preprocess = string(randStringDlframework(r))
	this.AfterPreprocess = string(randStringDlframework(r))
	this.BeforePostprocess = string(randStringDlframework(r))
	this.Postprocess = string(randStringDlframework(r))
	this.AfterPostprocess = string(randStringDlframework(r))
	if r.Intn(10) != 0 {
		this.Model = NewPopulatedModelManifest_Model(r, easy)
	}
	if r.Intn(10) != 0 {
		v5 := r.Intn(10)
		this.Attributes = make(map[string]string)
		for i := 0; i < v5; i++ {
			this.Attributes[randStringDlframework(r)] = randStringDlframework(r)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedModelManifest_Type(r randyDlframework, easy bool) *ModelManifest_Type {
	this := &ModelManifest_Type{}
	this.Type = string(randStringDlframework(r))
	this.Description = string(randStringDlframework(r))
	if r.Intn(10) != 0 {
		v6 := r.Intn(10)
		this.Parameters = make(map[string]*ModelManifest_Type_Parameter)
		for i := 0; i < v6; i++ {
			this.Parameters[randStringDlframework(r)] = NewPopulatedModelManifest_Type_Parameter(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedModelManifest_Type_Parameter(r randyDlframework, easy bool) *ModelManifest_Type_Parameter {
	this := &ModelManifest_Type_Parameter{}
	this.Parameter = string(randStringDlframework(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedModelManifest_Model(r randyDlframework, easy bool) *ModelManifest_Model {
	this := &ModelManifest_Model{}
	this.BaseUrl = string(randStringDlframework(r))
	this.WeightsPath = string(randStringDlframework(r))
	this.GraphPath = string(randStringDlframework(r))
	this.IsArchive = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetModelManifestsResponse(r randyDlframework, easy bool) *GetModelManifestsResponse {
	this := &GetModelManifestsResponse{}
	if r.Intn(10) != 0 {
		v7 := r.Intn(5)
		this.Manifests = make([]*ModelManifest, v7)
		for i := 0; i < v7; i++ {
			this.Manifests[i] = NewPopulatedModelManifest(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetFrameworkManifestsResponse(r randyDlframework, easy bool) *GetFrameworkManifestsResponse {
	this := &GetFrameworkManifestsResponse{}
	if r.Intn(10) != 0 {
		v8 := r.Intn(5)
		this.Manifests = make([]*FrameworkManifest, v8)
		for i := 0; i < v8; i++ {
			this.Manifests[i] = NewPopulatedFrameworkManifest(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetFrameworkModelManifestRequest(r randyDlframework, easy bool) *GetFrameworkModelManifestRequest {
	this := &GetFrameworkModelManifestRequest{}
	this.FrameworkName = string(randStringDlframework(r))
	this.FrameworkVersion = string(randStringDlframework(r))
	this.ModelName = string(randStringDlframework(r))
	this.ModelVersion = string(randStringDlframework(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetModelManifestRequest(r randyDlframework, easy bool) *GetModelManifestRequest {
	this := &GetModelManifestRequest{}
	this.ModelName = string(randStringDlframework(r))
	this.ModelVersion = string(randStringDlframework(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetFrameworkManifestRequest(r randyDlframework, easy bool) *GetFrameworkManifestRequest {
	this := &GetFrameworkManifestRequest{}
	this.FrameworkName = string(randStringDlframework(r))
	this.FrameworkVersion = string(randStringDlframework(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedNull(r randyDlframework, easy bool) *Null {
	this := &Null{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPredictRequest(r randyDlframework, easy bool) *PredictRequest {
	this := &PredictRequest{}
	this.ModelName = string(randStringDlframework(r))
	this.ModelVersion = string(randStringDlframework(r))
	this.FrameworkName = string(randStringDlframework(r))
	this.FrameworkVersion = string(randStringDlframework(r))
	this.Limit = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Limit *= -1
	}
	oneofNumber_Input := []int32{6, 7}[r.Intn(2)]
	switch oneofNumber_Input {
	case 6:
		this.Input = NewPopulatedPredictRequest_Data(r, easy)
	case 7:
		this.Input = NewPopulatedPredictRequest_Url(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPredictRequest_Data(r randyDlframework, easy bool) *PredictRequest_Data {
	this := &PredictRequest_Data{}
	v9 := r.Intn(100)
	this.Data = make([]byte, v9)
	for i := 0; i < v9; i++ {
		this.Data[i] = byte(r.Intn(256))
	}
	return this
}
func NewPopulatedPredictRequest_Url(r randyDlframework, easy bool) *PredictRequest_Url {
	this := &PredictRequest_Url{}
	this.Url = string(randStringDlframework(r))
	return this
}
func NewPopulatedPredictionFeature(r randyDlframework, easy bool) *PredictionFeature {
	this := &PredictionFeature{}
	this.Index = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Index *= -1
	}
	this.Name = string(randStringDlframework(r))
	this.Probability = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.Probability *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPredictResponse(r randyDlframework, easy bool) *PredictResponse {
	this := &PredictResponse{}
	this.Id = string(randStringDlframework(r))
	if r.Intn(10) != 0 {
		v10 := r.Intn(5)
		this.Features = make([]*PredictionFeature, v10)
		for i := 0; i < v10; i++ {
			this.Features[i] = NewPopulatedPredictionFeature(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		this.Error = NewPopulatedErrorStatus(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyDlframework interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneDlframework(r randyDlframework) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringDlframework(r randyDlframework) string {
	v11 := r.Intn(100)
	tmps := make([]rune, v11)
	for i := 0; i < v11; i++ {
		tmps[i] = randUTF8RuneDlframework(r)
	}
	return string(tmps)
}
func randUnrecognizedDlframework(r randyDlframework, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldDlframework(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldDlframework(dAtA []byte, r randyDlframework, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateDlframework(dAtA, uint64(key))
		v12 := r.Int63()
		if r.Intn(2) == 0 {
			v12 *= -1
		}
		dAtA = encodeVarintPopulateDlframework(dAtA, uint64(v12))
	case 1:
		dAtA = encodeVarintPopulateDlframework(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateDlframework(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateDlframework(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateDlframework(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateDlframework(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *ErrorStatus) Size() (n int) {
	var l int
	_ = l
	if m.Ok {
		n += 2
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	return n
}

func (m *ContainerHardware) Size() (n int) {
	var l int
	_ = l
	l = len(m.Gpu)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	l = len(m.Cpu)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	return n
}

func (m *FrameworkManifest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	if len(m.Container) > 0 {
		for k, v := range m.Container {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovDlframework(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovDlframework(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovDlframework(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ModelManifest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	if m.Framework != nil {
		l = m.Framework.Size()
		n += 1 + l + sovDlframework(uint64(l))
	}
	if len(m.Container) > 0 {
		for k, v := range m.Container {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovDlframework(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovDlframework(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovDlframework(uint64(mapEntrySize))
		}
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	if len(m.Reference) > 0 {
		for _, s := range m.Reference {
			l = len(s)
			n += 1 + l + sovDlframework(uint64(l))
		}
	}
	l = len(m.License)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	if len(m.Inputs) > 0 {
		for _, e := range m.Inputs {
			l = e.Size()
			n += 1 + l + sovDlframework(uint64(l))
		}
	}
	if m.Output != nil {
		l = m.Output.Size()
		n += 1 + l + sovDlframework(uint64(l))
	}
	l = len(m.BeforePreprocess)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	l = len(m.Preprocess)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	l = len(m.AfterPreprocess)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	l = len(m.BeforePostprocess)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	l = len(m.Postprocess)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	l = len(m.AfterPostprocess)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	if m.Model != nil {
		l = m.Model.Size()
		n += 2 + l + sovDlframework(uint64(l))
	}
	if len(m.Attributes) > 0 {
		for k, v := range m.Attributes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovDlframework(uint64(len(k))) + 1 + len(v) + sovDlframework(uint64(len(v)))
			n += mapEntrySize + 2 + sovDlframework(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ModelManifest_Type) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	if len(m.Parameters) > 0 {
		for k, v := range m.Parameters {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovDlframework(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovDlframework(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovDlframework(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ModelManifest_Type_Parameter) Size() (n int) {
	var l int
	_ = l
	l = len(m.Parameter)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	return n
}

func (m *ModelManifest_Model) Size() (n int) {
	var l int
	_ = l
	l = len(m.BaseUrl)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	l = len(m.WeightsPath)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	l = len(m.GraphPath)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	if m.IsArchive {
		n += 2
	}
	return n
}

func (m *GetModelManifestsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Manifests) > 0 {
		for _, e := range m.Manifests {
			l = e.Size()
			n += 1 + l + sovDlframework(uint64(l))
		}
	}
	return n
}

func (m *GetFrameworkManifestsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Manifests) > 0 {
		for _, e := range m.Manifests {
			l = e.Size()
			n += 1 + l + sovDlframework(uint64(l))
		}
	}
	return n
}

func (m *GetFrameworkModelManifestRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.FrameworkName)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	l = len(m.FrameworkVersion)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	l = len(m.ModelName)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	l = len(m.ModelVersion)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	return n
}

func (m *GetModelManifestRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ModelName)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	l = len(m.ModelVersion)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	return n
}

func (m *GetFrameworkManifestRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.FrameworkName)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	l = len(m.FrameworkVersion)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	return n
}

func (m *Null) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *PredictRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ModelName)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	l = len(m.ModelVersion)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	l = len(m.FrameworkName)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	l = len(m.FrameworkVersion)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovDlframework(uint64(m.Limit))
	}
	if m.Input != nil {
		n += m.Input.Size()
	}
	return n
}

func (m *PredictRequest_Data) Size() (n int) {
	var l int
	_ = l
	if m.Data != nil {
		l = len(m.Data)
		n += 1 + l + sovDlframework(uint64(l))
	}
	return n
}
func (m *PredictRequest_Url) Size() (n int) {
	var l int
	_ = l
	l = len(m.Url)
	n += 1 + l + sovDlframework(uint64(l))
	return n
}
func (m *PredictionFeature) Size() (n int) {
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovDlframework(uint64(m.Index))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	if m.Probability != 0 {
		n += 5
	}
	return n
}

func (m *PredictResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovDlframework(uint64(l))
	}
	if len(m.Features) > 0 {
		for _, e := range m.Features {
			l = e.Size()
			n += 1 + l + sovDlframework(uint64(l))
		}
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovDlframework(uint64(l))
	}
	return n
}

func sovDlframework(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDlframework(x uint64) (n int) {
	return sovDlframework(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ErrorStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ErrorStatus{`,
		`Ok:` + fmt.Sprintf("%v", this.Ok) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ContainerHardware) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ContainerHardware{`,
		`Gpu:` + fmt.Sprintf("%v", this.Gpu) + `,`,
		`Cpu:` + fmt.Sprintf("%v", this.Cpu) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FrameworkManifest) String() string {
	if this == nil {
		return "nil"
	}
	keysForContainer := make([]string, 0, len(this.Container))
	for k, _ := range this.Container {
		keysForContainer = append(keysForContainer, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForContainer)
	mapStringForContainer := "map[string]*ContainerHardware{"
	for _, k := range keysForContainer {
		mapStringForContainer += fmt.Sprintf("%v: %v,", k, this.Container[k])
	}
	mapStringForContainer += "}"
	s := strings.Join([]string{`&FrameworkManifest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`Container:` + mapStringForContainer + `,`,
		`}`,
	}, "")
	return s
}
func (this *ModelManifest) String() string {
	if this == nil {
		return "nil"
	}
	keysForContainer := make([]string, 0, len(this.Container))
	for k, _ := range this.Container {
		keysForContainer = append(keysForContainer, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForContainer)
	mapStringForContainer := "map[string]*ContainerHardware{"
	for _, k := range keysForContainer {
		mapStringForContainer += fmt.Sprintf("%v: %v,", k, this.Container[k])
	}
	mapStringForContainer += "}"
	keysForAttributes := make([]string, 0, len(this.Attributes))
	for k, _ := range this.Attributes {
		keysForAttributes = append(keysForAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAttributes)
	mapStringForAttributes := "map[string]string{"
	for _, k := range keysForAttributes {
		mapStringForAttributes += fmt.Sprintf("%v: %v,", k, this.Attributes[k])
	}
	mapStringForAttributes += "}"
	s := strings.Join([]string{`&ModelManifest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`Framework:` + strings.Replace(fmt.Sprintf("%v", this.Framework), "FrameworkManifest", "FrameworkManifest", 1) + `,`,
		`Container:` + mapStringForContainer + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Reference:` + fmt.Sprintf("%v", this.Reference) + `,`,
		`License:` + fmt.Sprintf("%v", this.License) + `,`,
		`Inputs:` + strings.Replace(fmt.Sprintf("%v", this.Inputs), "ModelManifest_Type", "ModelManifest_Type", 1) + `,`,
		`Output:` + strings.Replace(fmt.Sprintf("%v", this.Output), "ModelManifest_Type", "ModelManifest_Type", 1) + `,`,
		`BeforePreprocess:` + fmt.Sprintf("%v", this.BeforePreprocess) + `,`,
		`Preprocess:` + fmt.Sprintf("%v", this.Preprocess) + `,`,
		`AfterPreprocess:` + fmt.Sprintf("%v", this.AfterPreprocess) + `,`,
		`BeforePostprocess:` + fmt.Sprintf("%v", this.BeforePostprocess) + `,`,
		`Postprocess:` + fmt.Sprintf("%v", this.Postprocess) + `,`,
		`AfterPostprocess:` + fmt.Sprintf("%v", this.AfterPostprocess) + `,`,
		`Model:` + strings.Replace(fmt.Sprintf("%v", this.Model), "ModelManifest_Model", "ModelManifest_Model", 1) + `,`,
		`Attributes:` + mapStringForAttributes + `,`,
		`}`,
	}, "")
	return s
}
func (this *ModelManifest_Type) String() string {
	if this == nil {
		return "nil"
	}
	keysForParameters := make([]string, 0, len(this.Parameters))
	for k, _ := range this.Parameters {
		keysForParameters = append(keysForParameters, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForParameters)
	mapStringForParameters := "map[string]*ModelManifest_Type_Parameter{"
	for _, k := range keysForParameters {
		mapStringForParameters += fmt.Sprintf("%v: %v,", k, this.Parameters[k])
	}
	mapStringForParameters += "}"
	s := strings.Join([]string{`&ModelManifest_Type{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Parameters:` + mapStringForParameters + `,`,
		`}`,
	}, "")
	return s
}
func (this *ModelManifest_Type_Parameter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ModelManifest_Type_Parameter{`,
		`Parameter:` + fmt.Sprintf("%v", this.Parameter) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ModelManifest_Model) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ModelManifest_Model{`,
		`BaseUrl:` + fmt.Sprintf("%v", this.BaseUrl) + `,`,
		`WeightsPath:` + fmt.Sprintf("%v", this.WeightsPath) + `,`,
		`GraphPath:` + fmt.Sprintf("%v", this.GraphPath) + `,`,
		`IsArchive:` + fmt.Sprintf("%v", this.IsArchive) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetModelManifestsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetModelManifestsResponse{`,
		`Manifests:` + strings.Replace(fmt.Sprintf("%v", this.Manifests), "ModelManifest", "ModelManifest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetFrameworkManifestsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetFrameworkManifestsResponse{`,
		`Manifests:` + strings.Replace(fmt.Sprintf("%v", this.Manifests), "FrameworkManifest", "FrameworkManifest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetFrameworkModelManifestRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetFrameworkModelManifestRequest{`,
		`FrameworkName:` + fmt.Sprintf("%v", this.FrameworkName) + `,`,
		`FrameworkVersion:` + fmt.Sprintf("%v", this.FrameworkVersion) + `,`,
		`ModelName:` + fmt.Sprintf("%v", this.ModelName) + `,`,
		`ModelVersion:` + fmt.Sprintf("%v", this.ModelVersion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetModelManifestRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetModelManifestRequest{`,
		`ModelName:` + fmt.Sprintf("%v", this.ModelName) + `,`,
		`ModelVersion:` + fmt.Sprintf("%v", this.ModelVersion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetFrameworkManifestRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetFrameworkManifestRequest{`,
		`FrameworkName:` + fmt.Sprintf("%v", this.FrameworkName) + `,`,
		`FrameworkVersion:` + fmt.Sprintf("%v", this.FrameworkVersion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Null) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Null{`,
		`}`,
	}, "")
	return s
}
func (this *PredictRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PredictRequest{`,
		`ModelName:` + fmt.Sprintf("%v", this.ModelName) + `,`,
		`ModelVersion:` + fmt.Sprintf("%v", this.ModelVersion) + `,`,
		`FrameworkName:` + fmt.Sprintf("%v", this.FrameworkName) + `,`,
		`FrameworkVersion:` + fmt.Sprintf("%v", this.FrameworkVersion) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Input:` + fmt.Sprintf("%v", this.Input) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PredictRequest_Data) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PredictRequest_Data{`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PredictRequest_Url) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PredictRequest_Url{`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PredictionFeature) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PredictionFeature{`,
		`Index:` + fmt.Sprintf("%v", this.Index) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Probability:` + fmt.Sprintf("%v", this.Probability) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PredictResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PredictResponse{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Features:` + strings.Replace(fmt.Sprintf("%v", this.Features), "PredictionFeature", "PredictionFeature", 1) + `,`,
		`Error:` + strings.Replace(fmt.Sprintf("%v", this.Error), "ErrorStatus", "ErrorStatus", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringDlframework(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ErrorStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDlframework
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ErrorStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ErrorStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDlframework(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDlframework
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerHardware) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDlframework
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerHardware: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerHardware: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gpu", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gpu = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cpu", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cpu = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDlframework(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDlframework
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FrameworkManifest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDlframework
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FrameworkManifest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FrameworkManifest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Container", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthDlframework
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Container == nil {
				m.Container = make(map[string]*ContainerHardware)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDlframework
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapmsglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDlframework
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					mapmsglen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if mapmsglen < 0 {
					return ErrInvalidLengthDlframework
				}
				postmsgIndex := iNdEx + mapmsglen
				if mapmsglen < 0 {
					return ErrInvalidLengthDlframework
				}
				if postmsgIndex > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := &ContainerHardware{}
				if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
					return err
				}
				iNdEx = postmsgIndex
				m.Container[mapkey] = mapvalue
			} else {
				var mapvalue *ContainerHardware
				m.Container[mapkey] = mapvalue
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDlframework(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDlframework
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelManifest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDlframework
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelManifest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelManifest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Framework", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Framework == nil {
				m.Framework = &FrameworkManifest{}
			}
			if err := m.Framework.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Container", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthDlframework
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Container == nil {
				m.Container = make(map[string]*ContainerHardware)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDlframework
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapmsglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDlframework
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					mapmsglen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if mapmsglen < 0 {
					return ErrInvalidLengthDlframework
				}
				postmsgIndex := iNdEx + mapmsglen
				if mapmsglen < 0 {
					return ErrInvalidLengthDlframework
				}
				if postmsgIndex > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := &ContainerHardware{}
				if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
					return err
				}
				iNdEx = postmsgIndex
				m.Container[mapkey] = mapvalue
			} else {
				var mapvalue *ContainerHardware
				m.Container[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reference", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reference = append(m.Reference, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field License", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.License = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inputs = append(m.Inputs, &ModelManifest_Type{})
			if err := m.Inputs[len(m.Inputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Output == nil {
				m.Output = &ModelManifest_Type{}
			}
			if err := m.Output.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeforePreprocess", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BeforePreprocess = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Preprocess", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Preprocess = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AfterPreprocess", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AfterPreprocess = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeforePostprocess", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BeforePostprocess = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Postprocess", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Postprocess = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AfterPostprocess", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AfterPostprocess = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Model == nil {
				m.Model = &ModelManifest_Model{}
			}
			if err := m.Model.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthDlframework
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Attributes == nil {
				m.Attributes = make(map[string]string)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDlframework
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var stringLenmapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDlframework
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLenmapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLenmapvalue := int(stringLenmapvalue)
				if intStringLenmapvalue < 0 {
					return ErrInvalidLengthDlframework
				}
				postStringIndexmapvalue := iNdEx + intStringLenmapvalue
				if postStringIndexmapvalue > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := string(dAtA[iNdEx:postStringIndexmapvalue])
				iNdEx = postStringIndexmapvalue
				m.Attributes[mapkey] = mapvalue
			} else {
				var mapvalue string
				m.Attributes[mapkey] = mapvalue
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDlframework(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDlframework
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelManifest_Type) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDlframework
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthDlframework
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Parameters == nil {
				m.Parameters = make(map[string]*ModelManifest_Type_Parameter)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDlframework
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapmsglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDlframework
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					mapmsglen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if mapmsglen < 0 {
					return ErrInvalidLengthDlframework
				}
				postmsgIndex := iNdEx + mapmsglen
				if mapmsglen < 0 {
					return ErrInvalidLengthDlframework
				}
				if postmsgIndex > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := &ModelManifest_Type_Parameter{}
				if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
					return err
				}
				iNdEx = postmsgIndex
				m.Parameters[mapkey] = mapvalue
			} else {
				var mapvalue *ModelManifest_Type_Parameter
				m.Parameters[mapkey] = mapvalue
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDlframework(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDlframework
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelManifest_Type_Parameter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDlframework
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Parameter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Parameter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parameter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDlframework(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDlframework
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelManifest_Model) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDlframework
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Model: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Model: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeightsPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WeightsPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GraphPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GraphPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsArchive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsArchive = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDlframework(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDlframework
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetModelManifestsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDlframework
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetModelManifestsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetModelManifestsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Manifests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Manifests = append(m.Manifests, &ModelManifest{})
			if err := m.Manifests[len(m.Manifests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDlframework(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDlframework
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFrameworkManifestsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDlframework
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFrameworkManifestsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFrameworkManifestsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Manifests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Manifests = append(m.Manifests, &FrameworkManifest{})
			if err := m.Manifests[len(m.Manifests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDlframework(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDlframework
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFrameworkModelManifestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDlframework
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFrameworkModelManifestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFrameworkModelManifestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrameworkName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FrameworkName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrameworkVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FrameworkVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDlframework(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDlframework
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetModelManifestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDlframework
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetModelManifestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetModelManifestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDlframework(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDlframework
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFrameworkManifestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDlframework
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFrameworkManifestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFrameworkManifestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrameworkName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FrameworkName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrameworkVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FrameworkVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDlframework(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDlframework
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Null) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDlframework
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Null: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Null: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDlframework(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDlframework
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PredictRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDlframework
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PredictRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PredictRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrameworkName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FrameworkName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrameworkVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FrameworkVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Input = &PredictRequest_Data{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Input = &PredictRequest_Url{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDlframework(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDlframework
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PredictionFeature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDlframework
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PredictionFeature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PredictionFeature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Probability", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Probability = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipDlframework(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDlframework
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PredictResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDlframework
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PredictResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PredictResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Features", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Features = append(m.Features, &PredictionFeature{})
			if err := m.Features[len(m.Features)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDlframework
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &ErrorStatus{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDlframework(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDlframework
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDlframework(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDlframework
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDlframework
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDlframework
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDlframework
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDlframework(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDlframework = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDlframework   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("dlframework.proto", fileDescriptorDlframework) }

var fileDescriptorDlframework = []byte{
	// 1698 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x58, 0xcb, 0x8f, 0x13, 0x47,
	0x1a, 0x9f, 0xf6, 0x63, 0x66, 0xfc, 0xcd, 0xd3, 0xb5, 0x3c, 0x1a, 0x0f, 0xb8, 0x87, 0x66, 0x81,
	0xd9, 0x59, 0xb0, 0xd9, 0x61, 0xc5, 0x63, 0x10, 0x20, 0xbc, 0xcb, 0x63, 0x57, 0x02, 0x8d, 0x0c,
	0x8b, 0x56, 0x68, 0xb5, 0xa3, 0xb6, 0x5d, 0xf6, 0xb4, 0xc6, 0xee, 0x6e, 0xaa, 0xbb, 0x67, 0x32,
	0x41, 0x28, 0x11, 0x17, 0xae, 0x91, 0xf2, 0x0f, 0x44, 0x39, 0x44, 0x39, 0x47, 0x8a, 0xc4, 0x25,
	0x51, 0x8e, 0x39, 0xe4, 0x10, 0x29, 0x1c, 0x92, 0x4b, 0x8b, 0x99, 0xe4, 0x0f, 0x88, 0x5a, 0x8a,
	0x94, 0x63, 0x54, 0xd5, 0xe5, 0x76, 0x95, 0xed, 0x19, 0x8c, 0x41, 0x28, 0xb9, 0xd9, 0xdf, 0xe3,
	0xf7, 0xfd, 0xbe, 0x47, 0x55, 0x7d, 0x36, 0x64, 0x6b, 0xcd, 0x3a, 0x31, 0x5a, 0x78, 0xd3, 0x26,
	0xeb, 0x05, 0x87, 0xd8, 0x9e, 0x8d, 0xf6, 0x57, 0x0d, 0xd2, 0x6a, 0x16, 0x6c, 0xd2, 0x28, 0x08,
	0xca, 0xdc, 0xe1, 0x86, 0x6d, 0x37, 0x9a, 0xb8, 0x68, 0x38, 0x66, 0xd1, 0xb0, 0x2c, 0xdb, 0x33,
	0x3c, 0xd3, 0xb6, 0xdc, 0xc8, 0x29, 0x77, 0xba, 0x61, 0x7a, 0x6b, 0x7e, 0xa5, 0x50, 0xb5, 0x5b,
	0xc5, 0x86, 0xdd, 0xb0, 0x8b, 0x4c, 0x5c, 0xf1, 0xeb, 0xec, 0x1b, 0xfb, 0xc2, 0x3e, 0x45, 0xe6,
	0xba, 0x05, 0x13, 0xd7, 0x09, 0xb1, 0xc9, 0x5d, 0xcf, 0xf0, 0x7c, 0x17, 0x9d, 0x84, 0x84, 0xbd,
	0xae, 0x2a, 0xf3, 0xca, 0xc2, 0x78, 0xe9, 0x60, 0x18, 0x68, 0x7f, 0xda, 0x32, 0x5a, 0xcd, 0x65,
	0xdd, 0x5e, 0x3f, 0x65, 0xb7, 0x4c, 0x0f, 0xb7, 0x1c, 0x6f, 0x4b, 0x2f, 0x27, 0xec, 0x75, 0x74,
	0x0e, 0xc6, 0x5a, 0xd8, 0x75, 0x8d, 0x06, 0x56, 0x13, 0xf3, 0xca, 0x42, 0xa6, 0x74, 0x38, 0x0c,
	0x34, 0x35, 0xb2, 0xe6, 0x0a, 0xd1, 0xa5, 0x6d, 0xac, 0xaf, 0x43, 0xf6, 0x1f, 0xb6, 0xe5, 0x19,
	0xa6, 0x85, 0xc9, 0x2d, 0x83, 0xd4, 0x36, 0x0d, 0x82, 0xd1, 0x22, 0x24, 0x1b, 0x8e, 0xcf, 0xc2,
	0x66, 0x4a, 0x6a, 0x18, 0x68, 0xfb, 0x22, 0xa0, 0x86, 0xe3, 0x8b, 0x20, 0xd4, 0x88, 0xda, 0x56,
	0x1d, 0x9f, 0x07, 0x15, 0x6c, 0xab, 0x5d, 0xb6, 0x55, 0xc7, 0xd7, 0x7f, 0x48, 0x40, 0xf6, 0x46,
	0xbb, 0x6e, 0xb7, 0x0d, 0xcb, 0xac, 0x63, 0xd7, 0x43, 0xa7, 0x21, 0x65, 0x19, 0x2d, 0xcc, 0xc3,
	0x1d, 0x0a, 0x03, 0x6d, 0x7f, 0x04, 0x41, 0xa5, 0x22, 0x06, 0x33, 0xa3, 0x99, 0x6e, 0x60, 0xe2,
	0x9a, 0xb6, 0xd5, 0x9b, 0x29, 0x57, 0x48, 0x99, 0x72, 0x19, 0xf2, 0x21, 0x53, 0x6d, 0x67, 0xaa,
	0x26, 0xe7, 0x93, 0x0b, 0x13, 0x4b, 0xe7, 0x0b, 0x7d, 0x3b, 0x5a, 0xe8, 0xe1, 0x58, 0x88, 0x6b,
	0x74, 0xdd, 0xf2, 0xc8, 0x56, 0x29, 0x1f, 0x06, 0x5a, 0x8e, 0xe7, 0xd9, 0xd6, 0x88, 0x41, 0x3b,
	0x91, 0x72, 0x75, 0x98, 0x96, 0x9d, 0xd1, 0x2c, 0x24, 0xd7, 0xf1, 0x56, 0x94, 0x6e, 0x99, 0x7e,
	0x44, 0x57, 0x20, 0xbd, 0x61, 0x34, 0xfd, 0xa8, 0x75, 0x13, 0x4b, 0x0b, 0xbb, 0xd0, 0xea, 0x69,
	0x54, 0x39, 0x72, 0x5b, 0x4e, 0x5c, 0x50, 0xf4, 0xe7, 0x59, 0x98, 0xba, 0x6d, 0xd7, 0x70, 0xf3,
	0x6d, 0xd7, 0xb5, 0x0e, 0x99, 0x98, 0xa2, 0x9a, 0xdc, 0x33, 0x81, 0x9e, 0xba, 0x8a, 0x85, 0x8c,
	0xcd, 0xa4, 0x42, 0xc6, 0x52, 0xf4, 0x50, 0xec, 0x5f, 0x8a, 0xf5, 0xef, 0xec, 0x2e, 0x71, 0xa4,
	0x3a, 0x0c, 0xdf, 0x3b, 0x54, 0x82, 0x89, 0x1a, 0x76, 0xab, 0xc4, 0x74, 0xe8, 0x89, 0x56, 0xd3,
	0xac, 0x2c, 0xf3, 0x61, 0xa0, 0x1d, 0x8e, 0xfc, 0x05, 0xa5, 0x88, 0x20, 0x3a, 0xa1, 0xcb, 0x90,
	0x21, 0xb8, 0x8e, 0x09, 0xb6, 0xaa, 0x58, 0x1d, 0x9d, 0x4f, 0x2e, 0x64, 0x4a, 0x5a, 0x18, 0x68,
	0x73, 0x11, 0x42, 0xac, 0x72, 0x25, 0x0a, 0xb1, 0x98, 0x76, 0xa5, 0x69, 0x56, 0xb1, 0xe5, 0x62,
	0x75, 0xac, 0xbb, 0x2b, 0x5c, 0x21, 0x75, 0x85, 0xcb, 0xd0, 0xff, 0x61, 0xd4, 0xb4, 0x1c, 0xdf,
	0x73, 0xd5, 0x71, 0x56, 0xaa, 0xbf, 0x0c, 0x54, 0xaa, 0x7b, 0x5b, 0x0e, 0x2e, 0xcd, 0x85, 0x81,
	0x76, 0x30, 0x8a, 0x10, 0x41, 0x88, 0x01, 0x38, 0x2a, 0xc5, 0xb7, 0x7d, 0xcf, 0xf1, 0x3d, 0x35,
	0xc3, 0x5a, 0xfe, 0xc6, 0xf0, 0x23, 0x54, 0x74, 0x17, 0xb2, 0x15, 0x5c, 0xb7, 0x09, 0x5e, 0x75,
	0x08, 0x76, 0x88, 0x5d, 0xc5, 0xae, 0xab, 0x02, 0xab, 0xc0, 0x89, 0x30, 0xd0, 0xf4, 0xc8, 0xbf,
	0xc7, 0x44, 0x84, 0x9a, 0x8d, 0xb4, 0x2b, 0xb1, 0x12, 0x5d, 0x05, 0x10, 0xd0, 0x26, 0x18, 0x9a,
	0xd0, 0x8c, 0xfe, 0x30, 0x82, 0x0b, 0x5a, 0x81, 0x59, 0xa3, 0xee, 0x61, 0x22, 0x92, 0x9a, 0x64,
	0x30, 0xc7, 0xc3, 0x40, 0x3b, 0x1a, 0xc1, 0x74, 0x5b, 0x88, 0x60, 0x33, 0x4c, 0x29, 0x50, 0xba,
	0x0f, 0xa8, 0x9d, 0x84, 0xed, 0x7a, 0x6d, 0xcc, 0x29, 0x86, 0x79, 0x32, 0x0c, 0xb4, 0x63, 0x72,
	0xa2, 0x1d, 0x1b, 0x11, 0x95, 0x97, 0x6a, 0xa5, 0xa3, 0xa5, 0xa3, 0x2b, 0x02, 0x4e, 0x77, 0x8f,
	0xee, 0x2e, 0x48, 0xa2, 0x13, 0xed, 0x01, 0xcf, 0x45, 0x40, 0x9a, 0xe9, 0xee, 0x41, 0x8f, 0x89,
	0xd4, 0x83, 0x28, 0x5f, 0x01, 0xf4, 0x7f, 0x90, 0x6e, 0xd1, 0x99, 0x50, 0x67, 0xd9, 0xdc, 0x2c,
	0x0e, 0x34, 0x37, 0xec, 0x5b, 0x29, 0x17, 0x06, 0xda, 0x01, 0xfe, 0xa4, 0x51, 0x81, 0x18, 0x28,
	0x02, 0x45, 0x3e, 0x80, 0xe1, 0x79, 0xc4, 0xac, 0xf8, 0x1e, 0x76, 0xd5, 0x2c, 0x1b, 0xfd, 0xbf,
	0x0f, 0x14, 0xe2, 0x5a, 0xec, 0x16, 0x5d, 0x13, 0xc2, 0x5c, 0x74, 0x10, 0xa5, 0xb9, 0xe8, 0x88,
	0x73, 0x9f, 0x24, 0x21, 0x45, 0x67, 0x9b, 0xde, 0xb9, 0xde, 0x96, 0xd3, 0xe7, 0xce, 0xa5, 0x52,
	0xe9, 0xce, 0xa5, 0x82, 0xee, 0x0b, 0x26, 0x31, 0xcc, 0x05, 0xf3, 0x2e, 0x80, 0x63, 0xd0, 0xa4,
	0x3c, 0x4c, 0x5c, 0xfe, 0xb0, 0x5d, 0x1c, 0xf8, 0x34, 0x16, 0x56, 0x62, 0xdf, 0x9e, 0xbc, 0x3b,
	0xb0, 0xf2, 0x79, 0x88, 0xc5, 0xb9, 0x4b, 0x90, 0x89, 0xfd, 0x51, 0x01, 0x32, 0xb1, 0x8a, 0x17,
	0x60, 0x36, 0x0c, 0xb4, 0xc9, 0x08, 0xec, 0x54, 0xbd, 0x69, 0x6f, 0xea, 0xe5, 0x8e, 0x49, 0x8e,
	0xc0, 0x4c, 0x57, 0xf0, 0x3e, 0x4f, 0xe3, 0xbf, 0xe4, 0xa7, 0xf1, 0xec, 0x10, 0x89, 0x09, 0xaf,
	0x64, 0xee, 0x69, 0x02, 0xd2, 0xcc, 0x16, 0x5d, 0x80, 0xf1, 0x8a, 0xe1, 0xe2, 0x55, 0x9f, 0x34,
	0x39, 0xd9, 0x23, 0x61, 0xa0, 0x1d, 0xe2, 0xc7, 0x8d, 0x6b, 0xa4, 0xab, 0x95, 0x0a, 0xff, 0x43,
	0x9a, 0xe8, 0x9f, 0x30, 0xb9, 0x89, 0xcd, 0xc6, 0x9a, 0xe7, 0xae, 0x3a, 0x86, 0xb7, 0xc6, 0xbb,
	0x76, 0x34, 0x0c, 0xb4, 0x23, 0x91, 0xb7, 0xa8, 0x95, 0xda, 0xc6, 0x15, 0x2b, 0x86, 0xb7, 0x86,
	0xae, 0x00, 0x34, 0x88, 0xe1, 0xac, 0x45, 0x18, 0xc9, 0xee, 0xbb, 0xa8, 0xa3, 0x93, 0x1e, 0x06,
	0x26, 0x6e, 0xfb, 0x9b, 0xee, 0xaa, 0x41, 0xaa, 0x6b, 0xe6, 0x06, 0x56, 0x53, 0x6c, 0x43, 0x14,
	0xfc, 0x3b, 0x3a, 0xc9, 0xdf, 0x74, 0xaf, 0x45, 0xd2, 0xb7, 0xb5, 0x97, 0xe4, 0x2e, 0xc3, 0x4c,
	0xd7, 0xd1, 0xea, 0x13, 0x68, 0x9f, 0x18, 0x28, 0x23, 0xae, 0x35, 0xef, 0xc1, 0xa1, 0x9b, 0xd8,
	0x93, 0xda, 0xeb, 0x96, 0xb1, 0xeb, 0xd8, 0xf4, 0x91, 0xab, 0x40, 0xa6, 0xd5, 0x16, 0xaa, 0x0a,
	0x9b, 0xfc, 0x3f, 0x0f, 0x32, 0x20, 0xe2, 0x0e, 0x10, 0x03, 0x48, 0x75, 0x8a, 0xa5, 0xfa, 0x53,
	0x05, 0x8e, 0xdc, 0xc4, 0x5e, 0xcf, 0xea, 0xd2, 0x61, 0x51, 0xef, 0x65, 0x31, 0xd4, 0x02, 0xf4,
	0x32, 0x26, 0xdf, 0x24, 0x60, 0x5e, 0x62, 0x22, 0xa6, 0x54, 0xc6, 0x0f, 0x7d, 0xba, 0xf4, 0xfd,
	0x1b, 0xa6, 0xe3, 0x70, 0xab, 0xc2, 0xfa, 0x77, 0x2c, 0x0c, 0x34, 0xad, 0x6b, 0xd1, 0x5a, 0xed,
	0x5e, 0x04, 0xa7, 0x62, 0xd5, 0x1d, 0xba, 0x11, 0xde, 0x85, 0x6c, 0xc7, 0x56, 0xde, 0x0d, 0x85,
	0xfb, 0xbf, 0xc7, 0x44, 0xba, 0xff, 0x63, 0xed, 0x7d, 0xbe, 0x2e, 0x5e, 0x01, 0x60, 0x57, 0x75,
	0x44, 0xae, 0x67, 0xee, 0x3b, 0x3a, 0xb9, 0x0a, 0x54, 0xcc, 0x48, 0xdd, 0x84, 0xa9, 0xc8, 0xa6,
	0x4d, 0x28, 0xc5, 0x20, 0xf4, 0x30, 0xd0, 0xf2, 0x22, 0x44, 0x1f, 0x32, 0x93, 0x4c, 0xc3, 0x89,
	0xe8, 0x1f, 0x2b, 0x70, 0xb0, 0x7b, 0xb4, 0xda, 0x55, 0x94, 0x49, 0x2a, 0xaf, 0x4f, 0x32, 0x31,
	0x24, 0xc9, 0x2f, 0x15, 0x98, 0xeb, 0x37, 0x7d, 0x7f, 0x94, 0x76, 0xeb, 0xa3, 0x90, 0xba, 0xe3,
	0x37, 0x9b, 0xfa, 0xf3, 0x24, 0x4c, 0xaf, 0x10, 0x5c, 0x33, 0xab, 0xbf, 0xbb, 0x22, 0xf7, 0x29,
	0x62, 0xf2, 0xcd, 0x16, 0x31, 0xf5, 0x9a, 0x67, 0xe6, 0x0c, 0xa4, 0x9b, 0x66, 0xcb, 0xf4, 0xd8,
	0x2f, 0x90, 0xb4, 0xb8, 0x07, 0x31, 0xb1, 0xb4, 0x07, 0x31, 0x09, 0x2a, 0x42, 0xaa, 0x66, 0x78,
	0x86, 0x3a, 0x3a, 0xaf, 0x2c, 0x4c, 0x8a, 0x7b, 0x08, 0x95, 0x0a, 0xf6, 0xb7, 0x46, 0xca, 0xcc,
	0x10, 0x9d, 0x82, 0x24, 0x7d, 0x09, 0xc7, 0xba, 0x7f, 0xc6, 0xcb, 0x8f, 0xe0, 0xad, 0x91, 0x32,
	0x35, 0x2b, 0x8d, 0x41, 0x9a, 0xad, 0xee, 0xfa, 0x33, 0x05, 0xb2, 0xbc, 0xad, 0xa6, 0x6d, 0xdd,
	0xc0, 0x86, 0xe7, 0x13, 0x4c, 0xf9, 0x9a, 0x56, 0x0d, 0xbf, 0xc3, 0x9a, 0x9a, 0x14, 0xf9, 0x32,
	0xb1, 0xc4, 0x97, 0x49, 0xe2, 0xdf, 0xaa, 0x89, 0xc1, 0x7e, 0xab, 0xd2, 0xed, 0x96, 0xd8, 0x15,
	0xa3, 0x62, 0x36, 0x4d, 0x6f, 0x8b, 0xb5, 0x2b, 0x21, 0x6d, 0xb7, 0x1d, 0xa5, 0xbc, 0xdd, 0x76,
	0xe4, 0xfa, 0x2f, 0x0a, 0xcc, 0xc4, 0x13, 0xc9, 0xaf, 0xf2, 0x93, 0x90, 0x30, 0x6b, 0x7c, 0x14,
	0x85, 0xbf, 0x5b, 0xcc, 0x9a, 0xf4, 0x77, 0x8b, 0x59, 0x43, 0x55, 0x18, 0xaf, 0x47, 0xc9, 0xba,
	0x6a, 0x62, 0xcf, 0x2b, 0xbf, 0xa7, 0x3a, 0xe2, 0x9e, 0xd1, 0xc6, 0x10, 0xe1, 0x63, 0x60, 0x74,
	0x0f, 0xd2, 0x98, 0x10, 0x9b, 0xf0, 0x5f, 0xd5, 0xfa, 0x2e, 0x11, 0x84, 0xff, 0x8b, 0xc4, 0x52,
	0x33, 0x57, 0xa9, 0xd4, 0x4c, 0xb2, 0xf4, 0x2c, 0x03, 0x69, 0x06, 0x84, 0x9e, 0x28, 0xb0, 0xbf,
	0xef, 0xd3, 0x86, 0xe6, 0x76, 0x09, 0x45, 0x8f, 0x72, 0x6e, 0xb7, 0x7d, 0x7a, 0xcf, 0x57, 0x52,
	0x3f, 0xf0, 0xe4, 0xbb, 0x9f, 0x3e, 0x4c, 0xcc, 0xa2, 0xe9, 0xe2, 0xc6, 0xdf, 0x8a, 0xb1, 0x93,
	0x8b, 0x3e, 0x57, 0x60, 0x5f, 0x3f, 0x4f, 0xb4, 0xf4, 0x0a, 0x61, 0xf8, 0x95, 0x92, 0x1b, 0xf8,
	0xdd, 0xd5, 0xaf, 0x32, 0x3a, 0x17, 0xd1, 0x79, 0x89, 0x4e, 0xf1, 0x91, 0x7c, 0xd0, 0x1f, 0x8b,
	0x02, 0x7e, 0x54, 0x1f, 0x17, 0x4d, 0xab, 0x6e, 0xa3, 0x2f, 0x14, 0x40, 0x3d, 0xaf, 0xb1, 0x3b,
	0x14, 0xeb, 0x33, 0xbb, 0xfb, 0xf4, 0x5f, 0x7c, 0xf4, 0x6b, 0x8c, 0xfd, 0x25, 0x74, 0x71, 0x08,
	0xf6, 0xad, 0x88, 0xe8, 0x06, 0x64, 0x7b, 0xf0, 0xf7, 0xee, 0xfb, 0xab, 0xd3, 0x44, 0x8c, 0xe6,
	0x24, 0x02, 0x4a, 0x93, 0xc7, 0xdd, 0x56, 0xd8, 0x46, 0xd7, 0x7f, 0x8b, 0x41, 0xe7, 0x07, 0x29,
	0x5f, 0x9f, 0x17, 0x3b, 0x37, 0xd0, 0xde, 0xa7, 0x63, 0x46, 0x68, 0x55, 0x7f, 0x30, 0x6c, 0xdd,
	0x8a, 0x8f, 0x3a, 0xcf, 0xd2, 0xe3, 0xf6, 0x17, 0x69, 0x30, 0x96, 0x95, 0x45, 0xf4, 0x91, 0x02,
	0xb3, 0xdd, 0x55, 0x41, 0x85, 0x01, 0xcb, 0xf7, 0x6a, 0x19, 0x9d, 0x63, 0x19, 0x9d, 0xd1, 0xff,
	0x1a, 0x97, 0x78, 0x30, 0x8a, 0x9f, 0x29, 0x30, 0xc6, 0xaf, 0x26, 0x74, 0x7c, 0xef, 0xab, 0xab,
	0x4d, 0xe8, 0xc4, 0xcb, 0xcc, 0x78, 0xd7, 0xff, 0xcb, 0x28, 0x95, 0xf5, 0xdb, 0x94, 0xd2, 0x40,
	0xa5, 0xdd, 0x93, 0xb1, 0x13, 0xc1, 0x2f, 0x2b, 0x8b, 0xa5, 0xcb, 0xdf, 0x6f, 0xe7, 0x47, 0x5e,
	0x6c, 0xe7, 0x95, 0x9f, 0xb7, 0xf3, 0xca, 0xaf, 0xdb, 0x79, 0xe5, 0xfd, 0x9d, 0xbc, 0xf2, 0xe9,
	0x4e, 0x5e, 0x79, 0xb6, 0x93, 0x57, 0xbe, 0xda, 0xc9, 0x2b, 0x5f, 0xef, 0xe4, 0x95, 0x6f, 0x77,
	0xf2, 0xca, 0x8b, 0x9d, 0xbc, 0xf2, 0xc1, 0x8f, 0xf9, 0x91, 0x07, 0x13, 0x02, 0xd1, 0xca, 0x28,
	0xfb, 0x8b, 0xfd, 0xec, 0x6f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x2e, 0x7d, 0x50, 0xf2, 0xdb, 0x17,
	0x00, 0x00,
}
