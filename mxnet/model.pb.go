// Code generated by protoc-gen-gogo.
// source: model.proto
// DO NOT EDIT!

/*
	Package mxnet is a generated protocol buffer package.

	It is generated from these files:
		model.proto

	It has these top-level messages:
		ModelInformation
		ModelInformations
*/
package mxnet

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ModelInformation struct {
	Name       string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Framework  string   `protobuf:"bytes,2,opt,name=framework,proto3" json:"framework,omitempty"`
	Version    string   `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Type       string   `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Dataset    string   `protobuf:"bytes,5,opt,name=dataset,proto3" json:"dataset,omitempty"`
	GraphUrl   string   `protobuf:"bytes,6,opt,name=graph_url,json=graphUrl,proto3" json:"graph_url,omitempty"`
	WeightsUrl string   `protobuf:"bytes,7,opt,name=weights_url,json=weightsUrl,proto3" json:"weights_url,omitempty"`
	References []string `protobuf:"bytes,8,rep,name=references" json:"references,omitempty"`
}

func (m *ModelInformation) Reset()                    { *m = ModelInformation{} }
func (*ModelInformation) ProtoMessage()               {}
func (*ModelInformation) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{0} }

func (m *ModelInformation) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ModelInformation) GetFramework() string {
	if m != nil {
		return m.Framework
	}
	return ""
}

func (m *ModelInformation) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ModelInformation) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ModelInformation) GetDataset() string {
	if m != nil {
		return m.Dataset
	}
	return ""
}

func (m *ModelInformation) GetGraphUrl() string {
	if m != nil {
		return m.GraphUrl
	}
	return ""
}

func (m *ModelInformation) GetWeightsUrl() string {
	if m != nil {
		return m.WeightsUrl
	}
	return ""
}

func (m *ModelInformation) GetReferences() []string {
	if m != nil {
		return m.References
	}
	return nil
}

type ModelInformations struct {
	Info []*ModelInformation `protobuf:"bytes,1,rep,name=info" json:"info,omitempty"`
}

func (m *ModelInformations) Reset()                    { *m = ModelInformations{} }
func (*ModelInformations) ProtoMessage()               {}
func (*ModelInformations) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{1} }

func (m *ModelInformations) GetInfo() []*ModelInformation {
	if m != nil {
		return m.Info
	}
	return nil
}

func init() {
	proto.RegisterType((*ModelInformation)(nil), "carml.org.mxnet.ModelInformation")
	proto.RegisterType((*ModelInformations)(nil), "carml.org.mxnet.ModelInformations")
}
func (this *ModelInformation) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ModelInformation)
	if !ok {
		that2, ok := that.(ModelInformation)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ModelInformation")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ModelInformation but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ModelInformation but is not nil && this == nil")
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if this.Framework != that1.Framework {
		return fmt.Errorf("Framework this(%v) Not Equal that(%v)", this.Framework, that1.Framework)
	}
	if this.Version != that1.Version {
		return fmt.Errorf("Version this(%v) Not Equal that(%v)", this.Version, that1.Version)
	}
	if this.Type != that1.Type {
		return fmt.Errorf("Type this(%v) Not Equal that(%v)", this.Type, that1.Type)
	}
	if this.Dataset != that1.Dataset {
		return fmt.Errorf("Dataset this(%v) Not Equal that(%v)", this.Dataset, that1.Dataset)
	}
	if this.GraphUrl != that1.GraphUrl {
		return fmt.Errorf("GraphUrl this(%v) Not Equal that(%v)", this.GraphUrl, that1.GraphUrl)
	}
	if this.WeightsUrl != that1.WeightsUrl {
		return fmt.Errorf("WeightsUrl this(%v) Not Equal that(%v)", this.WeightsUrl, that1.WeightsUrl)
	}
	if len(this.References) != len(that1.References) {
		return fmt.Errorf("References this(%v) Not Equal that(%v)", len(this.References), len(that1.References))
	}
	for i := range this.References {
		if this.References[i] != that1.References[i] {
			return fmt.Errorf("References this[%v](%v) Not Equal that[%v](%v)", i, this.References[i], i, that1.References[i])
		}
	}
	return nil
}
func (this *ModelInformation) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ModelInformation)
	if !ok {
		that2, ok := that.(ModelInformation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Framework != that1.Framework {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Dataset != that1.Dataset {
		return false
	}
	if this.GraphUrl != that1.GraphUrl {
		return false
	}
	if this.WeightsUrl != that1.WeightsUrl {
		return false
	}
	if len(this.References) != len(that1.References) {
		return false
	}
	for i := range this.References {
		if this.References[i] != that1.References[i] {
			return false
		}
	}
	return true
}
func (this *ModelInformations) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ModelInformations)
	if !ok {
		that2, ok := that.(ModelInformations)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ModelInformations")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ModelInformations but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ModelInformations but is not nil && this == nil")
	}
	if len(this.Info) != len(that1.Info) {
		return fmt.Errorf("Info this(%v) Not Equal that(%v)", len(this.Info), len(that1.Info))
	}
	for i := range this.Info {
		if !this.Info[i].Equal(that1.Info[i]) {
			return fmt.Errorf("Info this[%v](%v) Not Equal that[%v](%v)", i, this.Info[i], i, that1.Info[i])
		}
	}
	return nil
}
func (this *ModelInformations) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ModelInformations)
	if !ok {
		that2, ok := that.(ModelInformations)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Info) != len(that1.Info) {
		return false
	}
	for i := range this.Info {
		if !this.Info[i].Equal(that1.Info[i]) {
			return false
		}
	}
	return true
}
func (this *ModelInformation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&mxnet.ModelInformation{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Framework: "+fmt.Sprintf("%#v", this.Framework)+",\n")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Dataset: "+fmt.Sprintf("%#v", this.Dataset)+",\n")
	s = append(s, "GraphUrl: "+fmt.Sprintf("%#v", this.GraphUrl)+",\n")
	s = append(s, "WeightsUrl: "+fmt.Sprintf("%#v", this.WeightsUrl)+",\n")
	s = append(s, "References: "+fmt.Sprintf("%#v", this.References)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ModelInformations) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&mxnet.ModelInformations{")
	if this.Info != nil {
		s = append(s, "Info: "+fmt.Sprintf("%#v", this.Info)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringModel(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ModelInformation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelInformation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Framework) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Framework)))
		i += copy(dAtA[i:], m.Framework)
	}
	if len(m.Version) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.Dataset) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Dataset)))
		i += copy(dAtA[i:], m.Dataset)
	}
	if len(m.GraphUrl) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.GraphUrl)))
		i += copy(dAtA[i:], m.GraphUrl)
	}
	if len(m.WeightsUrl) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.WeightsUrl)))
		i += copy(dAtA[i:], m.WeightsUrl)
	}
	if len(m.References) > 0 {
		for _, s := range m.References {
			dAtA[i] = 0x42
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *ModelInformations) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelInformations) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Info) > 0 {
		for _, msg := range m.Info {
			dAtA[i] = 0xa
			i++
			i = encodeVarintModel(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Model(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Model(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintModel(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedModelInformation(r randyModel, easy bool) *ModelInformation {
	this := &ModelInformation{}
	this.Name = string(randStringModel(r))
	this.Framework = string(randStringModel(r))
	this.Version = string(randStringModel(r))
	this.Type = string(randStringModel(r))
	this.Dataset = string(randStringModel(r))
	this.GraphUrl = string(randStringModel(r))
	this.WeightsUrl = string(randStringModel(r))
	v1 := r.Intn(10)
	this.References = make([]string, v1)
	for i := 0; i < v1; i++ {
		this.References[i] = string(randStringModel(r))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedModelInformations(r randyModel, easy bool) *ModelInformations {
	this := &ModelInformations{}
	if r.Intn(10) != 0 {
		v2 := r.Intn(5)
		this.Info = make([]*ModelInformation, v2)
		for i := 0; i < v2; i++ {
			this.Info[i] = NewPopulatedModelInformation(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyModel interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneModel(r randyModel) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringModel(r randyModel) string {
	v3 := r.Intn(100)
	tmps := make([]rune, v3)
	for i := 0; i < v3; i++ {
		tmps[i] = randUTF8RuneModel(r)
	}
	return string(tmps)
}
func randUnrecognizedModel(r randyModel, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldModel(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldModel(dAtA []byte, r randyModel, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateModel(dAtA, uint64(key))
		v4 := r.Int63()
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		dAtA = encodeVarintPopulateModel(dAtA, uint64(v4))
	case 1:
		dAtA = encodeVarintPopulateModel(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateModel(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateModel(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateModel(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateModel(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *ModelInformation) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Framework)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Dataset)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.GraphUrl)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.WeightsUrl)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if len(m.References) > 0 {
		for _, s := range m.References {
			l = len(s)
			n += 1 + l + sovModel(uint64(l))
		}
	}
	return n
}

func (m *ModelInformations) Size() (n int) {
	var l int
	_ = l
	if len(m.Info) > 0 {
		for _, e := range m.Info {
			l = e.Size()
			n += 1 + l + sovModel(uint64(l))
		}
	}
	return n
}

func sovModel(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozModel(x uint64) (n int) {
	return sovModel(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ModelInformation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ModelInformation{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Framework:` + fmt.Sprintf("%v", this.Framework) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Dataset:` + fmt.Sprintf("%v", this.Dataset) + `,`,
		`GraphUrl:` + fmt.Sprintf("%v", this.GraphUrl) + `,`,
		`WeightsUrl:` + fmt.Sprintf("%v", this.WeightsUrl) + `,`,
		`References:` + fmt.Sprintf("%v", this.References) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ModelInformations) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ModelInformations{`,
		`Info:` + strings.Replace(fmt.Sprintf("%v", this.Info), "ModelInformation", "ModelInformation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringModel(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ModelInformation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelInformation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelInformation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Framework", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Framework = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dataset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dataset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GraphUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GraphUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeightsUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WeightsUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field References", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.References = append(m.References, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelInformations) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelInformations: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelInformations: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = append(m.Info, &ModelInformation{})
			if err := m.Info[len(m.Info)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipModel(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowModel
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthModel
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowModel
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipModel(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthModel = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowModel   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("model.proto", fileDescriptorModel) }

var fileDescriptorModel = []byte{
	// 337 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0xbd, 0x4e, 0xc3, 0x30,
	0x14, 0x85, 0x73, 0xe9, 0xbf, 0x3b, 0x00, 0x9e, 0x2c, 0x40, 0x97, 0xd2, 0xa9, 0x0b, 0xa9, 0x04,
	0xe2, 0x05, 0x60, 0x02, 0x89, 0xa5, 0x12, 0x0b, 0x0b, 0x4a, 0x5b, 0x27, 0x8d, 0x48, 0xec, 0xca,
	0x71, 0x29, 0x6c, 0x3c, 0x02, 0x8f, 0xc1, 0x23, 0x30, 0x32, 0x32, 0x76, 0x64, 0x6c, 0xcc, 0x82,
	0x98, 0x3a, 0x32, 0xa2, 0xdc, 0x16, 0x55, 0xea, 0x76, 0xce, 0xf9, 0xce, 0x3d, 0x52, 0x62, 0xd6,
	0x4c, 0xf5, 0x50, 0x26, 0xfe, 0xd8, 0x68, 0xab, 0xf9, 0xf6, 0x20, 0x30, 0x69, 0xe2, 0x6b, 0x13,
	0xf9, 0xe9, 0xa3, 0x92, 0x76, 0xef, 0x38, 0x8a, 0xed, 0x68, 0xd2, 0xf7, 0x07, 0x3a, 0xed, 0x46,
	0x3a, 0xd2, 0x5d, 0xea, 0xf5, 0x27, 0x21, 0x39, 0x32, 0xa4, 0x96, 0xf7, 0xed, 0x1f, 0x60, 0x3b,
	0xd7, 0xc5, 0xde, 0xa5, 0x0a, 0xb5, 0x49, 0x03, 0x1b, 0x6b, 0xc5, 0x39, 0x2b, 0xab, 0x20, 0x95,
	0x02, 0x5a, 0xd0, 0x69, 0xf4, 0x48, 0xf3, 0x03, 0xd6, 0x08, 0x4d, 0x90, 0xca, 0xa9, 0x36, 0xf7,
	0x62, 0x8b, 0xc0, 0x3a, 0xe0, 0x82, 0xd5, 0x1e, 0xa4, 0xc9, 0x62, 0xad, 0x44, 0x89, 0xd8, 0xbf,
	0x2d, 0xb6, 0xec, 0xd3, 0x58, 0x8a, 0xf2, 0x72, 0xab, 0xd0, 0x45, 0x7b, 0x18, 0xd8, 0x20, 0x93,
	0x56, 0x54, 0x96, 0xed, 0x95, 0xe5, 0xfb, 0xac, 0x11, 0x99, 0x60, 0x3c, 0xba, 0x9b, 0x98, 0x44,
	0x54, 0x89, 0xd5, 0x29, 0xb8, 0x31, 0x09, 0x3f, 0x64, 0xcd, 0xa9, 0x8c, 0xa3, 0x91, 0xcd, 0x08,
	0xd7, 0x08, 0xb3, 0x55, 0x54, 0x14, 0x90, 0x31, 0x23, 0x43, 0x69, 0xa4, 0x1a, 0xc8, 0x4c, 0xd4,
	0x5b, 0xa5, 0x82, 0xaf, 0x93, 0xf6, 0x15, 0xdb, 0xdd, 0xfc, 0xd6, 0x8c, 0x9f, 0xb1, 0x72, 0xac,
	0x42, 0x2d, 0xa0, 0x55, 0xea, 0x34, 0x4f, 0x8e, 0xfc, 0x8d, 0x1f, 0xea, 0x6f, 0x5e, 0xf4, 0xa8,
	0x7e, 0x7e, 0x31, 0xcb, 0xd1, 0xfb, 0xcc, 0xd1, 0x9b, 0xe7, 0x08, 0x8b, 0x1c, 0xe1, 0x37, 0x47,
	0x78, 0x76, 0x08, 0xaf, 0x0e, 0xe1, 0xcd, 0x21, 0xbc, 0x3b, 0x84, 0x0f, 0x87, 0x30, 0x73, 0x08,
	0x73, 0x87, 0xf0, 0xed, 0xd0, 0x5b, 0x38, 0x84, 0x97, 0x2f, 0xf4, 0x6e, 0x2b, 0xb4, 0xdd, 0xaf,
	0xd2, 0x23, 0x9c, 0xfe, 0x05, 0x00, 0x00, 0xff, 0xff, 0x45, 0xc3, 0x6d, 0xca, 0xd3, 0x01, 0x00,
	0x00,
}
