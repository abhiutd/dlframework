// Code generated by go-bindata.
// sources:
// builtin_models/caffenet.yml
// builtin_models/locationnet.yml
// builtin_models/nin.yml
// builtin_models/squeeznet.yml
// builtin_models/vgg19.yml
// DO NOT EDIT!

package mxnet

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _caffenetYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xc1\x8e\xe3\x20\x0c\x86\xef\x3c\x05\x0f\x50\x48\xda\x8d\xaa\x15\xd7\x3d\xed\x65\x5f\x60\xb5\xaa\xbc\xc4\x49\xe8\x80\x41\xd8\x69\xa7\x6f\x3f\x22\x51\xa5\x1e\x46\x33\x97\xc4\xff\x27\xfe\x1f\xdb\x10\x24\x74\xfa\x17\x4c\x13\xfe\x41\x51\x3e\x93\x40\x20\xac\x4e\x69\x0d\x69\x3c\x0f\xad\xd0\x7a\x2e\xab\xd3\x15\x42\xa9\xf9\x8a\x5e\x3a\x6b\xed\xc6\xfd\xa7\xbc\x14\x7f\x1e\x22\xbe\x58\x1b\x9f\x2a\x24\xbc\xe7\xfa\xe6\x74\x7a\x27\x14\x75\xc3\xca\x21\x93\xd3\x47\xdb\x2b\x79\x14\x74\xda\x13\xa9\x40\x65\x95\xe6\xdd\x51\x48\x30\xa3\xd2\x7a\x0c\x09\xa9\x9d\x67\xa7\xff\x1e\x0f\xfa\xc7\x41\x9f\x4e\xc3\xf6\xf9\xa7\x46\x10\x60\x94\xcb\x3e\xce\xef\x66\x69\xe3\x4c\x08\xb2\x56\xe4\xcb\x5a\xe3\xde\xc4\x5c\xa1\x2c\xbb\x5c\x44\x8a\xeb\xba\x66\xb5\x63\x8a\xde\xa6\xd8\x6d\x8d\x75\x29\x8f\x18\xb9\xdb\x6e\x6e\xda\xb7\xf5\xbc\x16\x86\x1f\xe9\x7f\x8e\xf6\xca\x99\xd4\x1d\xc3\xbc\x08\x7f\x11\xfa\x6d\x5c\xdf\xf7\xbd\x2d\x50\x21\xb1\xaa\x38\x61\x45\xf2\xc8\x6d\x07\xe6\x99\x58\xa0\x60\x65\x4b\xa1\xb0\xf5\x7e\x97\xdd\xf0\xf3\x34\x98\x67\xae\xf1\x11\x98\xc3\x14\x3c\x48\xc8\x64\xee\x41\x16\x33\x22\x16\xe3\x33\xdd\x72\x5c\x1b\x85\x68\x08\xd7\xba\xfd\xa4\x3d\x06\xab\x8f\x00\x00\x00\xff\xff\x9d\xef\xa6\xa3\x03\x02\x00\x00"

func caffenetYmlBytes() ([]byte, error) {
	return bindataRead(
		_caffenetYml,
		"caffenet.yml",
	)
}

func caffenetYml() (*asset, error) {
	bytes, err := caffenetYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "caffenet.yml", size: 515, mode: os.FileMode(420), modTime: time.Unix(1496932628, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _locationnetYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\xcd\xae\xda\x30\x10\x46\xf7\x7e\x0a\x3f\x00\xb1\x63\xc2\xaf\xb7\xdd\xb6\x2c\xba\xad\x2a\x34\x38\x43\xe2\x92\xf1\x44\x9e\x09\x94\x3e\x7d\x45\xa9\x74\x5f\xe0\xae\xcf\xd1\xa7\xa3\xaf\x00\x61\xb4\x5f\x39\x81\x66\x2e\x27\x54\x73\xad\x40\xf8\xe0\x7a\x8b\x96\x7e\x17\x54\x73\xc7\x2a\x99\x4b\xb4\xc1\xb5\x46\x9f\x33\x46\x9b\x4a\x31\x3d\x28\x08\xea\x79\xa9\x53\xb4\xdf\x96\x49\x33\x61\x9f\xe1\x0b\x13\x71\x11\x33\x54\x98\xc7\x37\x1c\x55\x67\x89\xde\x4b\xe7\x80\xe0\x0f\x17\x78\x88\x4b\x4c\x9e\x28\xbd\xed\x46\x17\xe5\x9a\x61\xf2\xc4\x3d\x4e\xe2\xbf\x9f\x42\x1b\x9a\xed\x6d\xdb\xb6\x8d\x3c\xe9\xc2\x93\xfb\x25\x5c\xcc\x03\xf3\x30\xaa\x7c\xca\x6e\xdb\x86\xb5\x9b\xa1\x02\x89\x21\x84\x72\xce\x04\x03\x46\xfb\x23\xac\x3b\xb7\x3b\xac\x6c\x08\x3b\xb7\xdf\x1f\x57\x36\xb4\x9d\x3b\x76\xc7\x9f\xa6\xe2\x15\x2b\x96\x84\x12\x8d\xb5\xcd\x47\x81\x82\xe6\xe4\x06\xe6\x61\xc2\x45\xb0\x26\x2e\x8a\x45\xdf\x35\xaf\x5b\x7c\x45\x41\xa8\x69\xfc\x2f\xfd\x23\x58\xbc\x9f\x97\x8b\xf8\x17\xc8\x77\xf4\x9b\xed\xe6\x70\x70\x73\x7f\x35\x7f\x03\x00\x00\xff\xff\x27\x0d\xd1\xfd\x98\x01\x00\x00"

func locationnetYmlBytes() ([]byte, error) {
	return bindataRead(
		_locationnetYml,
		"locationnet.yml",
	)
}

func locationnetYml() (*asset, error) {
	bytes, err := locationnetYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locationnet.yml", size: 408, mode: os.FileMode(420), modTime: time.Unix(1496932036, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ninYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x8c\x31\x4e\x03\x31\x10\x45\x7b\x9f\xc2\x25\x14\xb1\x1d\x92\xca\x37\xa0\xd9\x2b\xa0\x61\x3d\xbb\x6b\xf0\x8c\xad\x99\x61\x93\xdc\x1e\x2d\x48\xf4\x14\x5f\xfa\xff\xeb\xe9\x31\x10\x66\x3f\xa1\xdd\xba\x7c\xfa\xca\x7f\xf5\x69\xaa\xd3\xb3\x5b\x04\x08\x8f\x9d\x3d\xdd\x19\xcd\xed\x28\x5a\x3b\x67\x7f\x0e\xc9\xd9\x63\x60\xf6\x33\xb3\x2b\x60\xa0\x68\x6f\x5f\xd2\xb2\x7f\x25\x58\x71\x42\x73\xab\xc0\xd8\x7e\xbf\xcd\x6c\xe4\x18\x0f\x2e\x14\x6a\x73\xa0\x16\xa9\x17\x6c\x1a\xeb\x81\x33\x5a\xe4\xca\x47\x4e\xfa\xa0\xf7\xde\xc2\x87\x76\x76\x37\xac\xeb\x66\xfa\x7f\x49\x4a\x29\x85\x01\x02\xa4\x4e\x70\x41\x41\x9e\x51\xb3\xf3\xfe\xf4\xe3\xd1\x1c\x23\xc8\xbd\xee\xa1\xcb\x1a\x47\x59\xe2\xf9\x72\x7e\x09\xd7\x6b\x4a\xfb\x25\x8c\xb2\xb8\xef\x00\x00\x00\xff\xff\xc7\x21\x80\xd1\x1b\x01\x00\x00"

func ninYmlBytes() ([]byte, error) {
	return bindataRead(
		_ninYml,
		"nin.yml",
	)
}

func ninYml() (*asset, error) {
	bytes, err := ninYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "nin.yml", size: 283, mode: os.FileMode(420), modTime: time.Unix(1496772523, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _squeeznetYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x8d\x4d\x4e\x03\x31\x0c\x85\xf7\x39\x45\x2e\xd0\x38\x03\xa8\x48\xb9\x01\x1b\x36\x1c\xa0\x32\x13\xcf\x0f\xc4\x49\xb0\xdd\x69\xcb\xe9\x51\xdb\x15\xfb\xee\x9e\x9e\xbe\xf7\xbd\x8a\x4c\xc9\x7f\xfc\x1c\x89\x7e\xe9\x9d\xcc\x4d\x82\x4c\xa7\x26\xdf\xc9\xf3\xb9\x92\xb9\x8d\x44\xd7\x56\x93\x1f\xc2\xe0\xec\xd2\x29\xf9\xb1\x56\x97\xd1\x50\xc9\x0e\x47\x29\xc9\xbf\x31\xce\xb7\xf5\x2c\xd8\x97\x7b\xb7\x98\xf5\x04\x70\xe5\x42\xe6\x32\x06\x2e\xc0\x2d\x53\x51\x58\xaf\x78\x25\x03\xbd\xff\xfe\x8f\x87\x6d\x08\xc3\x4e\x2f\xfc\xd9\x4a\xf8\xd2\x56\xdd\x89\xd6\x79\x31\x7d\x88\x37\xc6\x18\x43\x47\x41\x56\x27\x34\x91\x50\x1d\x49\x93\xf3\x7e\x77\x53\x6b\x02\x40\x39\xaf\x5b\x68\x32\x43\xcf\x13\x0c\xfb\xf8\x14\xe2\xeb\xf3\x3e\x6e\x2f\xa1\xe7\xc9\xfd\x05\x00\x00\xff\xff\xeb\x76\xd3\xc7\x34\x01\x00\x00"

func squeeznetYmlBytes() ([]byte, error) {
	return bindataRead(
		_squeeznetYml,
		"squeeznet.yml",
	)
}

func squeeznetYml() (*asset, error) {
	bytes, err := squeeznetYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "squeeznet.yml", size: 308, mode: os.FileMode(420), modTime: time.Unix(1496772531, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vgg19Yml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\xcc\x4d\x4e\xc3\x30\x10\xc5\xf1\xbd\x4f\xe1\x0b\xd4\x1f\x12\xad\x14\x5f\xa0\x62\xc3\x92\x2d\x1a\xe2\x89\x13\xf0\xd8\xd6\xcc\x90\xb6\xb7\x47\x81\x1b\x74\xf1\x36\x4f\x7f\xfd\x1a\x10\x26\xfb\x7e\xbd\xc6\xc9\x2c\x0c\x84\xb7\xce\xdf\xc9\xd2\xbd\xa1\x9a\x1d\x59\xb6\xde\x92\x8d\x2e\x18\x7d\x0c\x4c\x76\x6e\xcd\x64\x50\x10\xd4\x8f\x1f\xae\xc9\xbe\x12\x14\x7c\x43\x35\x85\x61\xac\xff\xdf\xaa\x3a\x92\xf7\x47\xe7\x32\xd5\xd9\x51\xf5\xd4\x33\x56\xf1\xdb\x91\x37\x54\xbf\x97\x72\x2c\x4e\x27\x79\xd0\x67\xaf\xee\x4b\x7a\x33\x37\xdc\xca\xaa\xf2\x0c\x13\x42\x08\x6e\x00\x03\x89\x61\x5c\x90\xb1\xcd\x28\xc9\x58\x7b\xfa\x93\x24\x79\x0f\x7c\xdf\x76\xd7\xb9\xf8\x91\x17\x1f\x5f\xc2\xe4\xe2\xf9\x7c\xd9\x2f\x6e\xe4\xc5\xfc\x06\x00\x00\xff\xff\x25\x9f\x25\xb9\x0c\x01\x00\x00"

func vgg19YmlBytes() ([]byte, error) {
	return bindataRead(
		_vgg19Yml,
		"vgg19.yml",
	)
}

func vgg19Yml() (*asset, error) {
	bytes, err := vgg19YmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vgg19.yml", size: 268, mode: os.FileMode(420), modTime: time.Unix(1496772538, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"caffenet.yml": caffenetYml,
	"locationnet.yml": locationnetYml,
	"nin.yml": ninYml,
	"squeeznet.yml": squeeznetYml,
	"vgg19.yml": vgg19Yml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"caffenet.yml": &bintree{caffenetYml, map[string]*bintree{}},
	"locationnet.yml": &bintree{locationnetYml, map[string]*bintree{}},
	"nin.yml": &bintree{ninYml, map[string]*bintree{}},
	"squeeznet.yml": &bintree{squeeznetYml, map[string]*bintree{}},
	"vgg19.yml": &bintree{vgg19Yml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

