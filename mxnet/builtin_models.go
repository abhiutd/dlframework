// Code generated by go-bindata.
// sources:
// builtin_models/caffenet.yml
// builtin_models/locationnet.yml
// builtin_models/nin.yml
// builtin_models/squeeznet.yml
// builtin_models/vgg19.yml
// DO NOT EDIT!

package mxnet

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _caffenetYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\xcf\x8e\xe3\x20\x0c\xc6\xef\x3c\x05\x0f\x50\x48\xda\x8d\xaa\x15\xd7\x3d\xed\x65\x5f\x60\xb5\xaa\xbc\xc4\x49\xe8\x80\x41\xd8\xe9\x9f\xb7\x1f\x91\xaa\x52\x0f\xa3\x19\xcd\x05\xec\x9f\xfc\x7d\xd8\x86\x20\xa1\xd3\xbf\x60\x9a\xf0\x0f\x8a\xf2\x99\x04\x02\x61\x75\x4a\x6b\x48\xe3\x71\x68\x81\xd6\x73\x59\x9d\xae\x10\x4a\xcd\x67\xf4\xd2\x59\x6b\x37\xee\x3f\xe4\xa5\xf8\xe3\x10\xf1\x45\xda\xf8\x54\x21\xe1\x35\xd7\x37\xa7\xd3\x8d\x50\xd4\x05\x2b\x87\x4c\x4e\xef\x6d\xaf\xe4\x5e\xd0\x69\x4f\xa4\x02\x95\x55\x9a\xf6\x81\x42\x82\x19\x95\xd6\x63\x48\x48\xad\x9e\x9d\xfe\xbb\xdf\xe9\x1f\x3b\x7d\x38\x0c\xdb\xf1\x4f\x8d\x20\xc0\x28\xa7\xc7\x38\xbf\x9b\xa4\x8d\x33\x21\xc8\x5a\x91\x4f\x6b\x8d\x4e\x2f\x22\xc5\x75\x5d\xab\xb5\x63\x8a\xde\xa6\xd8\x6d\x9d\x74\x29\x8f\x18\xb9\xdb\x9e\x6a\x39\xdf\x89\x51\xac\xdc\x44\xcd\x15\xca\xf2\x5d\xbd\x6f\xfb\x7c\x0d\x0c\xdf\xd3\xff\x1c\xed\x99\x33\xa9\x2b\x86\x79\x91\xcf\x9a\xfa\xd2\xae\xef\xfb\xde\x16\xa8\x90\x58\x55\x9c\xb0\x22\x79\xe4\xb6\x34\xf3\x74\x2c\x50\xb0\xb2\xa5\x50\xd8\x7a\xff\x48\xbb\xe1\xe7\x61\x30\x4f\x5f\xe3\x23\x30\x87\x29\x78\x90\x90\xc9\x5c\x83\x2c\x66\x44\x2c\xc6\x67\xba\xe4\xb8\x36\x0a\xd1\x10\xae\x75\xbb\xa4\xfd\x1e\xab\xf7\x00\x00\x00\xff\xff\x3e\x0f\x94\x7f\x34\x02\x00\x00"

func caffenetYmlBytes() ([]byte, error) {
	return bindataRead(
		_caffenetYml,
		"caffenet.yml",
	)
}

func caffenetYml() (*asset, error) {
	bytes, err := caffenetYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "caffenet.yml", size: 564, mode: os.FileMode(420), modTime: time.Unix(1496945045, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _locationnetYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x91\xbd\x92\xdb\x30\x0c\x84\x7b\x3e\x05\x1f\xc0\x22\x25\xcb\xbe\xb3\xd5\xa6\x4d\xae\x48\x9b\xb9\xf1\x40\x12\x24\x31\x16\x48\x0d\x00\x9e\xed\x3c\x7d\x46\x56\x7e\x26\x7d\x1a\x16\xdc\xc5\x87\x9d\x45\x04\xc2\xc6\x7e\x4e\x1d\x68\x48\xf1\x0d\xd5\x0c\x0c\x84\xb7\xc4\xd7\xc6\xd2\x3d\xa2\x9a\x0f\x64\x09\x29\x36\xb6\x72\xa5\xd1\xc7\x82\x8d\xed\x62\x34\x21\x2e\x59\x1b\x63\xed\xf6\x15\x08\x46\x34\xd6\xf6\x81\x30\xae\x7e\x69\xec\xb7\x6a\x67\xeb\x9d\xdd\xef\x0f\xcf\xe7\xdd\xf4\xa0\x20\xa8\x97\x6d\xeb\x97\x3c\x6b\x20\xec\x03\x7c\x4a\x44\x29\x8a\x19\x10\x34\x33\xca\x25\xf3\xdc\xd8\x49\x75\x91\xc6\xfb\x31\xe8\x94\x5b\xd7\x25\xf2\xf4\x67\xa4\x68\x91\xaf\x38\xe3\xc3\x6b\xd6\xc4\x01\x66\xf1\xed\x9c\x5a\x4f\x20\x8a\xec\x47\x0e\xbd\x38\xbd\xab\x19\x19\x96\xe9\x5f\xa2\xd4\x0e\x08\x7e\xa4\x08\x37\xd9\xb8\xd4\x6d\x11\x8a\xdf\x34\x4f\xa9\xc7\x59\xfc\xd7\xb7\xaa\xac\x8a\xe3\xf5\x58\x96\x85\x3c\xa8\x4d\xb3\xfb\x2e\x29\x9a\x1b\x86\x71\x52\xf9\x2f\xdc\xb2\xac\xf6\x6e\x01\x06\x12\x43\x08\xf1\xf2\x2c\x73\xed\x6f\x5f\xbb\x97\xd3\xce\x56\xd5\x8b\x7b\x7d\x3d\xef\x6c\x55\xd6\xee\x5c\x9f\xdf\x0d\xe3\x80\x8c\xb1\x43\x59\x4f\x50\xfc\x4d\xa0\xa0\xa1\x73\x63\x4a\xe3\x8c\x59\x90\xbb\x14\x15\xa3\x6e\x69\xd6\xe2\x3c\xa3\x20\x70\x37\xfd\x32\x3d\x15\x8c\xde\x2f\xb9\x15\xbf\x0a\xe1\x03\xfd\xe1\x78\x38\x9d\xdc\xd2\x0f\xe6\x67\x00\x00\x00\xff\xff\x3d\x68\x06\x49\x22\x02\x00\x00"

func locationnetYmlBytes() ([]byte, error) {
	return bindataRead(
		_locationnetYml,
		"locationnet.yml",
	)
}

func locationnetYml() (*asset, error) {
	bytes, err := locationnetYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locationnet.yml", size: 546, mode: os.FileMode(420), modTime: time.Unix(1496945045, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ninYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x50\xcb\x6a\x03\x31\x0c\xbc\xeb\x2b\x74\x6c\x21\xb1\xbd\x49\x4e\xfe\x83\x5e\xf6\x07\x4a\x09\x6e\x56\xbb\x71\xbb\x96\x8d\xa5\x3c\xf6\xef\x8b\x37\xd0\x43\xa1\x39\x48\x68\xc4\xcc\x68\x10\x87\x44\x1e\x7b\xd2\x5b\xae\xdf\x18\xf9\x77\x7c\xe9\x63\xff\x0a\x63\x0d\x89\x1a\xf6\x98\xee\x4c\x0a\x57\xaa\x12\x33\x7b\xec\x8c\x03\x5d\x0a\x79\x3c\x31\x43\xe4\x72\x51\x0f\x88\x8f\x55\x4c\x61\x22\x40\x1c\x62\x22\x6e\x7c\xf1\xf8\xde\x6d\x70\xbf\xc1\xdd\xee\xb0\xb6\x0f\x18\x82\x06\x21\x3d\x3e\x22\xbc\x35\x49\x4f\x0a\x23\x05\xbd\x54\x92\xe3\xa5\xce\x1e\xcf\xaa\xc5\x5b\xdb\xb8\x66\x48\xf3\xc9\xa4\xd9\xae\x49\x6c\xca\x03\xcd\x62\xd7\x53\x0d\xcb\xc2\x42\x6a\xf4\xae\x30\xd5\x50\xce\x4f\xf4\x7f\x94\x1c\xb9\xd5\x56\x96\xf4\x99\x67\xf3\x25\x99\xe1\x46\x71\x3a\xeb\xb3\x10\xff\x98\x38\xe7\x9c\x29\xa1\x86\x24\x50\x69\xa4\x4a\x7c\x22\x69\xaf\xd9\xae\x3e\xe2\xad\x0d\xf5\x1e\xaf\x26\xd7\xc9\x96\x61\xb4\xdd\xbe\xdb\x99\xc3\xc1\xb9\xeb\xde\x94\x61\x84\x9f\x00\x00\x00\xff\xff\x5d\xa9\x13\xdc\x93\x01\x00\x00"

func ninYmlBytes() ([]byte, error) {
	return bindataRead(
		_ninYml,
		"nin.yml",
	)
}

func ninYml() (*asset, error) {
	bytes, err := ninYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "nin.yml", size: 403, mode: os.FileMode(420), modTime: time.Unix(1496945045, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _squeeznetYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x50\x3b\x6e\xf3\x30\x0c\xde\x75\x0a\x1e\x20\xd1\x23\x09\xf2\x03\xba\xc1\xbf\x74\xe9\x58\x14\x81\x6a\xd1\xb6\x5a\xeb\x51\x91\x76\xec\x9e\xbe\xb0\x3d\xb5\x43\xd0\x85\x20\x89\xef\x45\x26\x17\xd1\xc2\xf3\xe7\x88\xf8\x85\x4f\xc8\xa2\xad\x2e\xe2\x3d\xd7\x0f\x0b\x71\x4e\xc8\x62\xc2\x4a\x21\x27\x0b\x46\x1a\xc1\x4b\x41\x0b\x4d\x4a\x22\xa4\x32\xb2\x15\x00\xfb\x2a\x44\xd7\xa1\x00\xf0\x21\x62\x5a\xf1\x64\xe1\xc5\x1c\xe0\x7c\x80\xd3\xe9\xb2\x95\x57\xe1\x1d\x3b\x42\xbe\xed\xa6\xff\x57\xca\x66\x89\x8e\xc7\x8a\x74\x1b\xeb\x60\xa1\x67\x2e\x56\xa9\x15\x2b\x7d\x1c\x1a\x19\x07\xb5\x25\x51\x31\x7b\x1c\x48\x6d\x56\xeb\x4c\x4b\x22\x64\xc9\x33\x8b\xae\xba\xd2\x3f\xe0\xff\x66\xee\xf7\xfe\x6c\x6f\x93\x91\xe6\x48\x4b\x7c\xcb\x83\x7c\xa7\x9c\xc4\x1d\x43\xd7\xf3\xa3\x5c\x7f\xd7\xd5\x5a\x6b\x59\x5c\x75\x91\x44\xc5\x16\x2b\xa6\x06\x69\x7d\xe0\x71\x93\x26\xab\x94\xab\x73\x98\x64\xae\x9d\x2a\xbe\x55\xe6\xaa\x4f\x52\xff\x3b\x5f\xf5\x74\x91\xc5\xb7\xe2\x3b\x00\x00\xff\xff\x7d\x10\x6a\xba\xac\x01\x00\x00"

func squeeznetYmlBytes() ([]byte, error) {
	return bindataRead(
		_squeeznetYml,
		"squeeznet.yml",
	)
}

func squeeznetYml() (*asset, error) {
	bytes, err := squeeznetYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "squeeznet.yml", size: 428, mode: os.FileMode(420), modTime: time.Unix(1496945045, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vgg19Yml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\x4d\x6e\x02\x31\x0c\x85\xf7\x3e\x85\x0f\x00\xc9\x0c\x05\x24\x72\x01\xd4\x4d\x97\xdd\x54\x15\x4a\x89\x27\xa4\x9d\xfc\x28\x36\x03\x73\xfb\x2a\xc3\xae\x52\x59\x24\x92\xad\xf7\xbd\xf7\xe4\x64\x23\x19\x7c\x3f\x1e\xfb\x03\x0c\xd5\x46\xba\xe5\xfa\x63\x30\xde\x13\x09\x4c\x54\x39\xe4\x64\xb0\x57\x1d\xc8\x5c\xc8\xe0\x39\x25\x08\xa9\x5c\xc5\x00\xe2\x63\x15\xa2\xf5\x04\x88\x2e\x44\x4a\x4d\xcf\x06\x3f\xfa\x15\xbe\xac\x70\xb3\xd9\x2e\xdf\x27\x38\x2b\x96\x49\x4e\x8f\xbc\xd7\x86\xbc\x91\xc0\x40\x56\xae\x95\xf8\x74\xad\xa3\xc1\x8b\x48\x31\x5a\x37\xad\x72\x71\x3c\xab\x38\xea\xa5\x89\x8e\xd9\xd1\xc8\x7a\x89\x6a\x33\xcf\x89\x49\x94\xdc\x05\x7c\xb5\xe5\xf2\x84\xff\x43\x4e\xde\xb7\xd7\x1f\xd6\x3c\xc7\xaf\x3c\xaa\x6f\xce\x09\x6e\x14\xfc\x45\x9e\xd5\xf8\xd7\xa6\xeb\xba\x4e\x15\x5b\x6d\x64\xa8\x34\x50\xa5\x74\x26\x6e\xe7\x59\x2f\x4e\x6c\xb4\xb6\xf5\x1e\x26\x95\xab\xd7\xc5\x0d\xba\xdf\x76\x07\xd5\xef\x76\xfb\x69\xaf\x8a\x1b\xe0\x37\x00\x00\xff\xff\xe7\x3d\xab\x61\x84\x01\x00\x00"

func vgg19YmlBytes() ([]byte, error) {
	return bindataRead(
		_vgg19Yml,
		"vgg19.yml",
	)
}

func vgg19Yml() (*asset, error) {
	bytes, err := vgg19YmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vgg19.yml", size: 388, mode: os.FileMode(420), modTime: time.Unix(1496945045, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"caffenet.yml": caffenetYml,
	"locationnet.yml": locationnetYml,
	"nin.yml": ninYml,
	"squeeznet.yml": squeeznetYml,
	"vgg19.yml": vgg19Yml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"caffenet.yml": &bintree{caffenetYml, map[string]*bintree{}},
	"locationnet.yml": &bintree{locationnetYml, map[string]*bintree{}},
	"nin.yml": &bintree{ninYml, map[string]*bintree{}},
	"squeeznet.yml": &bintree{squeeznetYml, map[string]*bintree{}},
	"vgg19.yml": &bintree{vgg19Yml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

