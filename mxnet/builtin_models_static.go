// Code generated by go-bindata.
// sources:
// builtin_models/README.md
// builtin_models/caffenet.yml
// builtin_models/inceptionv3.yml
// builtin_models/locationnet.yml
// builtin_models/nin.yml
// builtin_models/residualNet152.yml
// builtin_models/squeeznet.yml
// builtin_models/vgg16.yml
// builtin_models/vgg19.yml
// DO NOT EDIT!

package mxnet

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _readmeMd = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x1c\xcb\xc1\x09\x03\x21\x10\x05\xd0\xbb\x55\x7c\xc8\x25\xb9\x58\x4c\x1a\xc8\x98\x75\x56\x06\xf4\x2b\x3a\xc2\x96\xbf\xb0\x05\xbc\x17\xfe\xdb\xaa\x1b\x7f\xad\x67\xad\x2b\x84\xef\x26\xa4\x74\x14\xa5\xce\xe4\x2a\x30\x42\xda\x45\x75\xc1\x5b\x62\x94\x0f\xd2\xe9\x3a\xb1\x47\x4e\x6e\x2c\x78\x28\xb2\xae\x63\xda\x70\xeb\x5c\xf1\x0e\x00\x00\xff\xff\x9f\xd3\x11\xba\x58\x00\x00\x00"

func readmeMdBytes() ([]byte, error) {
	return bindataRead(
		_readmeMd,
		"README.md",
	)
}

func readmeMd() (*asset, error) {
	bytes, err := readmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "README.md", size: 88, mode: os.FileMode(420), modTime: time.Unix(1497042630, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _caffenetYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\x4d\x6f\xd4\x30\x10\xbd\xfb\x57\xcc\xa5\xb7\x8d\x93\xdd\xee\x2e\x6d\x0e\x48\xa8\x27\xc4\xc7\x01\x10\x17\x84\x2a\xe3\x4c\x36\x2e\xce\xd8\x9a\x99\xec\x76\xff\x3d\x72\xd2\x56\xa5\x42\x20\x2e\xc9\xf8\xf9\xbd\x67\xcf\x3c\x93\x1b\xb1\x85\x1b\xd7\xf7\xf8\x11\xd5\xf8\x44\xea\x02\x21\xb7\x06\xc0\x8d\xdd\x7e\x5b\x0a\x80\x43\x9e\x5a\x60\x17\x32\xa7\x3b\xf4\x5a\x5b\x6b\x67\xdc\xff\x11\xcf\xd9\xef\xb7\x11\x9f\x49\x0b\xde\xb3\x1b\xf1\x94\xf8\x67\x0b\xe3\x3d\xa1\x9a\x23\xb2\x84\x44\x2d\xac\x6d\x63\xf4\x9c\xb1\x05\x4f\x64\x02\xe5\x49\x8b\x76\x81\xc2\xe8\x0e\x68\x00\xba\x30\x22\x15\xbe\xb4\xf0\x6d\xbd\x82\xcb\x15\x6c\x36\xdb\xf9\xf3\xdd\x74\x4e\x9d\xa0\xde\x2e\xed\xbc\x2d\x92\xd2\x4e\x8f\x4e\x27\x46\xb9\x9d\x38\xb6\x30\xa8\xe6\xb6\xae\x0b\xd7\x76\x63\xf4\x76\x8c\xf5\x7c\x93\x7a\x4c\x1d\x46\xa9\xe7\xa3\xca\x5a\xce\x24\xa8\x56\xef\xd5\x1c\xd8\xe5\xe1\x7f\xf5\xbe\xcc\xf3\x79\x51\xc9\x79\xfc\x91\xa2\xbd\x93\x44\xe6\x84\xe1\x30\xe8\xdf\x2e\xf5\x4f\xbb\xa6\x69\x1a\x9b\x1d\xbb\x51\x0c\x63\x8f\x8c\xe4\x51\xca\xd0\xaa\x47\xc7\xec\x32\xb2\x58\x0a\x59\xac\xf7\xcb\xb2\xde\x5e\x6d\xb6\xd5\xa3\x6f\xe5\xa3\x13\x09\x7d\xf0\x4e\x43\xa2\xea\x14\x74\xa8\x3a\xc4\x5c\xf9\x44\xc7\x14\xa7\x82\xba\x58\x11\x4e\x3c\xff\xb4\xa4\x27\xa6\x43\xf1\x1c\xb2\xce\xd9\xbd\x06\x03\xf0\x86\x96\x98\x5e\x38\x42\x31\x83\xdf\xcc\xe0\xc1\x05\x94\xcb\x3b\xeb\x20\x11\xe8\x80\xf0\xfe\xf3\xd7\x4f\x37\xd5\xa6\x59\x37\x4f\xe9\x2d\x94\x40\x07\x10\xd4\x95\x01\x38\x0d\xc1\x0f\xe0\xfc\x10\xf0\x88\x1d\x68\xca\xd5\x1a\x1c\x2d\xd5\x0e\x90\x39\x31\xb0\x53\x14\x48\x3d\x5c\x5e\xdb\x57\x17\xf3\xf6\xfa\xca\x5e\x5f\x94\x77\xf9\x65\xc0\xa7\xf3\x7d\x22\x09\xa2\x33\x75\xdf\x7c\x80\x79\x98\xa8\xc8\x32\x6b\x76\x4d\xf3\x0e\x4a\xe3\x89\x04\x9c\xe7\x24\x02\xbb\x17\xad\x44\x77\x2e\x74\x3d\x25\xe8\xa7\x18\xcf\x65\x6c\x84\x5e\xb1\x7b\xd8\xb2\xbf\x02\x00\x00\xff\xff\xd6\x95\x78\x63\x5e\x03\x00\x00"

func caffenetYmlBytes() ([]byte, error) {
	return bindataRead(
		_caffenetYml,
		"caffenet.yml",
	)
}

func caffenetYml() (*asset, error) {
	bytes, err := caffenetYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "caffenet.yml", size: 862, mode: os.FileMode(420), modTime: time.Unix(1497042630, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _inceptionv3Yml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x51\xc1\x6e\x14\x31\x0c\xbd\xe7\x2b\x7c\xe1\xd6\x49\x76\xa6\xbb\x8b\x94\x03\x12\x70\xaa\x04\x3d\x80\xc4\x05\xa1\x2a\xcd\x78\x76\x52\x12\x27\x8a\xbd\xb3\xbb\x7f\x8f\x32\x5b\x2a\x84\x50\xc5\x25\xb2\x5f\xfc\x9e\xed\x67\x72\x09\x2d\xdc\x91\xc7\x22\x21\x93\xf2\x99\xc4\x05\xc2\x6a\x15\x80\x4b\xe3\x7e\xdb\x02\x80\x43\x39\x5a\xa8\x2e\x94\x9a\x9f\xd0\x8b\xd1\x5a\xaf\xb8\xff\x27\x5e\x8a\xdf\x6f\x23\xfe\x41\x6d\xf8\x54\x5d\xc2\x53\xae\x3f\x2d\xa4\x33\xa1\xa8\x05\x2b\x87\x4c\x16\x6e\xf5\x46\xc9\xa5\xa0\x05\x4f\xa4\x02\x95\xa3\x34\xee\x15\x0a\xc9\x1d\x50\x01\x8c\x21\x21\xb5\x7a\xb6\xf0\xbd\xbf\x81\xdb\x1b\x18\x86\xed\xfa\xfc\x50\xa3\x13\xc7\x28\x0f\xcf\xfb\x34\xca\x3d\x8a\x9a\xd0\xc9\xb1\x22\x3f\x1c\x6b\xb4\x30\x8b\x14\x6b\x4c\xab\xd5\x63\x8a\x5e\xa7\x68\xd6\x49\x4c\xca\x23\x46\x36\x6b\xab\x96\xf3\x85\x18\x45\xcb\x59\xd4\xa1\xba\x32\xbf\xc2\xff\x8b\x19\x7e\x5b\xd9\x3d\x92\x79\xf1\xb5\xfb\x70\xdf\xf1\x25\x3d\xe6\xa8\x9f\x38\x93\x3a\x61\x38\xcc\xf2\xda\x58\xff\x2d\xbb\xe9\x87\xbd\x2e\xae\xba\xc4\xaa\xe2\x84\x15\xc9\x23\x37\xfb\xba\x55\x99\xad\x31\xae\x9e\xc3\xa2\x73\x3d\x98\x32\x4e\xa6\xdf\xf5\x83\xde\x6c\x76\xfb\xb7\xba\x8c\x93\x1a\x91\x7d\x0d\xab\x9e\x85\x77\x0a\xe0\x3d\x5d\x3d\xef\x7c\x74\xcc\x61\x0a\xde\xb5\x4f\xf0\x99\x96\x1c\x8f\x2d\x76\x11\x08\xa5\xdd\xb2\x9d\xfb\x65\x1e\x70\x7e\x0e\xb8\x20\xc3\xd0\xeb\xe1\x0d\x48\x2e\x5d\x0f\x8e\x46\xd8\xe9\xfd\x35\xdd\x01\xd6\x9a\x2b\x64\x02\x99\x11\xee\x3e\x7d\xfd\xf6\xe5\x23\x0c\x9b\x7e\x80\xc5\xc5\x30\x5e\x5b\x3d\x9f\x73\x15\x97\xd6\x98\x03\x0b\x43\x9e\x60\xc2\x13\x56\x90\xd9\x11\x0c\xbb\xcf\xb0\x2e\x8e\x82\x95\xb5\xfa\x15\x00\x00\xff\xff\x73\xf4\xed\x90\xcc\x02\x00\x00"

func inceptionv3YmlBytes() ([]byte, error) {
	return bindataRead(
		_inceptionv3Yml,
		"inceptionv3.yml",
	)
}

func inceptionv3Yml() (*asset, error) {
	bytes, err := inceptionv3YmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "inceptionv3.yml", size: 716, mode: os.FileMode(420), modTime: time.Unix(1497042630, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _locationnetYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x4f\x6f\x9b\x4c\x10\xc6\xef\xfb\x29\xe6\x92\x1b\x66\xc1\x38\x89\xcd\xe1\x95\x5e\x55\xad\x14\xa9\xc9\xa1\xea\xa1\x52\x15\x45\xc3\x32\x86\x6d\xf6\x0f\xda\x19\xec\x24\x9f\xbe\x5a\x70\xd3\xf6\xde\x0b\x20\x66\xf7\xf7\x3c\x33\xf3\x04\xf4\xd4\xc2\xe7\x68\x50\x6c\x0c\x0f\x24\xea\x98\xd0\xd3\x39\xa6\xe7\x16\xfc\x4b\x20\x51\x27\x4a\x6c\x63\x68\xa1\x2e\x2b\x25\xaf\x13\xb5\x60\x42\x50\x36\x4c\xb3\xb4\x0a\x60\xfd\x65\x3d\x0e\xa4\x00\x7a\xeb\x29\xe4\xf3\xdc\xc2\xf7\xba\x80\xa6\x80\xed\x76\xb7\x3c\x1e\x55\x8f\x82\x4c\xf2\xb4\xaa\xde\xcf\x4e\xac\xa7\xde\xe2\x87\xe8\x7d\x0c\xac\x8e\x84\x32\x27\xe2\xa7\x39\xb9\x16\x46\x91\x89\x5b\xad\x07\x2b\xe3\xdc\x95\x26\x7a\xed\xdf\xaf\x6c\x3a\x4a\xcf\xe4\xe8\x55\xcb\x2c\x31\x59\x74\xac\x3b\x17\x3b\xed\x91\x85\x92\x1e\x92\xed\xb9\x94\x17\x51\x43\xc2\x69\xfc\x9b\xc8\x4d\x89\x1e\xdf\x62\xc0\x33\xaf\x5c\x6f\x56\x0b\x9b\x5f\x34\xed\x63\x4f\x8e\xf5\x97\x87\xba\xaa\x37\xd7\xcf\xd7\x55\xb5\xe1\x57\xdf\x45\x57\xfe\xe0\x18\xd4\x99\xec\x30\x0a\xff\x13\x6e\x55\xd5\xdb\x72\xc2\x84\x9e\x95\x27\x0c\x4f\xcb\x30\xf3\xfc\xb6\x4d\x79\xb3\x2f\xa0\xae\x6f\xca\xdb\xdb\x43\x01\x75\xd5\x94\x87\xe6\xf0\xa8\x12\x1d\x29\x51\x30\xc4\x79\x05\x9b\xdf\x0e\x04\xc5\x9a\x72\x88\x71\x70\x34\x33\x25\x13\x83\x50\x90\xd5\x4d\x1e\x9c\x4e\xc4\x84\xc9\x8c\x97\x43\x4b\x85\x82\xd6\xd3\xdc\xb1\xce\x05\x7b\x22\xbd\xbb\xde\xed\xf7\xe5\xd4\x1f\x55\x4f\x6c\x92\x9d\x64\x89\xc0\x7f\x0a\xe0\x7f\x98\xc6\x28\x71\xe3\xa2\x41\x67\xdf\x96\xe0\x80\x89\xe1\x14\xdd\x9c\xbf\xd1\x41\xa0\x39\x2d\x2f\xc9\x41\x82\x0e\x99\x7a\x88\x01\x64\x24\xb8\x0b\x86\x16\x1a\x2c\x5a\x42\x26\xaf\xbc\x54\xf0\x67\x0a\xc1\x32\x60\xe7\x08\x24\xc2\x45\x87\xa0\x29\x6f\xae\x20\x1e\xd7\xa8\x31\xa0\x00\x4b\x22\x12\x70\x74\x22\x57\x00\x86\x1e\x76\xfb\xab\x5c\xc8\x5d\xdb\x40\xe1\x52\xcb\xf4\xaf\x23\xbd\x1b\x3a\x23\x83\x24\xb4\x61\xb5\x55\x1f\xee\xe1\xe3\xb7\xbb\x4f\x30\x50\x14\x1c\x06\xea\xd7\x16\x79\x41\x9a\x18\xd8\xb2\x70\x96\x3e\xdc\x16\xcd\xb6\x2e\xaa\xdd\x1e\x96\x7d\x91\x50\xe2\x4c\xff\x19\x00\x00\xff\xff\x15\x4b\x4d\xd8\x48\x03\x00\x00"

func locationnetYmlBytes() ([]byte, error) {
	return bindataRead(
		_locationnetYml,
		"locationnet.yml",
	)
}

func locationnetYml() (*asset, error) {
	bytes, err := locationnetYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locationnet.yml", size: 840, mode: os.FileMode(420), modTime: time.Unix(1497042630, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ninYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\x4d\x6b\xdc\x40\x0c\xbd\xcf\xaf\x78\x97\x42\x0b\xbb\xb6\xf7\xa3\x85\xfa\x50\x08\x85\x42\x2e\x3e\x94\xde\x4a\x09\xea\x58\xb6\xa7\x99\x2f\x46\xda\xdd\xec\xbf\x2f\xe3\x0d\xa1\x04\x9a\x83\xcd\x68\xa4\xf7\xf4\xf4\x34\x91\x02\xf7\x18\x58\x2f\xa9\x3c\xc2\xc5\x97\xe3\xfb\xc1\x0d\x1f\xcc\x54\x28\x70\x8d\x7b\x84\xa7\xc8\x6a\xce\x5c\xc4\xa5\xd8\x63\xd7\x74\x46\xaf\x99\x7b\xd8\x18\x8d\x8b\xf9\xa4\xbd\x01\x6e\x57\x2e\xd0\xcc\x06\x18\x5d\xe0\x58\xeb\xa5\xc7\xcf\xdd\x06\x87\x0d\xf6\xfb\xe3\xfa\xfb\x65\x46\x52\x12\xd6\x87\x9b\x84\xfb\x0a\x19\x58\xcd\xc4\xa4\xa7\xc2\xf2\x70\x2a\xbe\xc7\xa2\x9a\xfb\xb6\xad\xb5\xcd\x18\xbc\x6d\x82\x6f\x57\x25\x6d\x48\x23\x7b\x69\xd7\x56\x35\x96\x6b\x14\xd6\x46\x9f\xd4\xcc\x85\xf2\xf2\x06\xfe\x15\x32\xba\x58\xbf\xad\x5c\xc3\xef\xe4\x9b\x3f\x92\xa2\xb9\xb0\x9b\x17\x7d\x4b\xc4\x7f\x48\xba\xae\xeb\x9a\x4c\x85\x82\x98\xc2\x13\x17\x8e\x96\xa5\x5a\xb3\x5d\x79\xa4\x6f\x5b\x2a\x4f\xee\xdc\xa4\x32\xb7\x79\x9c\xda\xdd\x61\xb7\x6f\x8e\xc7\xae\x3b\x1f\x9a\x3c\x4e\x66\x64\xb1\xc5\x65\x5d\x6d\xfe\x62\x80\xbb\x78\x33\x74\x6b\x3d\x89\xb8\xc9\x59\xaa\x49\xc4\xe7\x55\x89\x96\x53\xb5\x0c\x97\x85\x0b\x43\x02\x79\x8f\xcc\xc5\x72\xd6\x92\xa2\x40\xbc\x1b\x19\xe9\xcc\x05\xeb\xa2\x10\x28\xcb\x06\xe2\x82\xf3\x54\xa0\x09\x84\xaf\xc3\xd0\x18\xe0\xc7\xe2\x04\x1c\x17\xaa\xaa\xe1\x93\x25\x8f\x75\x54\x17\xe7\x0d\xc8\xfb\x74\x71\x71\xc6\x94\x4a\x85\x67\xcf\x05\xaf\x54\x79\xba\x72\x11\xe8\x42\x0a\x2a\x0c\x26\x71\xbc\x36\x71\x51\xb9\xe4\xc2\x7a\x6b\xc4\x2f\x03\xd8\x14\xc5\x89\x0a\xd2\x84\x03\x44\xc9\x3e\xf2\xf8\x4c\xb4\x01\x93\x5d\x6a\xe6\xb2\x38\xbb\xc0\x09\x08\x87\xed\x9a\xfc\x67\xc8\x4a\x39\xdc\x0f\x20\xbb\x38\x3e\xf3\x88\xc3\xc7\xe6\xd3\xe7\x77\x48\x11\xf7\xdf\xee\xbe\x6f\x77\x5d\x57\x5f\xf7\xbe\xdb\x1d\x9b\xbf\x01\x00\x00\xff\xff\x31\x7c\x3b\x90\xf4\x02\x00\x00"

func ninYmlBytes() ([]byte, error) {
	return bindataRead(
		_ninYml,
		"nin.yml",
	)
}

func ninYml() (*asset, error) {
	bytes, err := ninYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "nin.yml", size: 756, mode: os.FileMode(420), modTime: time.Unix(1497042630, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _residualnet152Yml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\x4b\x8f\xd4\x30\x0c\xbe\xe7\x57\xf8\xc2\x6d\x27\x7d\xcc\x74\x41\x3d\x20\x21\x4e\x2b\xa1\x3d\x2c\x88\x0b\x42\xab\x4c\xea\xb6\x59\xf2\x92\xed\xce\xe3\xdf\xa3\xb4\x03\x42\x08\xad\xc4\x25\x8f\xcf\xfe\xbe\x7c\xb1\x1d\x4d\xc0\x1e\x9e\x90\xdd\xb0\x18\xff\x88\xd2\x74\xad\xb2\x29\x8a\x71\x11\xa9\x57\x00\x26\x0c\xf7\x87\x72\x00\x98\xf2\xd2\x03\x19\x97\x29\xbd\xa0\x95\x4a\x6b\xbd\xe2\xf6\x9f\x78\xce\xf6\xfe\xe0\xf1\x0f\x6a\xc1\x47\x32\x01\xcf\x89\x7e\xf4\x10\x2e\x11\x45\x9d\x90\xd8\xa5\xd8\x43\xa3\x6b\x25\xd7\x8c\x3d\xd8\x18\x95\x8b\x79\x91\xc2\xdd\x20\x17\xcc\x84\x0a\x60\x70\x01\x63\xc9\xe7\x1e\xbe\x35\x77\xb0\xbf\x83\xb6\x3d\xac\xcb\x77\x35\x18\x31\x8c\xf2\xbc\x7d\xea\xa1\x50\x1e\x51\xd4\x88\x46\x16\x42\x7e\x5e\xc8\xf7\x30\x8b\xe4\xbe\xaa\x4a\xae\x1e\x82\xb7\x3a\xf8\x6a\x75\x52\x85\x34\xa0\xe7\x6a\x7d\xaa\xdc\xf9\x1a\x19\x45\xcb\x45\xd4\x44\x26\xcf\xaf\xf0\xff\x62\x12\x72\xd9\x9a\xae\xdd\x79\x73\x45\xe2\x1b\xb2\x2b\x08\x5f\xc3\x31\x79\xfd\xc2\x29\xaa\x33\xba\x69\x96\xd7\x9c\xfd\x8f\x72\x5d\xd7\xb5\xce\x86\x4c\x60\x45\x38\x22\x61\xb4\xc8\xa5\x88\xbb\x55\x9c\xfb\xaa\x32\x74\x71\x27\x9d\x68\xaa\xf2\x30\x56\x4d\xd7\xb4\xba\xde\xef\xdf\x75\xa7\x46\xe7\x61\x54\x03\xb2\x25\x97\x65\xed\xc8\x7b\x05\xf0\x21\x6e\xb5\xdf\x59\x6f\x98\xdd\xe8\xac\x29\x41\x88\x28\xa5\x8b\x70\x5c\x9c\x17\x48\x23\x6c\x76\x40\x66\x23\xe0\xd1\x50\x04\xba\x4d\x15\x8c\x4b\xb4\x85\xc4\x70\xd6\xa4\x65\x4b\x85\xb5\xc3\x5c\x26\xe5\xcb\xec\xf8\xb7\xa0\x4d\x91\x1d\x0b\x17\xcd\xae\x69\x6f\xba\x7a\xb3\x82\x91\x31\x1c\x3d\x96\xa0\xcc\xc8\xf8\x8b\xc6\x60\xec\xec\xf0\x84\x0c\x7b\xdd\xbd\x7d\x03\x48\x94\x08\xc8\x08\x42\x8a\xf0\xf0\xe9\xf3\xd7\xa7\x8f\xbb\xb6\x6e\x3a\xad\x7e\x06\x00\x00\xff\xff\x84\x77\xa6\xc7\xf4\x02\x00\x00"

func residualnet152YmlBytes() ([]byte, error) {
	return bindataRead(
		_residualnet152Yml,
		"residualNet152.yml",
	)
}

func residualnet152Yml() (*asset, error) {
	bytes, err := residualnet152YmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "residualNet152.yml", size: 756, mode: os.FileMode(420), modTime: time.Unix(1497042630, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _squeeznetYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\x3b\x6f\xdb\x30\x10\xde\xf9\x2b\x6e\xc9\xe6\x50\x52\x1c\x27\x85\x86\x02\x1d\xbb\x78\xe9\x58\x14\x06\x2d\x9e\xa4\x6b\xf9\x50\xee\x4e\x7e\xe4\xd7\x17\xa4\x91\xbe\x86\xa0\x8b\xc0\x13\xbe\xe7\x91\xc9\x45\xec\xe1\xcb\xcb\x8a\xf8\x8a\x7b\x54\x33\xb2\x8b\x78\xce\xfc\xa3\x87\x78\x49\xa8\xe6\x84\x2c\x94\x53\x0f\x9d\xed\x8c\x5e\x17\xec\x61\x48\xc9\x50\x5a\x56\xed\x0d\xc0\xed\x17\x45\x37\xa1\x01\xf0\x14\x31\x15\xbc\xf4\xf0\xb5\xdb\xc0\x76\x03\x0f\x0f\x8f\xf5\xf3\xcd\x78\xa7\x4e\x50\x0f\x37\xd3\xcf\x85\x52\x2d\xd1\xe9\xca\x28\x87\x95\x43\x0f\xb3\xea\xd2\x37\x4d\xc1\x5a\x1f\xc3\x60\x63\x68\x6a\x92\x26\x66\x8f\x41\x9a\x6a\x55\x66\xb9\x26\x41\xb5\x7a\x51\x33\xb1\x5b\xe6\x77\xf8\xff\x32\x6f\x7d\xff\x3e\x1e\x4e\x9d\xed\xee\xe5\x1a\x8f\x39\xd8\xef\x92\x93\x39\x23\x4d\xb3\xbe\x97\xeb\xff\x75\xdb\xb6\x6d\xed\xe2\xd8\x45\x31\x8c\x23\x32\xa6\x01\xa5\x2c\xf0\xbe\x4a\x4b\xdf\x34\x8e\x2f\x74\xb2\x99\xa7\x66\xf1\x63\xd3\x3d\xb5\x0f\xb6\x7d\xde\x3e\xb5\xa7\x47\xbb\xf8\xd1\x78\x94\x81\x69\xd1\x7a\x1b\x1f\x0d\xbc\x5d\x5b\x42\x05\x37\xcc\x84\x27\x14\x10\x8a\x14\x1c\x03\xa3\xac\x41\x05\x34\xc3\xa7\x80\x97\x3d\xea\x06\x9c\xc2\xae\xbd\xc0\x88\x67\x64\xa8\x59\x50\x91\x05\x5c\xf2\xd0\x35\xbb\xb6\xd5\x19\x74\x46\x10\x7a\x45\x5b\xf4\xa3\x0b\x01\x6e\x25\xc1\x31\x42\xcc\x8c\x30\xa2\x13\x3a\x06\x2c\xd2\x1e\x97\x90\xaf\x90\x13\xcc\x8e\xfd\xb9\x60\xce\xa4\x33\x04\x8a\xa4\xe8\x21\x62\xcc\x7c\xdd\x00\xe3\xcb\x4a\x8c\x10\x50\xc4\x00\x0c\x39\xc6\x35\xd1\xe0\x4a\x17\xf0\x2b\x53\x9a\xc0\x93\x28\xd3\x71\x2d\x3c\x65\x47\x89\xd2\xb4\xa9\xd9\x8a\x6c\x31\x45\xae\x9e\xbf\x70\x65\x1a\x02\x61\x52\xb1\xbf\xd7\xb1\xff\x73\x1d\xbb\x67\xbb\xbb\xab\x22\x1f\x5a\xbb\xbd\x03\xcd\xcb\x7d\x57\xe7\x72\xda\x81\x1b\x56\x76\x83\xd6\x0a\x6f\x0f\xd2\x1a\x03\xf0\x33\x00\x00\xff\xff\x7a\x8f\xb3\xfe\x19\x03\x00\x00"

func squeeznetYmlBytes() ([]byte, error) {
	return bindataRead(
		_squeeznetYml,
		"squeeznet.yml",
	)
}

func squeeznetYml() (*asset, error) {
	bytes, err := squeeznetYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "squeeznet.yml", size: 793, mode: os.FileMode(420), modTime: time.Unix(1497034308, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vgg16Yml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x91\xbf\x6e\xdc\x30\x0c\xc6\x77\x3d\x05\x97\x6e\x39\xd9\xbe\x9c\x8d\x56\x43\x81\x4e\x87\x2e\x1d\xb3\x14\x45\xc0\xca\xb4\xad\x54\xff\x20\xd2\xce\xdd\xdb\x17\xf2\x25\x45\x50\xb4\x19\x24\x50\x3f\xf1\xa3\x28\x7e\x11\x03\x19\x78\x38\x9f\xbb\x41\xd9\x14\x05\x5d\xa4\x62\x14\x00\x86\x71\x38\xd5\x00\x60\xce\xab\x81\x82\x2e\x97\xf4\x44\x56\x1a\xad\xf5\xce\xed\x3f\x79\xce\x76\x38\x79\x7a\x23\xad\x7c\x2a\x18\xe8\x39\x95\x5f\x06\xc2\x25\x92\xa8\x8d\x0a\xbb\x14\x0d\x74\xba\x55\x72\xcd\x64\xc0\xc6\xa8\x5c\xcc\xab\x54\xed\x0d\xb9\x80\x33\x29\x80\xd1\x05\x8a\x35\x9f\x0d\x7c\xef\xee\xe0\xfe\x0e\x8e\xc7\xd3\xbe\xfd\x50\x23\x0a\x32\xc9\xe3\xed\x2f\x5f\xab\xe4\x1b\x89\x9a\x08\x65\x2d\xc4\x8f\x6b\xf1\x06\x16\x91\x6c\x9a\xa6\xe6\xea\x31\x78\xab\x83\x6f\xf6\x4e\x9a\x90\x46\xf2\xdc\xec\x4f\xd5\x33\x5f\x23\x93\x68\xb9\x88\x9a\x0b\xe6\xe5\x1d\xfd\x5f\xca\x6d\x9e\xeb\xea\x86\x03\x5f\xc3\xcf\xe4\xf5\x13\xa7\xa8\x9e\xc9\xcd\x8b\xbc\xd7\xc6\x7f\xcb\xb4\x6d\xdb\xea\x8c\x05\x03\xab\x42\x13\x15\x8a\x96\xb8\x8e\xe7\xb0\x57\x62\xd3\x34\x58\x2e\x6e\xd3\xa9\xcc\x4d\x1e\xa7\xa6\x3b\xb5\x9f\x74\xd7\xf7\xc3\x36\xe8\x3c\x4e\x6a\x24\xb6\xc5\x65\xd9\x47\xfd\x59\x01\x7c\x89\xb7\xa1\x1e\xac\x47\x66\x37\x39\x8b\xf5\x12\x6c\x8a\x5b\xf2\x6b\x8d\xd1\x43\x24\xa9\x66\x55\x3f\x1f\xce\x67\x58\x99\x18\xf0\x95\xc2\xb3\x93\x05\xba\x01\x3c\x5e\xa9\x30\xa4\x09\xee\x2f\xf7\x6f\x2b\xc0\xe4\xbc\x50\xe1\x57\x3d\xda\xc5\xd1\x46\x0c\xc7\x5e\xf7\x1f\x40\x52\x3e\x74\x40\xa5\xa4\x02\x18\x47\xf8\xa8\xdb\x1b\xec\x5f\x60\x8a\x20\x0b\xfd\xb1\x12\xec\x82\xde\x53\x9c\x09\x5e\xbc\x06\x17\xe1\xd8\x76\xbd\x56\xbf\x03\x00\x00\xff\xff\xce\xf2\x68\x4a\xc1\x02\x00\x00"

func vgg16YmlBytes() ([]byte, error) {
	return bindataRead(
		_vgg16Yml,
		"vgg16.yml",
	)
}

func vgg16Yml() (*asset, error) {
	bytes, err := vgg16YmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vgg16.yml", size: 705, mode: os.FileMode(420), modTime: time.Unix(1497042630, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vgg19Yml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x51\xbd\x8e\xdc\x3c\x0c\xec\xf5\x14\x6c\xbe\xee\x56\xb6\x76\xcf\x87\x6f\x55\x04\x48\x75\x48\x93\x32\x4d\x10\x1c\x18\x99\xb6\x95\xe8\x0f\x22\xed\xdd\x7d\xfb\x40\xde\xbb\x20\x08\x90\x2b\x24\x48\x43\xce\x90\x98\x49\x18\xc9\xc2\x97\xe7\x67\x73\x56\x53\xc5\x48\x97\x5c\x7f\x5a\x88\xd7\x44\xa2\x36\xaa\xec\x73\xb2\x60\x74\xaf\xe4\x56\xc8\x82\x4b\x49\xf9\x54\x56\xb1\x0a\xe0\x0e\xf9\x88\x33\x29\x80\xd1\x47\x4a\xad\x9f\x2d\x7c\x35\x0f\x70\x7a\x80\xe3\xf1\x71\xbf\xbe\xa9\x11\x05\x99\xe4\xe5\x3e\xef\x53\xa3\x7c\x26\x51\x13\xa1\xac\x95\xf8\x65\xad\xc1\xc2\x22\x52\x6c\xd7\xb5\x5e\x3d\xc6\xe0\x74\x0c\xdd\xbe\x49\x17\xf3\x48\x81\xbb\x7d\x54\xfb\xf3\x2d\x31\x89\x96\xab\xa8\xb9\x62\x59\xde\xe1\xff\xc5\xdc\xe6\xb9\x1d\x73\x3e\xf0\x2d\x7e\xcf\x41\xff\xe0\x9c\xd4\x85\xfc\xbc\xc8\x7b\x6b\xfc\x53\xa6\xef\xfb\x5e\x17\xac\x18\x59\x55\x9a\xa8\x52\x72\xc4\xcd\x9e\xc3\xae\xc4\xb6\xeb\xb0\x5e\xfd\xa6\x73\x9d\xbb\x32\x4e\x9d\x79\xec\xcf\xda\x0c\xc3\xd3\xf6\xa4\xcb\x38\xa9\x91\xd8\x55\x5f\x64\xb7\xfa\x83\x02\xf8\x98\xee\xa6\x1e\x5c\x40\x66\x3f\x79\x87\xad\x08\x2e\xa7\x2d\x87\xb5\xbd\x31\x40\x22\x69\x61\x69\x05\x2d\x3f\x58\x99\x18\xf0\x0d\x85\x8b\x97\x05\xcc\x19\x02\xde\xa8\x32\xe4\x09\x4e\xd7\xd3\x9f\x0a\x30\xf9\x20\x54\xf9\x8d\x8f\x6e\xf1\xb4\x11\xc3\x71\xd0\xc3\x7f\x20\xb9\x1c\x0c\x50\xad\xb9\x02\xa6\x11\xfe\xd7\xfd\x1d\x1c\x5e\xc1\x9c\x40\x16\xfa\x1d\x25\xb8\x05\x43\xa0\x34\x13\xbc\x66\x0d\x3e\xc1\xb1\x37\x83\xfe\x15\x00\x00\xff\xff\x5d\x84\xda\x7e\x64\x02\x00\x00"

func vgg19YmlBytes() ([]byte, error) {
	return bindataRead(
		_vgg19Yml,
		"vgg19.yml",
	)
}

func vgg19Yml() (*asset, error) {
	bytes, err := vgg19YmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vgg19.yml", size: 612, mode: os.FileMode(420), modTime: time.Unix(1497042630, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"README.md": readmeMd,
	"caffenet.yml": caffenetYml,
	"inceptionv3.yml": inceptionv3Yml,
	"locationnet.yml": locationnetYml,
	"nin.yml": ninYml,
	"residualNet152.yml": residualnet152Yml,
	"squeeznet.yml": squeeznetYml,
	"vgg16.yml": vgg16Yml,
	"vgg19.yml": vgg19Yml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"README.md": &bintree{readmeMd, map[string]*bintree{}},
	"caffenet.yml": &bintree{caffenetYml, map[string]*bintree{}},
	"inceptionv3.yml": &bintree{inceptionv3Yml, map[string]*bintree{}},
	"locationnet.yml": &bintree{locationnetYml, map[string]*bintree{}},
	"nin.yml": &bintree{ninYml, map[string]*bintree{}},
	"residualNet152.yml": &bintree{residualnet152Yml, map[string]*bintree{}},
	"squeeznet.yml": &bintree{squeeznetYml, map[string]*bintree{}},
	"vgg16.yml": &bintree{vgg16Yml, map[string]*bintree{}},
	"vgg19.yml": &bintree{vgg19Yml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

