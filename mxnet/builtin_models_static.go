// Code generated by go-bindata.
// sources:
// builtin_models/caffenet.yml
// builtin_models/locationnet.yml
// builtin_models/nin.yml
// builtin_models/squeeznet.yml
// builtin_models/vgg19.yml
// DO NOT EDIT!

package mxnet

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _caffenetYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\xc1\x6e\xd4\x30\x10\xbd\xfb\x2b\xe6\xd2\x5b\xe3\x24\xdb\xdd\xa5\xcd\x01\x09\xf5\x84\xa0\x1c\x00\x71\x41\xa8\x32\xce\x64\xe3\xe2\xd8\xd6\xcc\x64\xb7\xf9\x7b\x64\x67\x5b\x15\x84\x40\x5c\x92\xf1\xf3\x7b\xe3\x99\x79\x13\xcc\x84\x1d\xdc\x9a\x61\xc0\x0f\x28\xca\xc6\x20\xc6\x05\xa4\x4e\x01\x98\xa9\xdf\x6f\x73\x00\x70\x48\x73\x07\x64\x5c\xa2\xf8\x80\x56\x6a\xad\x75\xc1\xed\x1f\xf1\x94\xec\x7e\xeb\xf1\x85\x34\xe3\x03\x99\x09\x4f\x91\x7e\x74\x30\x3d\x06\x14\x75\x44\x62\x17\x43\x07\xad\x6e\x94\x2c\x09\x3b\xb0\x21\x28\x17\xd2\x2c\x59\xbb\x42\x6e\x32\x07\x54\x00\xbd\x9b\x30\x64\x3e\x77\xf0\xb5\xbd\x84\xab\x4b\xd8\x6c\xb6\xe5\xf3\x4d\xf5\x46\x0c\xa3\xdc\xaf\xed\xbc\xcd\x92\xdc\xce\x80\x46\x66\x42\xbe\x9f\xc9\x77\x30\x8a\xa4\xae\xae\x33\x57\xf7\x93\xb7\x7a\xf2\x75\xa9\xa4\x9e\x62\x8f\x9e\xeb\xf2\x54\x3e\xf3\x12\x18\x45\xcb\xa3\xa8\x03\x99\x34\xfe\xaf\xde\xe6\x79\xbe\x0c\x2a\x5e\xa6\xef\xd1\xeb\x07\x8e\x41\x9d\xd0\x1d\x46\xf9\x5b\x51\xff\x4c\xd7\x34\x4d\xa3\x93\x21\x33\xb1\x22\x1c\x90\x30\x58\xe4\x3c\xb4\xea\x29\x63\x32\x09\x89\x75\x70\x89\xb5\xb5\xeb\xb1\xde\x5e\x6f\xb6\xd5\x53\xde\xca\x7a\xc3\xec\x06\x67\x8d\xb8\x18\xaa\x93\x93\xb1\xea\x11\x53\x65\x63\x38\x46\x3f\x67\xd4\xf8\x2a\xe0\x4c\xe5\x27\xd9\x3d\x56\x3d\xb2\x25\x97\xa4\x78\xf7\x1a\x14\xc0\x1b\xc8\x32\xf8\x45\x06\x67\x3e\x08\xe5\x8d\xea\x41\x22\x9c\x1f\x5c\xa0\xd5\x57\x77\xab\xb3\x0c\x2e\x80\x8c\x08\xef\x3f\x7d\xf9\x78\x5b\x6d\x9a\xb6\x79\xf6\x6f\x95\xba\x70\x00\x46\xb9\x54\x00\xa7\xd1\xd9\x11\x8c\x1d\x1d\x1e\x4b\xc6\x54\xb5\x60\xc2\x1a\xed\x00\x89\x22\x01\x19\x41\x86\x38\xc0\xd5\x8d\x7e\x75\x51\xae\xdb\x6b\x7d\x73\x91\x37\xf3\xf3\x88\xcf\x75\xd9\x18\xd8\xb1\x14\xea\xbe\xb9\x83\x32\x4e\x14\x24\x2e\x9a\x5d\xd3\xbc\x83\xdc\x7a\x0c\x0c\xc6\x52\x64\x86\xdd\x6f\x2d\x7a\xb3\x64\xba\x9c\x22\x0c\xb3\xf7\x4b\x1e\x5c\x40\x2b\xd8\x9f\xaf\xf4\xcf\x00\x00\x00\xff\xff\xcd\x81\xfc\x89\x60\x03\x00\x00"

func caffenetYmlBytes() ([]byte, error) {
	return bindataRead(
		_caffenetYml,
		"caffenet.yml",
	)
}

func caffenetYml() (*asset, error) {
	bytes, err := caffenetYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "caffenet.yml", size: 864, mode: os.FileMode(420), modTime: time.Unix(1497034308, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _locationnetYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x52\xc1\x6a\xdb\x40\x10\xbd\xef\x57\xcc\x25\xd0\x82\xad\x95\x6c\x27\xb1\x75\x28\x94\xd2\x42\x20\xc9\xa1\xf4\x50\x28\x21\x8c\x56\x63\x69\x9b\xdd\x1d\xb1\x33\xb2\x93\x7c\x7d\x91\x9c\xa4\xe4\xd0\x5b\x2f\x12\xcc\x9b\xf7\xf6\xf1\xe6\x25\x8c\x54\xc3\x35\x3b\x54\xcf\xe9\x96\xd4\xec\x33\x46\x3a\x72\x7e\xa8\x21\x3e\x26\x52\x73\xa0\x2c\x9e\x53\x0d\x55\x51\x1a\x7d\x1a\xa8\x06\x97\x92\xf1\x69\x18\xb5\x36\x00\xa7\x91\x8f\xd8\x91\x01\x68\x7d\xa4\x34\xed\x4b\x0d\xbf\xaa\x05\xac\x17\xb0\x5a\x6d\xe6\xcf\x9d\x69\x51\x51\x48\xef\x4f\xaf\xde\x8c\x41\x7d\xa4\xd6\xe3\x17\x8e\x91\x93\x98\x3d\xa1\x8e\x99\xe4\x7e\xcc\xa1\x86\x5e\x75\x90\xda\xda\xce\x6b\x3f\x36\x85\xe3\x68\xe3\x1b\x65\xd9\x50\x7e\xa0\x40\x4f\x56\x47\xe5\xec\x31\x88\x6d\x02\x37\x36\xa2\x28\x65\xdb\x65\xdf\x4a\xa1\x8f\x6a\xba\x8c\x43\xff\x5e\x51\xd6\x05\x46\x7c\xe6\x84\x47\x39\xe9\x46\x77\xb2\xb0\x7c\x55\xb3\x91\x5b\x0a\x62\xbf\xdf\x56\x65\xb5\x3c\x7f\x38\x2f\xcb\xa5\x3c\xc5\x86\x43\xf1\x5b\x38\x99\x23\xf9\xae\x57\xf9\x2f\xba\x65\x59\xad\x8a\x01\x33\x46\x31\x91\x30\xdd\xcf\x61\x4e\xf9\xad\xd6\xc5\xc5\x76\x01\x55\x75\x51\x5c\x5e\xee\x16\x50\x95\xeb\x62\xb7\xde\xdd\x99\x4c\x7b\xca\x94\x1c\xc9\x74\x82\xe5\x5f\x07\x8a\xea\x5d\xd1\x31\x77\x81\x46\xa1\xec\x38\x29\x25\x3d\xb9\x99\x82\xb3\x99\x84\x30\xbb\xfe\x65\x69\x46\x28\x59\x3b\x8c\x8d\xd8\x09\xf0\x07\xb2\x9b\xf3\xcd\x76\x5b\x0c\xed\xde\xb4\x24\x2e\xfb\x41\xe7\x0a\x7c\x32\x00\x9f\xc1\x71\x3a\x70\x18\xa7\x11\x06\x48\x34\xe6\xf9\xa7\x53\x6b\xe0\x43\x83\x42\x2d\x70\x02\xed\x09\xae\x92\xa3\x99\x0b\xb3\xb2\x92\x9b\x0e\xfc\x11\x34\xa3\x4f\xd4\x82\x32\x04\x76\x18\xfc\x33\xc1\xd0\xb3\xb2\x14\x06\xe0\x47\x4f\x6f\x7a\x47\x94\xb7\x6d\x4e\x50\xed\x6e\xe0\xeb\xcf\xab\x6f\xd0\x11\x2b\x76\x1d\xb5\xff\xe0\x39\x4e\xe2\x45\x05\x78\x0f\xbb\xcb\xc5\x7a\x55\x2d\xca\xcd\x16\xe6\x98\x49\x29\xcf\x84\x6b\x7e\xed\x3d\x78\x01\x6c\x02\xbd\x73\xb4\x2e\x2e\xce\x26\xfe\x7c\x0f\x01\x54\x10\xcd\x44\x0a\x81\x0e\x14\x16\x80\xa9\x85\xcd\xf6\x6c\x02\xa6\x9c\x7d\xa2\xf4\x82\x15\x7f\x02\x00\x00\xff\xff\xfb\x1f\x2d\x46\x59\x03\x00\x00"

func locationnetYmlBytes() ([]byte, error) {
	return bindataRead(
		_locationnetYml,
		"locationnet.yml",
	)
}

func locationnetYml() (*asset, error) {
	bytes, err := locationnetYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locationnet.yml", size: 857, mode: os.FileMode(420), modTime: time.Unix(1497034308, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ninYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\x4d\x8b\x14\x41\x0c\xbd\xd7\xaf\xc8\x45\x50\x98\xa9\xee\xf9\x50\xb0\x0f\x82\x08\xc2\x5e\xfa\x20\xde\x44\x96\x58\x9d\x9e\x8e\x5b\x5f\x24\x99\x99\x9d\x7f\x2f\xd5\xbb\xee\x41\x70\x0f\xdd\x54\x2a\x79\x79\x2f\x2f\x95\x31\xd1\x00\x23\xd9\xb5\xc8\x03\x70\x7e\x39\xbe\x1d\x79\x7c\xe7\x66\xc1\x44\x2d\x1e\x20\x3d\x66\x32\x77\x21\x51\x2e\x79\x80\x9d\xef\x9d\xdd\x2a\x0d\x10\x72\x76\x9c\xeb\xd9\x06\x07\xf0\x74\xc5\x09\x4f\xe4\x00\x26\x4e\x94\x5b\xbd\x0e\xf0\x63\xb7\x81\xc3\x06\xf6\xfb\xe3\xfa\xfb\xe9\x26\x34\x54\xb2\xfb\x27\x09\x77\x0d\x32\x92\xb9\x99\xd0\xce\x42\x7a\x7f\x96\x38\xc0\x62\x56\x87\xae\x6b\xb5\x7e\x4a\x31\xf8\x14\xbb\x55\x49\x97\xca\x44\x51\xbb\x95\xaa\xc5\x7a\xcb\x4a\xe6\xed\xd1\xdc\x49\xb0\x2e\xaf\xe0\xff\x41\x66\xce\xed\xdb\xea\x2d\xfd\x2a\xd1\xff\xd6\x92\xdd\x95\xf8\xb4\xd8\x6b\x22\xfe\xd3\xa4\xef\xfb\xde\x57\x14\x4c\xea\x84\x66\x12\xca\x81\xb4\x59\xb3\x5d\xfb\xe8\xd0\x75\x28\x8f\x7c\xf1\x45\x4e\x5d\x9d\xe6\x6e\x77\xd8\xed\xfd\xf1\xd8\xf7\x97\x83\xaf\xd3\xec\x26\xd2\x20\x5c\x6d\xb5\xf9\x93\x03\x18\xef\x46\x38\x2b\x29\x20\xe4\xe7\xed\xa8\xc9\xb9\xb9\x04\xd7\x85\x84\x40\x13\xc6\xf8\x37\xa9\x80\x42\x0d\x30\x81\x15\xd0\xc8\x13\x41\xb9\x90\xc0\xba\x24\x48\x58\x75\x03\xca\x89\x23\x4a\xab\x40\xf8\x32\x8e\xde\x01\x7c\x5f\x58\x81\xf2\x82\x99\x14\x62\x09\x18\x61\x9d\x92\xf3\x69\x03\x18\x63\xb9\x72\x3e\xc1\x5c\xa4\xa1\x6b\x24\x81\x10\x51\x95\x67\x0e\xd8\xd4\x42\xc4\x1b\x89\x82\x2d\x68\xab\x06\x42\x65\x5a\x39\x38\x1b\x49\x15\xb2\x27\x1e\x7a\x19\x24\x94\xac\xac\xa6\x50\x66\x38\x80\x1a\x86\x07\x9a\x9e\x1b\x6d\x80\x30\x2c\x2d\x73\x5d\x38\x2c\xc0\xcd\x81\xc3\x76\x4d\x42\x25\x09\x54\x4d\x4a\xf6\xcf\x16\x61\x58\x98\x2e\x34\xc1\xe1\xbd\xff\xf0\xf1\x0d\x94\x0c\x77\x5f\x3f\x7f\xdb\xee\xfa\xbe\x3d\xec\x7d\xbf\x3b\xfa\x3f\x01\x00\x00\xff\xff\x2a\x38\xa4\x19\xef\x02\x00\x00"

func ninYmlBytes() ([]byte, error) {
	return bindataRead(
		_ninYml,
		"nin.yml",
	)
}

func ninYml() (*asset, error) {
	bytes, err := ninYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "nin.yml", size: 751, mode: os.FileMode(420), modTime: time.Unix(1497034308, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _squeeznetYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\x3b\x6f\xdb\x30\x10\xde\xf9\x2b\x6e\xc9\xe6\x50\x52\x1c\x27\x85\x86\x02\x1d\xbb\x78\xe9\x58\x14\x06\x2d\x9e\xa4\x6b\xf9\x50\xee\x4e\x7e\xe4\xd7\x17\xa4\x91\xbe\x86\xa0\x8b\xc0\x13\xbe\xe7\x91\xc9\x45\xec\xe1\xcb\xcb\x8a\xf8\x8a\x7b\x54\x33\xb2\x8b\x78\xce\xfc\xa3\x87\x78\x49\xa8\xe6\x84\x2c\x94\x53\x0f\x9d\xed\x8c\x5e\x17\xec\x61\x48\xc9\x50\x5a\x56\xed\x0d\xc0\xed\x17\x45\x37\xa1\x01\xf0\x14\x31\x15\xbc\xf4\xf0\xb5\xdb\xc0\x76\x03\x0f\x0f\x8f\xf5\xf3\xcd\x78\xa7\x4e\x50\x0f\x37\xd3\xcf\x85\x52\x2d\xd1\xe9\xca\x28\x87\x95\x43\x0f\xb3\xea\xd2\x37\x4d\xc1\x5a\x1f\xc3\x60\x63\x68\x6a\x92\x26\x66\x8f\x41\x9a\x6a\x55\x66\xb9\x26\x41\xb5\x7a\x51\x33\xb1\x5b\xe6\x77\xf8\xff\x32\x6f\x7d\xff\x3e\x1e\x4e\x9d\xed\xee\xe5\x1a\x8f\x39\xd8\xef\x92\x93\x39\x23\x4d\xb3\xbe\x97\xeb\xff\x75\xdb\xb6\x6d\xed\xe2\xd8\x45\x31\x8c\x23\x32\xa6\x01\xa5\x2c\xf0\xbe\x4a\x4b\xdf\x34\x8e\x2f\x74\xb2\x99\xa7\x66\xf1\x63\xd3\x3d\xb5\x0f\xb6\x7d\xde\x3e\xb5\xa7\x47\xbb\xf8\xd1\x78\x94\x81\x69\xd1\x7a\x1b\x1f\x0d\xbc\x5d\x5b\x42\x05\x37\xcc\x84\x27\x14\x10\x8a\x14\x1c\x03\xa3\xac\x41\x05\x34\xc3\xa7\x80\x97\x3d\xea\x06\x9c\xc2\xae\xbd\xc0\x88\x67\x64\xa8\x59\x50\x91\x05\x5c\xf2\xd0\x35\xbb\xb6\xd5\x19\x74\x46\x10\x7a\x45\x5b\xf4\xa3\x0b\x01\x6e\x25\xc1\x31\x42\xcc\x8c\x30\xa2\x13\x3a\x06\x2c\xd2\x1e\x97\x90\xaf\x90\x13\xcc\x8e\xfd\xb9\x60\xce\xa4\x33\x04\x8a\xa4\xe8\x21\x62\xcc\x7c\xdd\x00\xe3\xcb\x4a\x8c\x10\x50\xc4\x00\x0c\x39\xc6\x35\xd1\xe0\x4a\x17\xf0\x2b\x53\x9a\xc0\x93\x28\xd3\x71\x2d\x3c\x65\x47\x89\xd2\xb4\xa9\xd9\x8a\x6c\x31\x45\xae\x9e\xbf\x70\x65\x1a\x02\x61\x52\xb1\xbf\xd7\xb1\xff\x73\x1d\xbb\x67\xbb\xbb\xab\x22\x1f\x5a\xbb\xbd\x03\xcd\xcb\x7d\x57\xe7\x72\xda\x81\x1b\x56\x76\x83\xd6\x0a\x6f\x0f\xd2\x1a\x03\xf0\x33\x00\x00\xff\xff\x7a\x8f\xb3\xfe\x19\x03\x00\x00"

func squeeznetYmlBytes() ([]byte, error) {
	return bindataRead(
		_squeeznetYml,
		"squeeznet.yml",
	)
}

func squeeznetYml() (*asset, error) {
	bytes, err := squeeznetYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "squeeznet.yml", size: 793, mode: os.FileMode(420), modTime: time.Unix(1497034308, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vgg19Yml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x91\x3f\x8f\xdb\x30\x0c\xc5\x77\x7d\x0a\x2e\xdd\x2e\x92\x95\x9c\x0f\x8d\x86\xae\x87\x2e\x1d\xbb\x14\xc5\x41\xb5\x69\x5b\xad\xfe\x81\xa4\x9d\xe4\xdb\x17\x72\x82\x0e\x05\xee\x06\x09\xe0\x03\x7f\x24\xf1\x5e\xf6\x09\x1d\x7c\x7f\x7d\xb5\x67\x35\x91\x4f\x78\x29\xf4\xc7\x41\xba\x66\x14\xb5\x21\x71\x28\xd9\x81\xd5\x9d\x92\x5b\x45\x07\x43\xce\x2a\xe4\xba\x8a\x53\x00\x77\x29\x24\x3f\xa3\x02\x18\x43\xc2\xdc\xfa\xd9\xc1\x0f\xfb\x04\xa7\x27\x38\x1e\x9f\xf7\xef\xa7\x1a\xbd\x78\x46\x79\xbb\xef\xfb\xda\x90\x6f\x28\x6a\x42\x2f\x2b\x21\xbf\xad\x14\x1d\x2c\x22\xd5\x19\xd3\x7a\xf5\x98\xe2\xa0\x53\x34\xfb\x25\x26\x95\x11\x23\x9b\x7d\x55\xab\xf9\x96\x19\x45\xcb\x55\xd4\x4c\xbe\x2e\x1f\xf0\xff\x91\xdb\x3c\xb7\x67\xcf\x07\xbe\xa5\x5f\x25\xea\xdf\x5c\xb2\xba\x60\x98\x17\xf9\xe8\x8c\x77\xc7\x74\x5d\xd7\xe9\xea\xc9\x27\x56\x84\x13\x12\xe6\x01\xb9\xd9\x73\xd8\x27\xb1\x33\xc6\xd3\x35\x6c\xba\xd0\x6c\xea\x38\x19\xfb\xdc\x9d\xb5\xed\xfb\x97\xed\x45\xd7\x71\x52\x23\xf2\x40\xa1\xca\x6e\xf5\x17\x05\x2d\x0e\x58\x19\x19\x3c\x64\x94\x96\x08\x5c\x82\x2c\x60\xcf\x10\xfd\x0d\x89\xa1\x4c\x70\xba\x9e\x60\x28\x79\x2b\x71\x6d\x24\x4c\x21\x0a\x12\xeb\x07\xef\x87\x25\xe0\x86\x0c\xc7\x5e\xf7\x9f\x40\x4a\x3d\x58\x40\xa2\x42\xe0\xf3\x08\x9f\x75\x77\x17\xfb\x87\x58\x32\xc8\x82\xff\x92\x81\x61\xf1\x31\x62\x9e\x11\x1e\xd1\x41\xc8\x70\xec\x6c\xaf\xff\x06\x00\x00\xff\xff\x32\x1a\x87\xba\x33\x02\x00\x00"

func vgg19YmlBytes() ([]byte, error) {
	return bindataRead(
		_vgg19Yml,
		"vgg19.yml",
	)
}

func vgg19Yml() (*asset, error) {
	bytes, err := vgg19YmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vgg19.yml", size: 563, mode: os.FileMode(420), modTime: time.Unix(1497034308, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"caffenet.yml": caffenetYml,
	"locationnet.yml": locationnetYml,
	"nin.yml": ninYml,
	"squeeznet.yml": squeeznetYml,
	"vgg19.yml": vgg19Yml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"caffenet.yml": &bintree{caffenetYml, map[string]*bintree{}},
	"locationnet.yml": &bintree{locationnetYml, map[string]*bintree{}},
	"nin.yml": &bintree{ninYml, map[string]*bintree{}},
	"squeeznet.yml": &bintree{squeeznetYml, map[string]*bintree{}},
	"vgg19.yml": &bintree{vgg19Yml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

