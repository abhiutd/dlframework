// Code generated by protoc-gen-gogo.
// source: mxnet.proto
// DO NOT EDIT!

/*
	Package mxnet is a generated protocol buffer package.

	It is generated from these files:
		mxnet.proto

	It has these top-level messages:
		ErrorStatus
		ContainerArchicture
		Model
		ModelInformations
		MXNetInferenceRequest
		Feature
		MXNetInferenceResponse
		MXNetModelInformationRequest
		Null
*/
package mxnet

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import bytes "bytes"

import strings "strings"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ErrorStatus struct {
	Ok      bool   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty" yaml:"ok,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty" yaml:"message,omitempty"`
}

func (m *ErrorStatus) Reset()                    { *m = ErrorStatus{} }
func (*ErrorStatus) ProtoMessage()               {}
func (*ErrorStatus) Descriptor() ([]byte, []int) { return fileDescriptorMxnet, []int{0} }

func (m *ErrorStatus) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *ErrorStatus) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ContainerArchicture struct {
	Gpu string `protobuf:"bytes,1,opt,name=gpu,proto3" json:"gpu,omitempty" yaml:"gpu,omitempty"`
	Cpu string `protobuf:"bytes,2,opt,name=cpu,proto3" json:"cpu,omitempty" yaml:"cpu,omitempty"`
}

func (m *ContainerArchicture) Reset()                    { *m = ContainerArchicture{} }
func (*ContainerArchicture) ProtoMessage()               {}
func (*ContainerArchicture) Descriptor() ([]byte, []int) { return fileDescriptorMxnet, []int{1} }

func (m *ContainerArchicture) GetGpu() string {
	if m != nil {
		return m.Gpu
	}
	return ""
}

func (m *ContainerArchicture) GetCpu() string {
	if m != nil {
		return m.Cpu
	}
	return ""
}

type Model struct {
}

func (m *Model) Reset()                    { *m = Model{} }
func (*Model) ProtoMessage()               {}
func (*Model) Descriptor() ([]byte, []int) { return fileDescriptorMxnet, []int{2} }

type Model_Input struct {
	Type       string  `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty" yaml:"type,omitempty"`
	Dimensions []int64 `protobuf:"varint,2,rep,packed,name=dimensions" json:"dimensions,omitempty" yaml:"dimensions,omitempty"`
}

func (m *Model_Input) Reset()                    { *m = Model_Input{} }
func (*Model_Input) ProtoMessage()               {}
func (*Model_Input) Descriptor() ([]byte, []int) { return fileDescriptorMxnet, []int{2, 0} }

func (m *Model_Input) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Model_Input) GetDimensions() []int64 {
	if m != nil {
		return m.Dimensions
	}
	return nil
}

type Model_Output struct {
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty" yaml:"type,omitempty"`
}

func (m *Model_Output) Reset()                    { *m = Model_Output{} }
func (*Model_Output) ProtoMessage()               {}
func (*Model_Output) Descriptor() ([]byte, []int) { return fileDescriptorMxnet, []int{2, 1} }

func (m *Model_Output) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type Model_Information struct {
	Name        string                          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	Description string                          `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty" yaml:"description,omitempty"`
	Container   map[string]*ContainerArchicture `protobuf:"bytes,3,rep,name=container" json:"container,omitempty" yaml:"container,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	Framework   string                          `protobuf:"bytes,4,opt,name=framework,proto3" json:"framework,omitempty" yaml:"framework,omitempty"`
	Version     string                          `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty" yaml:"version,omitempty"`
	Type        string                          `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty" yaml:"type,omitempty"`
	DatasetName string                          `protobuf:"bytes,7,opt,name=dataset_name,json=datasetName,proto3" json:"dataset_name,omitempty" yaml:"dataset_name,omitempty"`
	GraphUrl    string                          `protobuf:"bytes,8,opt,name=graph_url,json=graphUrl,proto3" json:"graph_url,omitempty" yaml:"graph_url,omitempty"`
	WeightsUrl  string                          `protobuf:"bytes,9,opt,name=weights_url,json=weightsUrl,proto3" json:"weights_url,omitempty" yaml:"weights_url,omitempty"`
	FeaturesUrl string                          `protobuf:"bytes,10,opt,name=features_url,json=featuresUrl,proto3" json:"features_url,omitempty" yaml:"features_url,omitempty"`
	Input       *Model_Input                    `protobuf:"bytes,11,opt,name=input" json:"input,omitempty" yaml:"input,omitempty"`
	Output      *Model_Output                   `protobuf:"bytes,12,opt,name=output" json:"output,omitempty" yaml:"output,omitempty"`
	MeanImage   []float32                       `protobuf:"fixed32,13,rep,packed,name=mean_image,json=meanImage" json:"mean_image,omitempty" yaml:"mean_image,omitempty"`
	References  []string                        `protobuf:"bytes,14,rep,name=references" json:"references,omitempty" yaml:"references,omitempty"`
}

func (m *Model_Information) Reset()                    { *m = Model_Information{} }
func (*Model_Information) ProtoMessage()               {}
func (*Model_Information) Descriptor() ([]byte, []int) { return fileDescriptorMxnet, []int{2, 2} }

func (m *Model_Information) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Model_Information) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Model_Information) GetContainer() map[string]*ContainerArchicture {
	if m != nil {
		return m.Container
	}
	return nil
}

func (m *Model_Information) GetFramework() string {
	if m != nil {
		return m.Framework
	}
	return ""
}

func (m *Model_Information) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Model_Information) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Model_Information) GetDatasetName() string {
	if m != nil {
		return m.DatasetName
	}
	return ""
}

func (m *Model_Information) GetGraphUrl() string {
	if m != nil {
		return m.GraphUrl
	}
	return ""
}

func (m *Model_Information) GetWeightsUrl() string {
	if m != nil {
		return m.WeightsUrl
	}
	return ""
}

func (m *Model_Information) GetFeaturesUrl() string {
	if m != nil {
		return m.FeaturesUrl
	}
	return ""
}

func (m *Model_Information) GetInput() *Model_Input {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *Model_Information) GetOutput() *Model_Output {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *Model_Information) GetMeanImage() []float32 {
	if m != nil {
		return m.MeanImage
	}
	return nil
}

func (m *Model_Information) GetReferences() []string {
	if m != nil {
		return m.References
	}
	return nil
}

type Model_Graph struct {
	Nodes      []*Model_Graph_Node      `protobuf:"bytes,1,rep,name=nodes" json:"nodes,omitempty" yaml:"nodes,omitempty"`
	ArgNodes   []int64                  `protobuf:"varint,2,rep,packed,name=arg_nodes,json=argNodes" json:"arg_nodes,omitempty" yaml:"arg_nodes,omitempty"`
	NodeRowPtr []int64                  `protobuf:"varint,3,rep,packed,name=node_row_ptr,json=nodeRowPtr" json:"node_row_ptr,omitempty" yaml:"node_row_ptr,omitempty"`
	Heads      []*Model_Graph_NodeEntry `protobuf:"bytes,4,rep,name=heads" json:"heads,omitempty" yaml:"heads,omitempty"`
	Attrs      *Model_Graph_Attributes  `protobuf:"bytes,5,opt,name=attrs" json:"attrs,omitempty" yaml:"attrs,omitempty"`
}

func (m *Model_Graph) Reset()                    { *m = Model_Graph{} }
func (*Model_Graph) ProtoMessage()               {}
func (*Model_Graph) Descriptor() ([]byte, []int) { return fileDescriptorMxnet, []int{2, 3} }

func (m *Model_Graph) GetNodes() []*Model_Graph_Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *Model_Graph) GetArgNodes() []int64 {
	if m != nil {
		return m.ArgNodes
	}
	return nil
}

func (m *Model_Graph) GetNodeRowPtr() []int64 {
	if m != nil {
		return m.NodeRowPtr
	}
	return nil
}

func (m *Model_Graph) GetHeads() []*Model_Graph_NodeEntry {
	if m != nil {
		return m.Heads
	}
	return nil
}

func (m *Model_Graph) GetAttrs() *Model_Graph_Attributes {
	if m != nil {
		return m.Attrs
	}
	return nil
}

type Model_Graph_NodeEntry struct {
	NodeId  int64 `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty" yaml:"node_id,omitempty"`
	Index   int64 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty" yaml:"input,omitempty"`
	Version int64 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty" yaml:"version,omitempty"`
}

func (m *Model_Graph_NodeEntry) Reset()                    { *m = Model_Graph_NodeEntry{} }
func (*Model_Graph_NodeEntry) ProtoMessage()               {}
func (*Model_Graph_NodeEntry) Descriptor() ([]byte, []int) { return fileDescriptorMxnet, []int{2, 3, 0} }

func (m *Model_Graph_NodeEntry) GetNodeId() int64 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *Model_Graph_NodeEntry) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Model_Graph_NodeEntry) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

type Model_Graph_Node struct {
	Op               string                   `protobuf:"bytes,1,opt,name=op,proto3" json:"op,omitempty" yaml:"op,omitempty"`
	Param            map[string]string        `protobuf:"bytes,2,rep,name=param" json:"param,omitempty" yaml:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Name             string                   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	Inputs           []*Model_Graph_NodeEntry `protobuf:"bytes,4,rep,name=inputs" json:"inputs,omitempty" yaml:"inputs,omitempty"`
	BackwardSourceId int64                    `protobuf:"varint,5,opt,name=backward_source_id,json=backwardSourceId,proto3" json:"backward_source_id,omitempty" yaml:"backward_source_id,omitempty"`
	ControlDeps      []int64                  `protobuf:"varint,6,rep,packed,name=control_deps,json=controlDeps" json:"control_deps,omitempty" yaml:"control_deps,omitempty"`
}

func (m *Model_Graph_Node) Reset()                    { *m = Model_Graph_Node{} }
func (*Model_Graph_Node) ProtoMessage()               {}
func (*Model_Graph_Node) Descriptor() ([]byte, []int) { return fileDescriptorMxnet, []int{2, 3, 1} }

func (m *Model_Graph_Node) GetOp() string {
	if m != nil {
		return m.Op
	}
	return ""
}

func (m *Model_Graph_Node) GetParam() map[string]string {
	if m != nil {
		return m.Param
	}
	return nil
}

func (m *Model_Graph_Node) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Model_Graph_Node) GetInputs() []*Model_Graph_NodeEntry {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *Model_Graph_Node) GetBackwardSourceId() int64 {
	if m != nil {
		return m.BackwardSourceId
	}
	return 0
}

func (m *Model_Graph_Node) GetControlDeps() []int64 {
	if m != nil {
		return m.ControlDeps
	}
	return nil
}

type Model_Graph_Attributes struct {
	Attrs map[string]string `protobuf:"bytes,1,rep,name=attrs" json:"attrs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Model_Graph_Attributes) Reset()      { *m = Model_Graph_Attributes{} }
func (*Model_Graph_Attributes) ProtoMessage() {}
func (*Model_Graph_Attributes) Descriptor() ([]byte, []int) {
	return fileDescriptorMxnet, []int{2, 3, 2}
}

func (m *Model_Graph_Attributes) GetAttrs() map[string]string {
	if m != nil {
		return m.Attrs
	}
	return nil
}

type ModelInformations struct {
	Info []*Model_Information `protobuf:"bytes,1,rep,name=info" json:"info,omitempty" yaml:"info,omitempty"`
}

func (m *ModelInformations) Reset()                    { *m = ModelInformations{} }
func (*ModelInformations) ProtoMessage()               {}
func (*ModelInformations) Descriptor() ([]byte, []int) { return fileDescriptorMxnet, []int{3} }

func (m *ModelInformations) GetInfo() []*Model_Information {
	if m != nil {
		return m.Info
	}
	return nil
}

type MXNetInferenceRequest struct {
	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id,omitempty"`
	ModelName string `protobuf:"bytes,2,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty" yaml:"model_name,omitempty"`
	Url       string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty" yaml:"url,omitempty"`
	Data      []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty" yaml:"data,omitempty"`
}

func (m *MXNetInferenceRequest) Reset()                    { *m = MXNetInferenceRequest{} }
func (*MXNetInferenceRequest) ProtoMessage()               {}
func (*MXNetInferenceRequest) Descriptor() ([]byte, []int) { return fileDescriptorMxnet, []int{4} }

func (m *MXNetInferenceRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MXNetInferenceRequest) GetModelName() string {
	if m != nil {
		return m.ModelName
	}
	return ""
}

func (m *MXNetInferenceRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *MXNetInferenceRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Feature struct {
	Index       int64   `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty" yaml:"index,omitempty"`
	Name        string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	Probability float32 `protobuf:"fixed32,3,opt,name=probability,proto3" json:"probability,omitempty" yaml:"probability,omitempty"`
}

func (m *Feature) Reset()                    { *m = Feature{} }
func (*Feature) ProtoMessage()               {}
func (*Feature) Descriptor() ([]byte, []int) { return fileDescriptorMxnet, []int{5} }

func (m *Feature) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Feature) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Feature) GetProbability() float32 {
	if m != nil {
		return m.Probability
	}
	return 0
}

type MXNetInferenceResponse struct {
	Id       string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id,omitempty"`
	Features []*Feature   `protobuf:"bytes,2,rep,name=features" json:"features,omitempty" yaml:"features,omitempty"`
	Error    *ErrorStatus `protobuf:"bytes,3,opt,name=error" json:"error,omitempty" yaml:"error,omitempty"`
}

func (m *MXNetInferenceResponse) Reset()                    { *m = MXNetInferenceResponse{} }
func (*MXNetInferenceResponse) ProtoMessage()               {}
func (*MXNetInferenceResponse) Descriptor() ([]byte, []int) { return fileDescriptorMxnet, []int{6} }

func (m *MXNetInferenceResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MXNetInferenceResponse) GetFeatures() []*Feature {
	if m != nil {
		return m.Features
	}
	return nil
}

func (m *MXNetInferenceResponse) GetError() *ErrorStatus {
	if m != nil {
		return m.Error
	}
	return nil
}

type MXNetModelInformationRequest struct {
	ModelName string `protobuf:"bytes,1,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty" yaml:"model_name,omitempty"`
}

func (m *MXNetModelInformationRequest) Reset()      { *m = MXNetModelInformationRequest{} }
func (*MXNetModelInformationRequest) ProtoMessage() {}
func (*MXNetModelInformationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorMxnet, []int{7}
}

func (m *MXNetModelInformationRequest) GetModelName() string {
	if m != nil {
		return m.ModelName
	}
	return ""
}

type Null struct {
}

func (m *Null) Reset()                    { *m = Null{} }
func (*Null) ProtoMessage()               {}
func (*Null) Descriptor() ([]byte, []int) { return fileDescriptorMxnet, []int{8} }

func init() {
	proto.RegisterType((*ErrorStatus)(nil), "carml.org.mxnet.ErrorStatus")
	proto.RegisterType((*ContainerArchicture)(nil), "carml.org.mxnet.ContainerArchicture")
	proto.RegisterType((*Model)(nil), "carml.org.mxnet.Model")
	proto.RegisterType((*Model_Input)(nil), "carml.org.mxnet.Model.Input")
	proto.RegisterType((*Model_Output)(nil), "carml.org.mxnet.Model.Output")
	proto.RegisterType((*Model_Information)(nil), "carml.org.mxnet.Model.Information")
	proto.RegisterType((*Model_Graph)(nil), "carml.org.mxnet.Model.Graph")
	proto.RegisterType((*Model_Graph_NodeEntry)(nil), "carml.org.mxnet.Model.Graph.NodeEntry")
	proto.RegisterType((*Model_Graph_Node)(nil), "carml.org.mxnet.Model.Graph.Node")
	proto.RegisterType((*Model_Graph_Attributes)(nil), "carml.org.mxnet.Model.Graph.Attributes")
	proto.RegisterType((*ModelInformations)(nil), "carml.org.mxnet.ModelInformations")
	proto.RegisterType((*MXNetInferenceRequest)(nil), "carml.org.mxnet.MXNetInferenceRequest")
	proto.RegisterType((*Feature)(nil), "carml.org.mxnet.Feature")
	proto.RegisterType((*MXNetInferenceResponse)(nil), "carml.org.mxnet.MXNetInferenceResponse")
	proto.RegisterType((*MXNetModelInformationRequest)(nil), "carml.org.mxnet.MXNetModelInformationRequest")
	proto.RegisterType((*Null)(nil), "carml.org.mxnet.Null")
}
func (this *ErrorStatus) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ErrorStatus)
	if !ok {
		that2, ok := that.(ErrorStatus)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ErrorStatus")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ErrorStatus but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ErrorStatus but is not nil && this == nil")
	}
	if this.Ok != that1.Ok {
		return fmt.Errorf("Ok this(%v) Not Equal that(%v)", this.Ok, that1.Ok)
	}
	if this.Message != that1.Message {
		return fmt.Errorf("Message this(%v) Not Equal that(%v)", this.Message, that1.Message)
	}
	return nil
}
func (this *ErrorStatus) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ErrorStatus)
	if !ok {
		that2, ok := that.(ErrorStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Ok != that1.Ok {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}
func (this *ContainerArchicture) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ContainerArchicture)
	if !ok {
		that2, ok := that.(ContainerArchicture)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ContainerArchicture")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ContainerArchicture but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ContainerArchicture but is not nil && this == nil")
	}
	if this.Gpu != that1.Gpu {
		return fmt.Errorf("Gpu this(%v) Not Equal that(%v)", this.Gpu, that1.Gpu)
	}
	if this.Cpu != that1.Cpu {
		return fmt.Errorf("Cpu this(%v) Not Equal that(%v)", this.Cpu, that1.Cpu)
	}
	return nil
}
func (this *ContainerArchicture) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ContainerArchicture)
	if !ok {
		that2, ok := that.(ContainerArchicture)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Gpu != that1.Gpu {
		return false
	}
	if this.Cpu != that1.Cpu {
		return false
	}
	return true
}
func (this *Model) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Model)
	if !ok {
		that2, ok := that.(Model)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Model")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Model but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Model but is not nil && this == nil")
	}
	return nil
}
func (this *Model) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Model)
	if !ok {
		that2, ok := that.(Model)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *Model_Input) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Model_Input)
	if !ok {
		that2, ok := that.(Model_Input)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Model_Input")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Model_Input but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Model_Input but is not nil && this == nil")
	}
	if this.Type != that1.Type {
		return fmt.Errorf("Type this(%v) Not Equal that(%v)", this.Type, that1.Type)
	}
	if len(this.Dimensions) != len(that1.Dimensions) {
		return fmt.Errorf("Dimensions this(%v) Not Equal that(%v)", len(this.Dimensions), len(that1.Dimensions))
	}
	for i := range this.Dimensions {
		if this.Dimensions[i] != that1.Dimensions[i] {
			return fmt.Errorf("Dimensions this[%v](%v) Not Equal that[%v](%v)", i, this.Dimensions[i], i, that1.Dimensions[i])
		}
	}
	return nil
}
func (this *Model_Input) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Model_Input)
	if !ok {
		that2, ok := that.(Model_Input)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if len(this.Dimensions) != len(that1.Dimensions) {
		return false
	}
	for i := range this.Dimensions {
		if this.Dimensions[i] != that1.Dimensions[i] {
			return false
		}
	}
	return true
}
func (this *Model_Output) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Model_Output)
	if !ok {
		that2, ok := that.(Model_Output)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Model_Output")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Model_Output but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Model_Output but is not nil && this == nil")
	}
	if this.Type != that1.Type {
		return fmt.Errorf("Type this(%v) Not Equal that(%v)", this.Type, that1.Type)
	}
	return nil
}
func (this *Model_Output) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Model_Output)
	if !ok {
		that2, ok := that.(Model_Output)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	return true
}
func (this *Model_Information) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Model_Information)
	if !ok {
		that2, ok := that.(Model_Information)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Model_Information")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Model_Information but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Model_Information but is not nil && this == nil")
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if this.Description != that1.Description {
		return fmt.Errorf("Description this(%v) Not Equal that(%v)", this.Description, that1.Description)
	}
	if len(this.Container) != len(that1.Container) {
		return fmt.Errorf("Container this(%v) Not Equal that(%v)", len(this.Container), len(that1.Container))
	}
	for i := range this.Container {
		if !this.Container[i].Equal(that1.Container[i]) {
			return fmt.Errorf("Container this[%v](%v) Not Equal that[%v](%v)", i, this.Container[i], i, that1.Container[i])
		}
	}
	if this.Framework != that1.Framework {
		return fmt.Errorf("Framework this(%v) Not Equal that(%v)", this.Framework, that1.Framework)
	}
	if this.Version != that1.Version {
		return fmt.Errorf("Version this(%v) Not Equal that(%v)", this.Version, that1.Version)
	}
	if this.Type != that1.Type {
		return fmt.Errorf("Type this(%v) Not Equal that(%v)", this.Type, that1.Type)
	}
	if this.DatasetName != that1.DatasetName {
		return fmt.Errorf("DatasetName this(%v) Not Equal that(%v)", this.DatasetName, that1.DatasetName)
	}
	if this.GraphUrl != that1.GraphUrl {
		return fmt.Errorf("GraphUrl this(%v) Not Equal that(%v)", this.GraphUrl, that1.GraphUrl)
	}
	if this.WeightsUrl != that1.WeightsUrl {
		return fmt.Errorf("WeightsUrl this(%v) Not Equal that(%v)", this.WeightsUrl, that1.WeightsUrl)
	}
	if this.FeaturesUrl != that1.FeaturesUrl {
		return fmt.Errorf("FeaturesUrl this(%v) Not Equal that(%v)", this.FeaturesUrl, that1.FeaturesUrl)
	}
	if !this.Input.Equal(that1.Input) {
		return fmt.Errorf("Input this(%v) Not Equal that(%v)", this.Input, that1.Input)
	}
	if !this.Output.Equal(that1.Output) {
		return fmt.Errorf("Output this(%v) Not Equal that(%v)", this.Output, that1.Output)
	}
	if len(this.MeanImage) != len(that1.MeanImage) {
		return fmt.Errorf("MeanImage this(%v) Not Equal that(%v)", len(this.MeanImage), len(that1.MeanImage))
	}
	for i := range this.MeanImage {
		if this.MeanImage[i] != that1.MeanImage[i] {
			return fmt.Errorf("MeanImage this[%v](%v) Not Equal that[%v](%v)", i, this.MeanImage[i], i, that1.MeanImage[i])
		}
	}
	if len(this.References) != len(that1.References) {
		return fmt.Errorf("References this(%v) Not Equal that(%v)", len(this.References), len(that1.References))
	}
	for i := range this.References {
		if this.References[i] != that1.References[i] {
			return fmt.Errorf("References this[%v](%v) Not Equal that[%v](%v)", i, this.References[i], i, that1.References[i])
		}
	}
	return nil
}
func (this *Model_Information) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Model_Information)
	if !ok {
		that2, ok := that.(Model_Information)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if len(this.Container) != len(that1.Container) {
		return false
	}
	for i := range this.Container {
		if !this.Container[i].Equal(that1.Container[i]) {
			return false
		}
	}
	if this.Framework != that1.Framework {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.DatasetName != that1.DatasetName {
		return false
	}
	if this.GraphUrl != that1.GraphUrl {
		return false
	}
	if this.WeightsUrl != that1.WeightsUrl {
		return false
	}
	if this.FeaturesUrl != that1.FeaturesUrl {
		return false
	}
	if !this.Input.Equal(that1.Input) {
		return false
	}
	if !this.Output.Equal(that1.Output) {
		return false
	}
	if len(this.MeanImage) != len(that1.MeanImage) {
		return false
	}
	for i := range this.MeanImage {
		if this.MeanImage[i] != that1.MeanImage[i] {
			return false
		}
	}
	if len(this.References) != len(that1.References) {
		return false
	}
	for i := range this.References {
		if this.References[i] != that1.References[i] {
			return false
		}
	}
	return true
}
func (this *Model_Graph) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Model_Graph)
	if !ok {
		that2, ok := that.(Model_Graph)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Model_Graph")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Model_Graph but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Model_Graph but is not nil && this == nil")
	}
	if len(this.Nodes) != len(that1.Nodes) {
		return fmt.Errorf("Nodes this(%v) Not Equal that(%v)", len(this.Nodes), len(that1.Nodes))
	}
	for i := range this.Nodes {
		if !this.Nodes[i].Equal(that1.Nodes[i]) {
			return fmt.Errorf("Nodes this[%v](%v) Not Equal that[%v](%v)", i, this.Nodes[i], i, that1.Nodes[i])
		}
	}
	if len(this.ArgNodes) != len(that1.ArgNodes) {
		return fmt.Errorf("ArgNodes this(%v) Not Equal that(%v)", len(this.ArgNodes), len(that1.ArgNodes))
	}
	for i := range this.ArgNodes {
		if this.ArgNodes[i] != that1.ArgNodes[i] {
			return fmt.Errorf("ArgNodes this[%v](%v) Not Equal that[%v](%v)", i, this.ArgNodes[i], i, that1.ArgNodes[i])
		}
	}
	if len(this.NodeRowPtr) != len(that1.NodeRowPtr) {
		return fmt.Errorf("NodeRowPtr this(%v) Not Equal that(%v)", len(this.NodeRowPtr), len(that1.NodeRowPtr))
	}
	for i := range this.NodeRowPtr {
		if this.NodeRowPtr[i] != that1.NodeRowPtr[i] {
			return fmt.Errorf("NodeRowPtr this[%v](%v) Not Equal that[%v](%v)", i, this.NodeRowPtr[i], i, that1.NodeRowPtr[i])
		}
	}
	if len(this.Heads) != len(that1.Heads) {
		return fmt.Errorf("Heads this(%v) Not Equal that(%v)", len(this.Heads), len(that1.Heads))
	}
	for i := range this.Heads {
		if !this.Heads[i].Equal(that1.Heads[i]) {
			return fmt.Errorf("Heads this[%v](%v) Not Equal that[%v](%v)", i, this.Heads[i], i, that1.Heads[i])
		}
	}
	if !this.Attrs.Equal(that1.Attrs) {
		return fmt.Errorf("Attrs this(%v) Not Equal that(%v)", this.Attrs, that1.Attrs)
	}
	return nil
}
func (this *Model_Graph) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Model_Graph)
	if !ok {
		that2, ok := that.(Model_Graph)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Nodes) != len(that1.Nodes) {
		return false
	}
	for i := range this.Nodes {
		if !this.Nodes[i].Equal(that1.Nodes[i]) {
			return false
		}
	}
	if len(this.ArgNodes) != len(that1.ArgNodes) {
		return false
	}
	for i := range this.ArgNodes {
		if this.ArgNodes[i] != that1.ArgNodes[i] {
			return false
		}
	}
	if len(this.NodeRowPtr) != len(that1.NodeRowPtr) {
		return false
	}
	for i := range this.NodeRowPtr {
		if this.NodeRowPtr[i] != that1.NodeRowPtr[i] {
			return false
		}
	}
	if len(this.Heads) != len(that1.Heads) {
		return false
	}
	for i := range this.Heads {
		if !this.Heads[i].Equal(that1.Heads[i]) {
			return false
		}
	}
	if !this.Attrs.Equal(that1.Attrs) {
		return false
	}
	return true
}
func (this *Model_Graph_NodeEntry) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Model_Graph_NodeEntry)
	if !ok {
		that2, ok := that.(Model_Graph_NodeEntry)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Model_Graph_NodeEntry")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Model_Graph_NodeEntry but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Model_Graph_NodeEntry but is not nil && this == nil")
	}
	if this.NodeId != that1.NodeId {
		return fmt.Errorf("NodeId this(%v) Not Equal that(%v)", this.NodeId, that1.NodeId)
	}
	if this.Index != that1.Index {
		return fmt.Errorf("Index this(%v) Not Equal that(%v)", this.Index, that1.Index)
	}
	if this.Version != that1.Version {
		return fmt.Errorf("Version this(%v) Not Equal that(%v)", this.Version, that1.Version)
	}
	return nil
}
func (this *Model_Graph_NodeEntry) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Model_Graph_NodeEntry)
	if !ok {
		that2, ok := that.(Model_Graph_NodeEntry)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.NodeId != that1.NodeId {
		return false
	}
	if this.Index != that1.Index {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	return true
}
func (this *Model_Graph_Node) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Model_Graph_Node)
	if !ok {
		that2, ok := that.(Model_Graph_Node)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Model_Graph_Node")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Model_Graph_Node but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Model_Graph_Node but is not nil && this == nil")
	}
	if this.Op != that1.Op {
		return fmt.Errorf("Op this(%v) Not Equal that(%v)", this.Op, that1.Op)
	}
	if len(this.Param) != len(that1.Param) {
		return fmt.Errorf("Param this(%v) Not Equal that(%v)", len(this.Param), len(that1.Param))
	}
	for i := range this.Param {
		if this.Param[i] != that1.Param[i] {
			return fmt.Errorf("Param this[%v](%v) Not Equal that[%v](%v)", i, this.Param[i], i, that1.Param[i])
		}
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if len(this.Inputs) != len(that1.Inputs) {
		return fmt.Errorf("Inputs this(%v) Not Equal that(%v)", len(this.Inputs), len(that1.Inputs))
	}
	for i := range this.Inputs {
		if !this.Inputs[i].Equal(that1.Inputs[i]) {
			return fmt.Errorf("Inputs this[%v](%v) Not Equal that[%v](%v)", i, this.Inputs[i], i, that1.Inputs[i])
		}
	}
	if this.BackwardSourceId != that1.BackwardSourceId {
		return fmt.Errorf("BackwardSourceId this(%v) Not Equal that(%v)", this.BackwardSourceId, that1.BackwardSourceId)
	}
	if len(this.ControlDeps) != len(that1.ControlDeps) {
		return fmt.Errorf("ControlDeps this(%v) Not Equal that(%v)", len(this.ControlDeps), len(that1.ControlDeps))
	}
	for i := range this.ControlDeps {
		if this.ControlDeps[i] != that1.ControlDeps[i] {
			return fmt.Errorf("ControlDeps this[%v](%v) Not Equal that[%v](%v)", i, this.ControlDeps[i], i, that1.ControlDeps[i])
		}
	}
	return nil
}
func (this *Model_Graph_Node) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Model_Graph_Node)
	if !ok {
		that2, ok := that.(Model_Graph_Node)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Op != that1.Op {
		return false
	}
	if len(this.Param) != len(that1.Param) {
		return false
	}
	for i := range this.Param {
		if this.Param[i] != that1.Param[i] {
			return false
		}
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Inputs) != len(that1.Inputs) {
		return false
	}
	for i := range this.Inputs {
		if !this.Inputs[i].Equal(that1.Inputs[i]) {
			return false
		}
	}
	if this.BackwardSourceId != that1.BackwardSourceId {
		return false
	}
	if len(this.ControlDeps) != len(that1.ControlDeps) {
		return false
	}
	for i := range this.ControlDeps {
		if this.ControlDeps[i] != that1.ControlDeps[i] {
			return false
		}
	}
	return true
}
func (this *Model_Graph_Attributes) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Model_Graph_Attributes)
	if !ok {
		that2, ok := that.(Model_Graph_Attributes)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Model_Graph_Attributes")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Model_Graph_Attributes but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Model_Graph_Attributes but is not nil && this == nil")
	}
	if len(this.Attrs) != len(that1.Attrs) {
		return fmt.Errorf("Attrs this(%v) Not Equal that(%v)", len(this.Attrs), len(that1.Attrs))
	}
	for i := range this.Attrs {
		if this.Attrs[i] != that1.Attrs[i] {
			return fmt.Errorf("Attrs this[%v](%v) Not Equal that[%v](%v)", i, this.Attrs[i], i, that1.Attrs[i])
		}
	}
	return nil
}
func (this *Model_Graph_Attributes) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Model_Graph_Attributes)
	if !ok {
		that2, ok := that.(Model_Graph_Attributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Attrs) != len(that1.Attrs) {
		return false
	}
	for i := range this.Attrs {
		if this.Attrs[i] != that1.Attrs[i] {
			return false
		}
	}
	return true
}
func (this *ModelInformations) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ModelInformations)
	if !ok {
		that2, ok := that.(ModelInformations)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ModelInformations")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ModelInformations but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ModelInformations but is not nil && this == nil")
	}
	if len(this.Info) != len(that1.Info) {
		return fmt.Errorf("Info this(%v) Not Equal that(%v)", len(this.Info), len(that1.Info))
	}
	for i := range this.Info {
		if !this.Info[i].Equal(that1.Info[i]) {
			return fmt.Errorf("Info this[%v](%v) Not Equal that[%v](%v)", i, this.Info[i], i, that1.Info[i])
		}
	}
	return nil
}
func (this *ModelInformations) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ModelInformations)
	if !ok {
		that2, ok := that.(ModelInformations)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Info) != len(that1.Info) {
		return false
	}
	for i := range this.Info {
		if !this.Info[i].Equal(that1.Info[i]) {
			return false
		}
	}
	return true
}
func (this *MXNetInferenceRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MXNetInferenceRequest)
	if !ok {
		that2, ok := that.(MXNetInferenceRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MXNetInferenceRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MXNetInferenceRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MXNetInferenceRequest but is not nil && this == nil")
	}
	if this.Id != that1.Id {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if this.ModelName != that1.ModelName {
		return fmt.Errorf("ModelName this(%v) Not Equal that(%v)", this.ModelName, that1.ModelName)
	}
	if this.Url != that1.Url {
		return fmt.Errorf("Url this(%v) Not Equal that(%v)", this.Url, that1.Url)
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return fmt.Errorf("Data this(%v) Not Equal that(%v)", this.Data, that1.Data)
	}
	return nil
}
func (this *MXNetInferenceRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MXNetInferenceRequest)
	if !ok {
		that2, ok := that.(MXNetInferenceRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.ModelName != that1.ModelName {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	return true
}
func (this *Feature) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Feature)
	if !ok {
		that2, ok := that.(Feature)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Feature")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Feature but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Feature but is not nil && this == nil")
	}
	if this.Index != that1.Index {
		return fmt.Errorf("Index this(%v) Not Equal that(%v)", this.Index, that1.Index)
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if this.Probability != that1.Probability {
		return fmt.Errorf("Probability this(%v) Not Equal that(%v)", this.Probability, that1.Probability)
	}
	return nil
}
func (this *Feature) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Feature)
	if !ok {
		that2, ok := that.(Feature)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Index != that1.Index {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Probability != that1.Probability {
		return false
	}
	return true
}
func (this *MXNetInferenceResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MXNetInferenceResponse)
	if !ok {
		that2, ok := that.(MXNetInferenceResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MXNetInferenceResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MXNetInferenceResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MXNetInferenceResponse but is not nil && this == nil")
	}
	if this.Id != that1.Id {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if len(this.Features) != len(that1.Features) {
		return fmt.Errorf("Features this(%v) Not Equal that(%v)", len(this.Features), len(that1.Features))
	}
	for i := range this.Features {
		if !this.Features[i].Equal(that1.Features[i]) {
			return fmt.Errorf("Features this[%v](%v) Not Equal that[%v](%v)", i, this.Features[i], i, that1.Features[i])
		}
	}
	if !this.Error.Equal(that1.Error) {
		return fmt.Errorf("Error this(%v) Not Equal that(%v)", this.Error, that1.Error)
	}
	return nil
}
func (this *MXNetInferenceResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MXNetInferenceResponse)
	if !ok {
		that2, ok := that.(MXNetInferenceResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if len(this.Features) != len(that1.Features) {
		return false
	}
	for i := range this.Features {
		if !this.Features[i].Equal(that1.Features[i]) {
			return false
		}
	}
	if !this.Error.Equal(that1.Error) {
		return false
	}
	return true
}
func (this *MXNetModelInformationRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MXNetModelInformationRequest)
	if !ok {
		that2, ok := that.(MXNetModelInformationRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MXNetModelInformationRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MXNetModelInformationRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MXNetModelInformationRequest but is not nil && this == nil")
	}
	if this.ModelName != that1.ModelName {
		return fmt.Errorf("ModelName this(%v) Not Equal that(%v)", this.ModelName, that1.ModelName)
	}
	return nil
}
func (this *MXNetModelInformationRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MXNetModelInformationRequest)
	if !ok {
		that2, ok := that.(MXNetModelInformationRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ModelName != that1.ModelName {
		return false
	}
	return true
}
func (this *Null) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Null)
	if !ok {
		that2, ok := that.(Null)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Null")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Null but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Null but is not nil && this == nil")
	}
	return nil
}
func (this *Null) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Null)
	if !ok {
		that2, ok := that.(Null)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *ErrorStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&mxnet.ErrorStatus{")
	s = append(s, "Ok: "+fmt.Sprintf("%#v", this.Ok)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ContainerArchicture) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&mxnet.ContainerArchicture{")
	s = append(s, "Gpu: "+fmt.Sprintf("%#v", this.Gpu)+",\n")
	s = append(s, "Cpu: "+fmt.Sprintf("%#v", this.Cpu)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Model) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&mxnet.Model{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Model_Input) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&mxnet.Model_Input{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Dimensions: "+fmt.Sprintf("%#v", this.Dimensions)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Model_Output) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&mxnet.Model_Output{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Model_Information) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 18)
	s = append(s, "&mxnet.Model_Information{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	keysForContainer := make([]string, 0, len(this.Container))
	for k, _ := range this.Container {
		keysForContainer = append(keysForContainer, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForContainer)
	mapStringForContainer := "map[string]*ContainerArchicture{"
	for _, k := range keysForContainer {
		mapStringForContainer += fmt.Sprintf("%#v: %#v,", k, this.Container[k])
	}
	mapStringForContainer += "}"
	if this.Container != nil {
		s = append(s, "Container: "+mapStringForContainer+",\n")
	}
	s = append(s, "Framework: "+fmt.Sprintf("%#v", this.Framework)+",\n")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "DatasetName: "+fmt.Sprintf("%#v", this.DatasetName)+",\n")
	s = append(s, "GraphUrl: "+fmt.Sprintf("%#v", this.GraphUrl)+",\n")
	s = append(s, "WeightsUrl: "+fmt.Sprintf("%#v", this.WeightsUrl)+",\n")
	s = append(s, "FeaturesUrl: "+fmt.Sprintf("%#v", this.FeaturesUrl)+",\n")
	if this.Input != nil {
		s = append(s, "Input: "+fmt.Sprintf("%#v", this.Input)+",\n")
	}
	if this.Output != nil {
		s = append(s, "Output: "+fmt.Sprintf("%#v", this.Output)+",\n")
	}
	s = append(s, "MeanImage: "+fmt.Sprintf("%#v", this.MeanImage)+",\n")
	s = append(s, "References: "+fmt.Sprintf("%#v", this.References)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Model_Graph) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&mxnet.Model_Graph{")
	if this.Nodes != nil {
		s = append(s, "Nodes: "+fmt.Sprintf("%#v", this.Nodes)+",\n")
	}
	s = append(s, "ArgNodes: "+fmt.Sprintf("%#v", this.ArgNodes)+",\n")
	s = append(s, "NodeRowPtr: "+fmt.Sprintf("%#v", this.NodeRowPtr)+",\n")
	if this.Heads != nil {
		s = append(s, "Heads: "+fmt.Sprintf("%#v", this.Heads)+",\n")
	}
	if this.Attrs != nil {
		s = append(s, "Attrs: "+fmt.Sprintf("%#v", this.Attrs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Model_Graph_NodeEntry) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&mxnet.Model_Graph_NodeEntry{")
	s = append(s, "NodeId: "+fmt.Sprintf("%#v", this.NodeId)+",\n")
	s = append(s, "Index: "+fmt.Sprintf("%#v", this.Index)+",\n")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Model_Graph_Node) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&mxnet.Model_Graph_Node{")
	s = append(s, "Op: "+fmt.Sprintf("%#v", this.Op)+",\n")
	keysForParam := make([]string, 0, len(this.Param))
	for k, _ := range this.Param {
		keysForParam = append(keysForParam, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForParam)
	mapStringForParam := "map[string]string{"
	for _, k := range keysForParam {
		mapStringForParam += fmt.Sprintf("%#v: %#v,", k, this.Param[k])
	}
	mapStringForParam += "}"
	if this.Param != nil {
		s = append(s, "Param: "+mapStringForParam+",\n")
	}
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Inputs != nil {
		s = append(s, "Inputs: "+fmt.Sprintf("%#v", this.Inputs)+",\n")
	}
	s = append(s, "BackwardSourceId: "+fmt.Sprintf("%#v", this.BackwardSourceId)+",\n")
	s = append(s, "ControlDeps: "+fmt.Sprintf("%#v", this.ControlDeps)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Model_Graph_Attributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&mxnet.Model_Graph_Attributes{")
	keysForAttrs := make([]string, 0, len(this.Attrs))
	for k, _ := range this.Attrs {
		keysForAttrs = append(keysForAttrs, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAttrs)
	mapStringForAttrs := "map[string]string{"
	for _, k := range keysForAttrs {
		mapStringForAttrs += fmt.Sprintf("%#v: %#v,", k, this.Attrs[k])
	}
	mapStringForAttrs += "}"
	if this.Attrs != nil {
		s = append(s, "Attrs: "+mapStringForAttrs+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ModelInformations) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&mxnet.ModelInformations{")
	if this.Info != nil {
		s = append(s, "Info: "+fmt.Sprintf("%#v", this.Info)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MXNetInferenceRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&mxnet.MXNetInferenceRequest{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "ModelName: "+fmt.Sprintf("%#v", this.ModelName)+",\n")
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Feature) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&mxnet.Feature{")
	s = append(s, "Index: "+fmt.Sprintf("%#v", this.Index)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Probability: "+fmt.Sprintf("%#v", this.Probability)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MXNetInferenceResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&mxnet.MXNetInferenceResponse{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.Features != nil {
		s = append(s, "Features: "+fmt.Sprintf("%#v", this.Features)+",\n")
	}
	if this.Error != nil {
		s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MXNetModelInformationRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&mxnet.MXNetModelInformationRequest{")
	s = append(s, "ModelName: "+fmt.Sprintf("%#v", this.ModelName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Null) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&mxnet.Null{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMxnet(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MXNet service

type MXNetClient interface {
	InferURL(ctx context.Context, in *MXNetInferenceRequest, opts ...grpc.CallOption) (*MXNetInferenceResponse, error)
	InferBytes(ctx context.Context, in *MXNetInferenceRequest, opts ...grpc.CallOption) (*MXNetInferenceResponse, error)
	GetModelInformations(ctx context.Context, in *Null, opts ...grpc.CallOption) (*ModelInformations, error)
	GetModelInformation(ctx context.Context, in *MXNetModelInformationRequest, opts ...grpc.CallOption) (*Model_Information, error)
	GetModelGraph(ctx context.Context, in *MXNetModelInformationRequest, opts ...grpc.CallOption) (*Model_Graph, error)
}

type mXNetClient struct {
	cc *grpc.ClientConn
}

func NewMXNetClient(cc *grpc.ClientConn) MXNetClient {
	return &mXNetClient{cc}
}

func (c *mXNetClient) InferURL(ctx context.Context, in *MXNetInferenceRequest, opts ...grpc.CallOption) (*MXNetInferenceResponse, error) {
	out := new(MXNetInferenceResponse)
	err := grpc.Invoke(ctx, "/carml.org.mxnet.MXNet/InferURL", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mXNetClient) InferBytes(ctx context.Context, in *MXNetInferenceRequest, opts ...grpc.CallOption) (*MXNetInferenceResponse, error) {
	out := new(MXNetInferenceResponse)
	err := grpc.Invoke(ctx, "/carml.org.mxnet.MXNet/InferBytes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mXNetClient) GetModelInformations(ctx context.Context, in *Null, opts ...grpc.CallOption) (*ModelInformations, error) {
	out := new(ModelInformations)
	err := grpc.Invoke(ctx, "/carml.org.mxnet.MXNet/GetModelInformations", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mXNetClient) GetModelInformation(ctx context.Context, in *MXNetModelInformationRequest, opts ...grpc.CallOption) (*Model_Information, error) {
	out := new(Model_Information)
	err := grpc.Invoke(ctx, "/carml.org.mxnet.MXNet/GetModelInformation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mXNetClient) GetModelGraph(ctx context.Context, in *MXNetModelInformationRequest, opts ...grpc.CallOption) (*Model_Graph, error) {
	out := new(Model_Graph)
	err := grpc.Invoke(ctx, "/carml.org.mxnet.MXNet/GetModelGraph", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MXNet service

type MXNetServer interface {
	InferURL(context.Context, *MXNetInferenceRequest) (*MXNetInferenceResponse, error)
	InferBytes(context.Context, *MXNetInferenceRequest) (*MXNetInferenceResponse, error)
	GetModelInformations(context.Context, *Null) (*ModelInformations, error)
	GetModelInformation(context.Context, *MXNetModelInformationRequest) (*Model_Information, error)
	GetModelGraph(context.Context, *MXNetModelInformationRequest) (*Model_Graph, error)
}

func RegisterMXNetServer(s *grpc.Server, srv MXNetServer) {
	s.RegisterService(&_MXNet_serviceDesc, srv)
}

func _MXNet_InferURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MXNetInferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MXNetServer).InferURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carml.org.mxnet.MXNet/InferURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MXNetServer).InferURL(ctx, req.(*MXNetInferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MXNet_InferBytes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MXNetInferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MXNetServer).InferBytes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carml.org.mxnet.MXNet/InferBytes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MXNetServer).InferBytes(ctx, req.(*MXNetInferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MXNet_GetModelInformations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Null)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MXNetServer).GetModelInformations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carml.org.mxnet.MXNet/GetModelInformations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MXNetServer).GetModelInformations(ctx, req.(*Null))
	}
	return interceptor(ctx, in, info, handler)
}

func _MXNet_GetModelInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MXNetModelInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MXNetServer).GetModelInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carml.org.mxnet.MXNet/GetModelInformation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MXNetServer).GetModelInformation(ctx, req.(*MXNetModelInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MXNet_GetModelGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MXNetModelInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MXNetServer).GetModelGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carml.org.mxnet.MXNet/GetModelGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MXNetServer).GetModelGraph(ctx, req.(*MXNetModelInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MXNet_serviceDesc = grpc.ServiceDesc{
	ServiceName: "carml.org.mxnet.MXNet",
	HandlerType: (*MXNetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InferURL",
			Handler:    _MXNet_InferURL_Handler,
		},
		{
			MethodName: "InferBytes",
			Handler:    _MXNet_InferBytes_Handler,
		},
		{
			MethodName: "GetModelInformations",
			Handler:    _MXNet_GetModelInformations_Handler,
		},
		{
			MethodName: "GetModelInformation",
			Handler:    _MXNet_GetModelInformation_Handler,
		},
		{
			MethodName: "GetModelGraph",
			Handler:    _MXNet_GetModelGraph_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mxnet.proto",
}

func (m *ErrorStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ErrorStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ok {
		dAtA[i] = 0x8
		i++
		if m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMxnet(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *ContainerArchicture) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerArchicture) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Gpu) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMxnet(dAtA, i, uint64(len(m.Gpu)))
		i += copy(dAtA[i:], m.Gpu)
	}
	if len(m.Cpu) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMxnet(dAtA, i, uint64(len(m.Cpu)))
		i += copy(dAtA[i:], m.Cpu)
	}
	return i, nil
}

func (m *Model) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Model) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Model_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Model_Input) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMxnet(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.Dimensions) > 0 {
		dAtA2 := make([]byte, len(m.Dimensions)*10)
		var j1 int
		for _, num1 := range m.Dimensions {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintMxnet(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	return i, nil
}

func (m *Model_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Model_Output) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMxnet(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	return i, nil
}

func (m *Model_Information) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Model_Information) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMxnet(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMxnet(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.Container) > 0 {
		for k, _ := range m.Container {
			dAtA[i] = 0x1a
			i++
			v := m.Container[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovMxnet(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovMxnet(uint64(len(k))) + msgSize
			i = encodeVarintMxnet(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintMxnet(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintMxnet(dAtA, i, uint64(v.Size()))
				n3, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n3
			}
		}
	}
	if len(m.Framework) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMxnet(dAtA, i, uint64(len(m.Framework)))
		i += copy(dAtA[i:], m.Framework)
	}
	if len(m.Version) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMxnet(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintMxnet(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.DatasetName) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintMxnet(dAtA, i, uint64(len(m.DatasetName)))
		i += copy(dAtA[i:], m.DatasetName)
	}
	if len(m.GraphUrl) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintMxnet(dAtA, i, uint64(len(m.GraphUrl)))
		i += copy(dAtA[i:], m.GraphUrl)
	}
	if len(m.WeightsUrl) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintMxnet(dAtA, i, uint64(len(m.WeightsUrl)))
		i += copy(dAtA[i:], m.WeightsUrl)
	}
	if len(m.FeaturesUrl) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintMxnet(dAtA, i, uint64(len(m.FeaturesUrl)))
		i += copy(dAtA[i:], m.FeaturesUrl)
	}
	if m.Input != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintMxnet(dAtA, i, uint64(m.Input.Size()))
		n4, err := m.Input.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Output != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintMxnet(dAtA, i, uint64(m.Output.Size()))
		n5, err := m.Output.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.MeanImage) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintMxnet(dAtA, i, uint64(len(m.MeanImage)*4))
		for _, num := range m.MeanImage {
			f6 := math.Float32bits(float32(num))
			dAtA[i] = uint8(f6)
			i++
			dAtA[i] = uint8(f6 >> 8)
			i++
			dAtA[i] = uint8(f6 >> 16)
			i++
			dAtA[i] = uint8(f6 >> 24)
			i++
		}
	}
	if len(m.References) > 0 {
		for _, s := range m.References {
			dAtA[i] = 0x72
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *Model_Graph) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Model_Graph) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for _, msg := range m.Nodes {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMxnet(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ArgNodes) > 0 {
		dAtA8 := make([]byte, len(m.ArgNodes)*10)
		var j7 int
		for _, num1 := range m.ArgNodes {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintMxnet(dAtA, i, uint64(j7))
		i += copy(dAtA[i:], dAtA8[:j7])
	}
	if len(m.NodeRowPtr) > 0 {
		dAtA10 := make([]byte, len(m.NodeRowPtr)*10)
		var j9 int
		for _, num1 := range m.NodeRowPtr {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMxnet(dAtA, i, uint64(j9))
		i += copy(dAtA[i:], dAtA10[:j9])
	}
	if len(m.Heads) > 0 {
		for _, msg := range m.Heads {
			dAtA[i] = 0x22
			i++
			i = encodeVarintMxnet(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Attrs != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMxnet(dAtA, i, uint64(m.Attrs.Size()))
		n11, err := m.Attrs.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}

func (m *Model_Graph_NodeEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Model_Graph_NodeEntry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NodeId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMxnet(dAtA, i, uint64(m.NodeId))
	}
	if m.Index != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMxnet(dAtA, i, uint64(m.Index))
	}
	if m.Version != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMxnet(dAtA, i, uint64(m.Version))
	}
	return i, nil
}

func (m *Model_Graph_Node) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Model_Graph_Node) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Op) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMxnet(dAtA, i, uint64(len(m.Op)))
		i += copy(dAtA[i:], m.Op)
	}
	if len(m.Param) > 0 {
		for k, _ := range m.Param {
			dAtA[i] = 0x12
			i++
			v := m.Param[k]
			mapSize := 1 + len(k) + sovMxnet(uint64(len(k))) + 1 + len(v) + sovMxnet(uint64(len(v)))
			i = encodeVarintMxnet(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintMxnet(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintMxnet(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMxnet(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Inputs) > 0 {
		for _, msg := range m.Inputs {
			dAtA[i] = 0x22
			i++
			i = encodeVarintMxnet(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.BackwardSourceId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMxnet(dAtA, i, uint64(m.BackwardSourceId))
	}
	if len(m.ControlDeps) > 0 {
		dAtA13 := make([]byte, len(m.ControlDeps)*10)
		var j12 int
		for _, num1 := range m.ControlDeps {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA13[j12] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j12++
			}
			dAtA13[j12] = uint8(num)
			j12++
		}
		dAtA[i] = 0x32
		i++
		i = encodeVarintMxnet(dAtA, i, uint64(j12))
		i += copy(dAtA[i:], dAtA13[:j12])
	}
	return i, nil
}

func (m *Model_Graph_Attributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Model_Graph_Attributes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Attrs) > 0 {
		for k, _ := range m.Attrs {
			dAtA[i] = 0xa
			i++
			v := m.Attrs[k]
			mapSize := 1 + len(k) + sovMxnet(uint64(len(k))) + 1 + len(v) + sovMxnet(uint64(len(v)))
			i = encodeVarintMxnet(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintMxnet(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintMxnet(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func (m *ModelInformations) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelInformations) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Info) > 0 {
		for _, msg := range m.Info {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMxnet(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MXNetInferenceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MXNetInferenceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMxnet(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.ModelName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMxnet(dAtA, i, uint64(len(m.ModelName)))
		i += copy(dAtA[i:], m.ModelName)
	}
	if len(m.Url) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMxnet(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMxnet(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *Feature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Feature) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMxnet(dAtA, i, uint64(m.Index))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMxnet(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Probability != 0 {
		dAtA[i] = 0x1d
		i++
		i = encodeFixed32Mxnet(dAtA, i, uint32(math.Float32bits(float32(m.Probability))))
	}
	return i, nil
}

func (m *MXNetInferenceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MXNetInferenceResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMxnet(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Features) > 0 {
		for _, msg := range m.Features {
			dAtA[i] = 0x12
			i++
			i = encodeVarintMxnet(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMxnet(dAtA, i, uint64(m.Error.Size()))
		n14, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}

func (m *MXNetModelInformationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MXNetModelInformationRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ModelName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMxnet(dAtA, i, uint64(len(m.ModelName)))
		i += copy(dAtA[i:], m.ModelName)
	}
	return i, nil
}

func (m *Null) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Null) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeFixed64Mxnet(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Mxnet(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintMxnet(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedErrorStatus(r randyMxnet, easy bool) *ErrorStatus {
	this := &ErrorStatus{}
	this.Ok = bool(bool(r.Intn(2) == 0))
	this.Message = string(randStringMxnet(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedContainerArchicture(r randyMxnet, easy bool) *ContainerArchicture {
	this := &ContainerArchicture{}
	this.Gpu = string(randStringMxnet(r))
	this.Cpu = string(randStringMxnet(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedModel(r randyMxnet, easy bool) *Model {
	this := &Model{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedModel_Input(r randyMxnet, easy bool) *Model_Input {
	this := &Model_Input{}
	this.Type = string(randStringMxnet(r))
	v1 := r.Intn(10)
	this.Dimensions = make([]int64, v1)
	for i := 0; i < v1; i++ {
		this.Dimensions[i] = int64(r.Int63())
		if r.Intn(2) == 0 {
			this.Dimensions[i] *= -1
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedModel_Output(r randyMxnet, easy bool) *Model_Output {
	this := &Model_Output{}
	this.Type = string(randStringMxnet(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedModel_Information(r randyMxnet, easy bool) *Model_Information {
	this := &Model_Information{}
	this.Name = string(randStringMxnet(r))
	this.Description = string(randStringMxnet(r))
	if r.Intn(10) != 0 {
		v2 := r.Intn(10)
		this.Container = make(map[string]*ContainerArchicture)
		for i := 0; i < v2; i++ {
			this.Container[randStringMxnet(r)] = NewPopulatedContainerArchicture(r, easy)
		}
	}
	this.Framework = string(randStringMxnet(r))
	this.Version = string(randStringMxnet(r))
	this.Type = string(randStringMxnet(r))
	this.DatasetName = string(randStringMxnet(r))
	this.GraphUrl = string(randStringMxnet(r))
	this.WeightsUrl = string(randStringMxnet(r))
	this.FeaturesUrl = string(randStringMxnet(r))
	if r.Intn(10) != 0 {
		this.Input = NewPopulatedModel_Input(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Output = NewPopulatedModel_Output(r, easy)
	}
	v3 := r.Intn(10)
	this.MeanImage = make([]float32, v3)
	for i := 0; i < v3; i++ {
		this.MeanImage[i] = float32(r.Float32())
		if r.Intn(2) == 0 {
			this.MeanImage[i] *= -1
		}
	}
	v4 := r.Intn(10)
	this.References = make([]string, v4)
	for i := 0; i < v4; i++ {
		this.References[i] = string(randStringMxnet(r))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedModel_Graph(r randyMxnet, easy bool) *Model_Graph {
	this := &Model_Graph{}
	if r.Intn(10) != 0 {
		v5 := r.Intn(5)
		this.Nodes = make([]*Model_Graph_Node, v5)
		for i := 0; i < v5; i++ {
			this.Nodes[i] = NewPopulatedModel_Graph_Node(r, easy)
		}
	}
	v6 := r.Intn(10)
	this.ArgNodes = make([]int64, v6)
	for i := 0; i < v6; i++ {
		this.ArgNodes[i] = int64(r.Int63())
		if r.Intn(2) == 0 {
			this.ArgNodes[i] *= -1
		}
	}
	v7 := r.Intn(10)
	this.NodeRowPtr = make([]int64, v7)
	for i := 0; i < v7; i++ {
		this.NodeRowPtr[i] = int64(r.Int63())
		if r.Intn(2) == 0 {
			this.NodeRowPtr[i] *= -1
		}
	}
	if r.Intn(10) != 0 {
		v8 := r.Intn(5)
		this.Heads = make([]*Model_Graph_NodeEntry, v8)
		for i := 0; i < v8; i++ {
			this.Heads[i] = NewPopulatedModel_Graph_NodeEntry(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		this.Attrs = NewPopulatedModel_Graph_Attributes(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedModel_Graph_NodeEntry(r randyMxnet, easy bool) *Model_Graph_NodeEntry {
	this := &Model_Graph_NodeEntry{}
	this.NodeId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.NodeId *= -1
	}
	this.Index = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Index *= -1
	}
	this.Version = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Version *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedModel_Graph_Node(r randyMxnet, easy bool) *Model_Graph_Node {
	this := &Model_Graph_Node{}
	this.Op = string(randStringMxnet(r))
	if r.Intn(10) != 0 {
		v9 := r.Intn(10)
		this.Param = make(map[string]string)
		for i := 0; i < v9; i++ {
			this.Param[randStringMxnet(r)] = randStringMxnet(r)
		}
	}
	this.Name = string(randStringMxnet(r))
	if r.Intn(10) != 0 {
		v10 := r.Intn(5)
		this.Inputs = make([]*Model_Graph_NodeEntry, v10)
		for i := 0; i < v10; i++ {
			this.Inputs[i] = NewPopulatedModel_Graph_NodeEntry(r, easy)
		}
	}
	this.BackwardSourceId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.BackwardSourceId *= -1
	}
	v11 := r.Intn(10)
	this.ControlDeps = make([]int64, v11)
	for i := 0; i < v11; i++ {
		this.ControlDeps[i] = int64(r.Int63())
		if r.Intn(2) == 0 {
			this.ControlDeps[i] *= -1
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedModel_Graph_Attributes(r randyMxnet, easy bool) *Model_Graph_Attributes {
	this := &Model_Graph_Attributes{}
	if r.Intn(10) != 0 {
		v12 := r.Intn(10)
		this.Attrs = make(map[string]string)
		for i := 0; i < v12; i++ {
			this.Attrs[randStringMxnet(r)] = randStringMxnet(r)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedModelInformations(r randyMxnet, easy bool) *ModelInformations {
	this := &ModelInformations{}
	if r.Intn(10) != 0 {
		v13 := r.Intn(5)
		this.Info = make([]*Model_Information, v13)
		for i := 0; i < v13; i++ {
			this.Info[i] = NewPopulatedModel_Information(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMXNetInferenceRequest(r randyMxnet, easy bool) *MXNetInferenceRequest {
	this := &MXNetInferenceRequest{}
	this.Id = string(randStringMxnet(r))
	this.ModelName = string(randStringMxnet(r))
	this.Url = string(randStringMxnet(r))
	v14 := r.Intn(100)
	this.Data = make([]byte, v14)
	for i := 0; i < v14; i++ {
		this.Data[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedFeature(r randyMxnet, easy bool) *Feature {
	this := &Feature{}
	this.Index = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Index *= -1
	}
	this.Name = string(randStringMxnet(r))
	this.Probability = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.Probability *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMXNetInferenceResponse(r randyMxnet, easy bool) *MXNetInferenceResponse {
	this := &MXNetInferenceResponse{}
	this.Id = string(randStringMxnet(r))
	if r.Intn(10) != 0 {
		v15 := r.Intn(5)
		this.Features = make([]*Feature, v15)
		for i := 0; i < v15; i++ {
			this.Features[i] = NewPopulatedFeature(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		this.Error = NewPopulatedErrorStatus(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMXNetModelInformationRequest(r randyMxnet, easy bool) *MXNetModelInformationRequest {
	this := &MXNetModelInformationRequest{}
	this.ModelName = string(randStringMxnet(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedNull(r randyMxnet, easy bool) *Null {
	this := &Null{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyMxnet interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneMxnet(r randyMxnet) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringMxnet(r randyMxnet) string {
	v16 := r.Intn(100)
	tmps := make([]rune, v16)
	for i := 0; i < v16; i++ {
		tmps[i] = randUTF8RuneMxnet(r)
	}
	return string(tmps)
}
func randUnrecognizedMxnet(r randyMxnet, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldMxnet(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldMxnet(dAtA []byte, r randyMxnet, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateMxnet(dAtA, uint64(key))
		v17 := r.Int63()
		if r.Intn(2) == 0 {
			v17 *= -1
		}
		dAtA = encodeVarintPopulateMxnet(dAtA, uint64(v17))
	case 1:
		dAtA = encodeVarintPopulateMxnet(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateMxnet(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateMxnet(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateMxnet(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateMxnet(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *ErrorStatus) Size() (n int) {
	var l int
	_ = l
	if m.Ok {
		n += 2
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovMxnet(uint64(l))
	}
	return n
}

func (m *ContainerArchicture) Size() (n int) {
	var l int
	_ = l
	l = len(m.Gpu)
	if l > 0 {
		n += 1 + l + sovMxnet(uint64(l))
	}
	l = len(m.Cpu)
	if l > 0 {
		n += 1 + l + sovMxnet(uint64(l))
	}
	return n
}

func (m *Model) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *Model_Input) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovMxnet(uint64(l))
	}
	if len(m.Dimensions) > 0 {
		l = 0
		for _, e := range m.Dimensions {
			l += sovMxnet(uint64(e))
		}
		n += 1 + sovMxnet(uint64(l)) + l
	}
	return n
}

func (m *Model_Output) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovMxnet(uint64(l))
	}
	return n
}

func (m *Model_Information) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMxnet(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovMxnet(uint64(l))
	}
	if len(m.Container) > 0 {
		for k, v := range m.Container {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMxnet(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovMxnet(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovMxnet(uint64(mapEntrySize))
		}
	}
	l = len(m.Framework)
	if l > 0 {
		n += 1 + l + sovMxnet(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovMxnet(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovMxnet(uint64(l))
	}
	l = len(m.DatasetName)
	if l > 0 {
		n += 1 + l + sovMxnet(uint64(l))
	}
	l = len(m.GraphUrl)
	if l > 0 {
		n += 1 + l + sovMxnet(uint64(l))
	}
	l = len(m.WeightsUrl)
	if l > 0 {
		n += 1 + l + sovMxnet(uint64(l))
	}
	l = len(m.FeaturesUrl)
	if l > 0 {
		n += 1 + l + sovMxnet(uint64(l))
	}
	if m.Input != nil {
		l = m.Input.Size()
		n += 1 + l + sovMxnet(uint64(l))
	}
	if m.Output != nil {
		l = m.Output.Size()
		n += 1 + l + sovMxnet(uint64(l))
	}
	if len(m.MeanImage) > 0 {
		n += 1 + sovMxnet(uint64(len(m.MeanImage)*4)) + len(m.MeanImage)*4
	}
	if len(m.References) > 0 {
		for _, s := range m.References {
			l = len(s)
			n += 1 + l + sovMxnet(uint64(l))
		}
	}
	return n
}

func (m *Model_Graph) Size() (n int) {
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovMxnet(uint64(l))
		}
	}
	if len(m.ArgNodes) > 0 {
		l = 0
		for _, e := range m.ArgNodes {
			l += sovMxnet(uint64(e))
		}
		n += 1 + sovMxnet(uint64(l)) + l
	}
	if len(m.NodeRowPtr) > 0 {
		l = 0
		for _, e := range m.NodeRowPtr {
			l += sovMxnet(uint64(e))
		}
		n += 1 + sovMxnet(uint64(l)) + l
	}
	if len(m.Heads) > 0 {
		for _, e := range m.Heads {
			l = e.Size()
			n += 1 + l + sovMxnet(uint64(l))
		}
	}
	if m.Attrs != nil {
		l = m.Attrs.Size()
		n += 1 + l + sovMxnet(uint64(l))
	}
	return n
}

func (m *Model_Graph_NodeEntry) Size() (n int) {
	var l int
	_ = l
	if m.NodeId != 0 {
		n += 1 + sovMxnet(uint64(m.NodeId))
	}
	if m.Index != 0 {
		n += 1 + sovMxnet(uint64(m.Index))
	}
	if m.Version != 0 {
		n += 1 + sovMxnet(uint64(m.Version))
	}
	return n
}

func (m *Model_Graph_Node) Size() (n int) {
	var l int
	_ = l
	l = len(m.Op)
	if l > 0 {
		n += 1 + l + sovMxnet(uint64(l))
	}
	if len(m.Param) > 0 {
		for k, v := range m.Param {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMxnet(uint64(len(k))) + 1 + len(v) + sovMxnet(uint64(len(v)))
			n += mapEntrySize + 1 + sovMxnet(uint64(mapEntrySize))
		}
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMxnet(uint64(l))
	}
	if len(m.Inputs) > 0 {
		for _, e := range m.Inputs {
			l = e.Size()
			n += 1 + l + sovMxnet(uint64(l))
		}
	}
	if m.BackwardSourceId != 0 {
		n += 1 + sovMxnet(uint64(m.BackwardSourceId))
	}
	if len(m.ControlDeps) > 0 {
		l = 0
		for _, e := range m.ControlDeps {
			l += sovMxnet(uint64(e))
		}
		n += 1 + sovMxnet(uint64(l)) + l
	}
	return n
}

func (m *Model_Graph_Attributes) Size() (n int) {
	var l int
	_ = l
	if len(m.Attrs) > 0 {
		for k, v := range m.Attrs {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMxnet(uint64(len(k))) + 1 + len(v) + sovMxnet(uint64(len(v)))
			n += mapEntrySize + 1 + sovMxnet(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ModelInformations) Size() (n int) {
	var l int
	_ = l
	if len(m.Info) > 0 {
		for _, e := range m.Info {
			l = e.Size()
			n += 1 + l + sovMxnet(uint64(l))
		}
	}
	return n
}

func (m *MXNetInferenceRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMxnet(uint64(l))
	}
	l = len(m.ModelName)
	if l > 0 {
		n += 1 + l + sovMxnet(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovMxnet(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovMxnet(uint64(l))
	}
	return n
}

func (m *Feature) Size() (n int) {
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovMxnet(uint64(m.Index))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMxnet(uint64(l))
	}
	if m.Probability != 0 {
		n += 5
	}
	return n
}

func (m *MXNetInferenceResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMxnet(uint64(l))
	}
	if len(m.Features) > 0 {
		for _, e := range m.Features {
			l = e.Size()
			n += 1 + l + sovMxnet(uint64(l))
		}
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovMxnet(uint64(l))
	}
	return n
}

func (m *MXNetModelInformationRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ModelName)
	if l > 0 {
		n += 1 + l + sovMxnet(uint64(l))
	}
	return n
}

func (m *Null) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovMxnet(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMxnet(x uint64) (n int) {
	return sovMxnet(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ErrorStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ErrorStatus{`,
		`Ok:` + fmt.Sprintf("%v", this.Ok) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ContainerArchicture) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ContainerArchicture{`,
		`Gpu:` + fmt.Sprintf("%v", this.Gpu) + `,`,
		`Cpu:` + fmt.Sprintf("%v", this.Cpu) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Model) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Model{`,
		`}`,
	}, "")
	return s
}
func (this *Model_Input) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Model_Input{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Dimensions:` + fmt.Sprintf("%v", this.Dimensions) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Model_Output) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Model_Output{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Model_Information) String() string {
	if this == nil {
		return "nil"
	}
	keysForContainer := make([]string, 0, len(this.Container))
	for k, _ := range this.Container {
		keysForContainer = append(keysForContainer, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForContainer)
	mapStringForContainer := "map[string]*ContainerArchicture{"
	for _, k := range keysForContainer {
		mapStringForContainer += fmt.Sprintf("%v: %v,", k, this.Container[k])
	}
	mapStringForContainer += "}"
	s := strings.Join([]string{`&Model_Information{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Container:` + mapStringForContainer + `,`,
		`Framework:` + fmt.Sprintf("%v", this.Framework) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`DatasetName:` + fmt.Sprintf("%v", this.DatasetName) + `,`,
		`GraphUrl:` + fmt.Sprintf("%v", this.GraphUrl) + `,`,
		`WeightsUrl:` + fmt.Sprintf("%v", this.WeightsUrl) + `,`,
		`FeaturesUrl:` + fmt.Sprintf("%v", this.FeaturesUrl) + `,`,
		`Input:` + strings.Replace(fmt.Sprintf("%v", this.Input), "Model_Input", "Model_Input", 1) + `,`,
		`Output:` + strings.Replace(fmt.Sprintf("%v", this.Output), "Model_Output", "Model_Output", 1) + `,`,
		`MeanImage:` + fmt.Sprintf("%v", this.MeanImage) + `,`,
		`References:` + fmt.Sprintf("%v", this.References) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Model_Graph) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Model_Graph{`,
		`Nodes:` + strings.Replace(fmt.Sprintf("%v", this.Nodes), "Model_Graph_Node", "Model_Graph_Node", 1) + `,`,
		`ArgNodes:` + fmt.Sprintf("%v", this.ArgNodes) + `,`,
		`NodeRowPtr:` + fmt.Sprintf("%v", this.NodeRowPtr) + `,`,
		`Heads:` + strings.Replace(fmt.Sprintf("%v", this.Heads), "Model_Graph_NodeEntry", "Model_Graph_NodeEntry", 1) + `,`,
		`Attrs:` + strings.Replace(fmt.Sprintf("%v", this.Attrs), "Model_Graph_Attributes", "Model_Graph_Attributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Model_Graph_NodeEntry) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Model_Graph_NodeEntry{`,
		`NodeId:` + fmt.Sprintf("%v", this.NodeId) + `,`,
		`Index:` + fmt.Sprintf("%v", this.Index) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Model_Graph_Node) String() string {
	if this == nil {
		return "nil"
	}
	keysForParam := make([]string, 0, len(this.Param))
	for k, _ := range this.Param {
		keysForParam = append(keysForParam, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForParam)
	mapStringForParam := "map[string]string{"
	for _, k := range keysForParam {
		mapStringForParam += fmt.Sprintf("%v: %v,", k, this.Param[k])
	}
	mapStringForParam += "}"
	s := strings.Join([]string{`&Model_Graph_Node{`,
		`Op:` + fmt.Sprintf("%v", this.Op) + `,`,
		`Param:` + mapStringForParam + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Inputs:` + strings.Replace(fmt.Sprintf("%v", this.Inputs), "Model_Graph_NodeEntry", "Model_Graph_NodeEntry", 1) + `,`,
		`BackwardSourceId:` + fmt.Sprintf("%v", this.BackwardSourceId) + `,`,
		`ControlDeps:` + fmt.Sprintf("%v", this.ControlDeps) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Model_Graph_Attributes) String() string {
	if this == nil {
		return "nil"
	}
	keysForAttrs := make([]string, 0, len(this.Attrs))
	for k, _ := range this.Attrs {
		keysForAttrs = append(keysForAttrs, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAttrs)
	mapStringForAttrs := "map[string]string{"
	for _, k := range keysForAttrs {
		mapStringForAttrs += fmt.Sprintf("%v: %v,", k, this.Attrs[k])
	}
	mapStringForAttrs += "}"
	s := strings.Join([]string{`&Model_Graph_Attributes{`,
		`Attrs:` + mapStringForAttrs + `,`,
		`}`,
	}, "")
	return s
}
func (this *ModelInformations) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ModelInformations{`,
		`Info:` + strings.Replace(fmt.Sprintf("%v", this.Info), "Model_Information", "Model_Information", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MXNetInferenceRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MXNetInferenceRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`ModelName:` + fmt.Sprintf("%v", this.ModelName) + `,`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Feature) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Feature{`,
		`Index:` + fmt.Sprintf("%v", this.Index) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Probability:` + fmt.Sprintf("%v", this.Probability) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MXNetInferenceResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MXNetInferenceResponse{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Features:` + strings.Replace(fmt.Sprintf("%v", this.Features), "Feature", "Feature", 1) + `,`,
		`Error:` + strings.Replace(fmt.Sprintf("%v", this.Error), "ErrorStatus", "ErrorStatus", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MXNetModelInformationRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MXNetModelInformationRequest{`,
		`ModelName:` + fmt.Sprintf("%v", this.ModelName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Null) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Null{`,
		`}`,
	}, "")
	return s
}
func valueToStringMxnet(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ErrorStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMxnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ErrorStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ErrorStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMxnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMxnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMxnet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMxnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMxnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerArchicture) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMxnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerArchicture: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerArchicture: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gpu", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMxnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMxnet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gpu = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cpu", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMxnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMxnet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cpu = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMxnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMxnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Model) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMxnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Model: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Model: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMxnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMxnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Model_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMxnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMxnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMxnet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMxnet
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Dimensions = append(m.Dimensions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMxnet
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMxnet
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMxnet
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Dimensions = append(m.Dimensions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Dimensions", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMxnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMxnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Model_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMxnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMxnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMxnet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMxnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMxnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Model_Information) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMxnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Information: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Information: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMxnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMxnet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMxnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMxnet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Container", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMxnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMxnet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMxnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMxnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthMxnet
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Container == nil {
				m.Container = make(map[string]*ContainerArchicture)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMxnet
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapmsglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMxnet
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					mapmsglen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if mapmsglen < 0 {
					return ErrInvalidLengthMxnet
				}
				postmsgIndex := iNdEx + mapmsglen
				if mapmsglen < 0 {
					return ErrInvalidLengthMxnet
				}
				if postmsgIndex > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := &ContainerArchicture{}
				if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
					return err
				}
				iNdEx = postmsgIndex
				m.Container[mapkey] = mapvalue
			} else {
				var mapvalue *ContainerArchicture
				m.Container[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Framework", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMxnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMxnet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Framework = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMxnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMxnet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMxnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMxnet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatasetName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMxnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMxnet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DatasetName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GraphUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMxnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMxnet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GraphUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeightsUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMxnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMxnet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WeightsUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeaturesUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMxnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMxnet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeaturesUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMxnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMxnet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Input == nil {
				m.Input = &Model_Input{}
			}
			if err := m.Input.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMxnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMxnet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Output == nil {
				m.Output = &Model_Output{}
			}
			if err := m.Output.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += 4
				v = uint32(dAtA[iNdEx-4])
				v |= uint32(dAtA[iNdEx-3]) << 8
				v |= uint32(dAtA[iNdEx-2]) << 16
				v |= uint32(dAtA[iNdEx-1]) << 24
				v2 := float32(math.Float32frombits(v))
				m.MeanImage = append(m.MeanImage, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMxnet
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMxnet
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					iNdEx += 4
					v = uint32(dAtA[iNdEx-4])
					v |= uint32(dAtA[iNdEx-3]) << 8
					v |= uint32(dAtA[iNdEx-2]) << 16
					v |= uint32(dAtA[iNdEx-1]) << 24
					v2 := float32(math.Float32frombits(v))
					m.MeanImage = append(m.MeanImage, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MeanImage", wireType)
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field References", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMxnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMxnet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.References = append(m.References, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMxnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMxnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Model_Graph) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMxnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Graph: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Graph: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMxnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMxnet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &Model_Graph_Node{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMxnet
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ArgNodes = append(m.ArgNodes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMxnet
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMxnet
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMxnet
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ArgNodes = append(m.ArgNodes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ArgNodes", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMxnet
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.NodeRowPtr = append(m.NodeRowPtr, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMxnet
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMxnet
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMxnet
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.NodeRowPtr = append(m.NodeRowPtr, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeRowPtr", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Heads", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMxnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMxnet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Heads = append(m.Heads, &Model_Graph_NodeEntry{})
			if err := m.Heads[len(m.Heads)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attrs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMxnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMxnet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attrs == nil {
				m.Attrs = &Model_Graph_Attributes{}
			}
			if err := m.Attrs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMxnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMxnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Model_Graph_NodeEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMxnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			m.NodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMxnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMxnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMxnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMxnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMxnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Model_Graph_Node) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMxnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Node: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Node: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMxnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMxnet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Op = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Param", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMxnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMxnet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMxnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMxnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthMxnet
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Param == nil {
				m.Param = make(map[string]string)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMxnet
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var stringLenmapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMxnet
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLenmapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLenmapvalue := int(stringLenmapvalue)
				if intStringLenmapvalue < 0 {
					return ErrInvalidLengthMxnet
				}
				postStringIndexmapvalue := iNdEx + intStringLenmapvalue
				if postStringIndexmapvalue > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := string(dAtA[iNdEx:postStringIndexmapvalue])
				iNdEx = postStringIndexmapvalue
				m.Param[mapkey] = mapvalue
			} else {
				var mapvalue string
				m.Param[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMxnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMxnet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMxnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMxnet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inputs = append(m.Inputs, &Model_Graph_NodeEntry{})
			if err := m.Inputs[len(m.Inputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackwardSourceId", wireType)
			}
			m.BackwardSourceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMxnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BackwardSourceId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMxnet
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ControlDeps = append(m.ControlDeps, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMxnet
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMxnet
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMxnet
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ControlDeps = append(m.ControlDeps, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ControlDeps", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMxnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMxnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Model_Graph_Attributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMxnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Attributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Attributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attrs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMxnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMxnet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMxnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMxnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthMxnet
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Attrs == nil {
				m.Attrs = make(map[string]string)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMxnet
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var stringLenmapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMxnet
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLenmapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLenmapvalue := int(stringLenmapvalue)
				if intStringLenmapvalue < 0 {
					return ErrInvalidLengthMxnet
				}
				postStringIndexmapvalue := iNdEx + intStringLenmapvalue
				if postStringIndexmapvalue > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := string(dAtA[iNdEx:postStringIndexmapvalue])
				iNdEx = postStringIndexmapvalue
				m.Attrs[mapkey] = mapvalue
			} else {
				var mapvalue string
				m.Attrs[mapkey] = mapvalue
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMxnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMxnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelInformations) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMxnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelInformations: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelInformations: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMxnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMxnet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = append(m.Info, &Model_Information{})
			if err := m.Info[len(m.Info)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMxnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMxnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MXNetInferenceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMxnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MXNetInferenceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MXNetInferenceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMxnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMxnet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMxnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMxnet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMxnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMxnet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMxnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMxnet
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMxnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMxnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Feature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMxnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Feature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Feature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMxnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMxnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMxnet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Probability", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Probability = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipMxnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMxnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MXNetInferenceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMxnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MXNetInferenceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MXNetInferenceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMxnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMxnet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Features", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMxnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMxnet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Features = append(m.Features, &Feature{})
			if err := m.Features[len(m.Features)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMxnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMxnet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &ErrorStatus{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMxnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMxnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MXNetModelInformationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMxnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MXNetModelInformationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MXNetModelInformationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMxnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMxnet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMxnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMxnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Null) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMxnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Null: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Null: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMxnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMxnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMxnet(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMxnet
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMxnet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMxnet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMxnet
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMxnet
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMxnet(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMxnet = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMxnet   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("mxnet.proto", fileDescriptorMxnet) }

var fileDescriptorMxnet = []byte{
	// 1464 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xf7, 0x7a, 0xe3, 0x24, 0x7e, 0x4e, 0x4b, 0x99, 0xf4, 0xcf, 0x76, 0x9b, 0xae, 0xdd, 0x05,
	0x91, 0xa8, 0x6a, 0x5d, 0x08, 0x02, 0xaa, 0x82, 0x40, 0x75, 0x5b, 0x4a, 0x24, 0x1a, 0x4a, 0xa2,
	0x4a, 0x05, 0x44, 0xad, 0xb5, 0x77, 0xec, 0x2c, 0xf1, 0xee, 0x2c, 0xb3, 0xb3, 0x4d, 0x7c, 0xe3,
	0x23, 0xf4, 0x63, 0x20, 0x81, 0xb8, 0x21, 0x71, 0xe4, 0x88, 0xc4, 0xa5, 0x47, 0x24, 0x24, 0xab,
	0x31, 0x12, 0xea, 0xb1, 0x32, 0x17, 0x8e, 0x68, 0x66, 0xd6, 0xf6, 0x8c, 0xe3, 0x34, 0xc9, 0x81,
	0xdb, 0xe6, 0xbd, 0xf9, 0xbd, 0x37, 0xef, 0xdf, 0x6f, 0x9e, 0x03, 0xa5, 0x70, 0x37, 0xc2, 0xac,
	0x1a, 0x53, 0xc2, 0x08, 0x7a, 0xa5, 0xe9, 0xd1, 0xb0, 0x53, 0x25, 0xb4, 0x5d, 0x15, 0x62, 0xfb,
	0x6a, 0x3b, 0x60, 0x5b, 0x69, 0xa3, 0xda, 0x24, 0xe1, 0xb5, 0x36, 0x69, 0x93, 0x6b, 0xe2, 0x5c,
	0x23, 0x6d, 0x89, 0xbf, 0xc4, 0x1f, 0xe2, 0x4b, 0xe2, 0xdd, 0x08, 0x4a, 0x77, 0x28, 0x25, 0x74,
	0x93, 0x79, 0x2c, 0x4d, 0xd0, 0x32, 0xe4, 0xc9, 0xb6, 0x65, 0x54, 0x8c, 0x95, 0xf9, 0xda, 0xb9,
	0x41, 0xaf, 0xbc, 0xd8, 0xf5, 0xc2, 0xce, 0x0d, 0x97, 0x6c, 0x5f, 0x21, 0x61, 0xc0, 0x70, 0x18,
	0xb3, 0xae, 0xbb, 0x91, 0x27, 0xdb, 0xe8, 0x5d, 0x98, 0x0b, 0x71, 0x92, 0x78, 0x6d, 0x6c, 0xe5,
	0x2b, 0xc6, 0x4a, 0xb1, 0xb6, 0x34, 0xe8, 0x95, 0x2d, 0x79, 0x3a, 0x53, 0xa8, 0x90, 0xe1, 0x61,
	0x37, 0x84, 0xc5, 0x5b, 0x24, 0x62, 0x5e, 0x10, 0x61, 0x7a, 0x93, 0x36, 0xb7, 0x82, 0x26, 0x4b,
	0x29, 0x46, 0x97, 0xc1, 0x6c, 0xc7, 0xa9, 0x70, 0x5c, 0xac, 0x59, 0x83, 0x5e, 0xf9, 0xb4, 0x34,
	0xd5, 0x8e, 0x53, 0xd5, 0x0c, 0x3f, 0xc4, 0xcf, 0x36, 0xe3, 0x34, 0x73, 0xab, 0x9c, 0x6d, 0x4e,
	0x9c, 0x6d, 0xc6, 0xa9, 0xfb, 0xf3, 0x22, 0x14, 0xee, 0x11, 0x1f, 0x77, 0xec, 0x1d, 0x28, 0xac,
	0x45, 0x71, 0xca, 0xd0, 0x55, 0x98, 0x61, 0xdd, 0x18, 0x67, 0xbe, 0xce, 0x0f, 0x7a, 0xe5, 0x33,
	0x12, 0xcf, 0xa5, 0xaa, 0x01, 0x71, 0x0c, 0x7d, 0x04, 0xe0, 0x07, 0x21, 0x8e, 0x92, 0x80, 0x44,
	0x89, 0x95, 0xaf, 0x98, 0x2b, 0x66, 0xad, 0x3c, 0xe8, 0x95, 0x2f, 0x48, 0xd0, 0x58, 0xa7, 0x42,
	0x15, 0x88, 0xfd, 0x1e, 0xcc, 0x7e, 0x96, 0xb2, 0xe3, 0x7b, 0xb6, 0x7f, 0x98, 0x87, 0xd2, 0x5a,
	0xd4, 0x22, 0x34, 0xf4, 0x58, 0x40, 0x22, 0x0e, 0x8f, 0xbc, 0x70, 0x0a, 0x9c, 0x4b, 0x35, 0x38,
	0x17, 0xa0, 0x1a, 0x94, 0x7c, 0x9c, 0x34, 0x69, 0x10, 0x73, 0x74, 0x96, 0xae, 0xca, 0xa0, 0x57,
	0x5e, 0xca, 0x6e, 0x3e, 0x56, 0xaa, 0x60, 0x15, 0x84, 0x08, 0x14, 0x9b, 0xc3, 0x6a, 0x59, 0x66,
	0xc5, 0x5c, 0x29, 0xad, 0xbe, 0x55, 0x9d, 0xe8, 0xb8, 0xaa, 0xc8, 0x6f, 0x55, 0xb9, 0x69, 0x75,
	0x54, 0xe1, 0x3b, 0x11, 0xa3, 0xdd, 0x9a, 0x33, 0xe8, 0x95, 0xed, 0xac, 0x46, 0x43, 0x8d, 0xea,
	0x72, 0xec, 0x03, 0x7d, 0x00, 0xc5, 0x16, 0xf5, 0x42, 0xbc, 0x43, 0xe8, 0xb6, 0x35, 0x23, 0xae,
	0xac, 0xa0, 0x47, 0x2a, 0x0d, 0x3d, 0x92, 0xf2, 0xa6, 0x7c, 0x8c, 0x29, 0x4f, 0xbb, 0x55, 0x98,
	0x6c, 0xca, 0x4c, 0xa1, 0x35, 0x65, 0x26, 0x1b, 0x15, 0x66, 0xf6, 0x68, 0x2d, 0x71, 0x1b, 0x16,
	0x7c, 0x8f, 0x79, 0x09, 0x66, 0x75, 0x51, 0x90, 0x39, 0x01, 0xbb, 0x34, 0xe8, 0x95, 0x2f, 0x66,
	0xa9, 0x55, 0xb4, 0x7a, 0x6e, 0xa5, 0x62, 0x9d, 0xd7, 0xe7, 0x7d, 0x28, 0xb6, 0xa9, 0x17, 0x6f,
	0xd5, 0x53, 0xda, 0xb1, 0xe6, 0x27, 0x43, 0x1d, 0xa9, 0x54, 0xfc, 0xbc, 0x90, 0x3e, 0xa0, 0x1d,
	0x74, 0x13, 0x4a, 0x3b, 0x38, 0x68, 0x6f, 0xb1, 0x44, 0xc0, 0x8b, 0x93, 0xc5, 0x55, 0x94, 0x5a,
	0x5f, 0x66, 0x72, 0x6e, 0xe2, 0x36, 0x2c, 0xb4, 0xb0, 0xc7, 0xa7, 0x4f, 0xda, 0x80, 0xc9, 0x28,
	0x54, 0xad, 0x16, 0xc5, 0x50, 0xc1, 0xad, 0xac, 0x43, 0x21, 0xe0, 0x63, 0x65, 0x95, 0x2a, 0xc6,
	0x4a, 0x69, 0x75, 0xe9, 0xc0, 0xee, 0x88, 0x53, 0x56, 0xb3, 0x07, 0xbd, 0xf2, 0x59, 0x69, 0x5c,
	0x80, 0x54, 0xab, 0xd2, 0x0c, 0xda, 0x80, 0x59, 0x22, 0xa6, 0xc5, 0x5a, 0x10, 0x06, 0x2f, 0x1e,
	0x60, 0x50, 0x8e, 0x54, 0xed, 0xc2, 0xa0, 0x57, 0x3e, 0x97, 0x71, 0x94, 0x90, 0xa8, 0x26, 0x33,
	0x4b, 0xe8, 0x43, 0x80, 0x10, 0x7b, 0x51, 0x3d, 0x08, 0x39, 0x5d, 0x9d, 0xa8, 0x98, 0x2b, 0x79,
	0x75, 0x84, 0xc7, 0x3a, 0xad, 0xad, 0xb8, 0x78, 0x8d, 0x4b, 0x39, 0x05, 0x50, 0xdc, 0xc2, 0x14,
	0x47, 0x4d, 0x9c, 0x58, 0x27, 0x2b, 0xe6, 0x4a, 0x51, 0xc5, 0x8f, 0x75, 0x5a, 0xaa, 0xc7, 0x62,
	0xbb, 0x01, 0x27, 0xf5, 0x91, 0x40, 0xa7, 0xc0, 0xdc, 0xc6, 0x5d, 0x39, 0xca, 0x1b, 0xfc, 0x13,
	0xdd, 0x80, 0xc2, 0x63, 0xaf, 0x93, 0x4a, 0x3a, 0x2d, 0xad, 0xbe, 0xbe, 0x2f, 0xee, 0x29, 0xb4,
	0xb9, 0x21, 0x21, 0x37, 0xf2, 0xd7, 0x0d, 0xfb, 0xf7, 0x22, 0x14, 0xee, 0xf2, 0xf6, 0x40, 0x9b,
	0x50, 0x88, 0x88, 0x8f, 0x13, 0xcb, 0x10, 0x03, 0x7b, 0xe9, 0x80, 0x0c, 0x8a, 0xc3, 0xd5, 0x75,
	0xe2, 0x63, 0xb5, 0x2e, 0x02, 0xa9, 0xd5, 0x45, 0x48, 0x78, 0xb7, 0x7a, 0xb4, 0x5d, 0x97, 0x86,
	0x25, 0x0b, 0x2a, 0xdd, 0x3a, 0x52, 0x69, 0xdd, 0xea, 0xd1, 0xf6, 0xba, 0x00, 0xdf, 0x82, 0x05,
	0xae, 0xad, 0x53, 0xb2, 0x53, 0x8f, 0x99, 0x64, 0x12, 0x53, 0x6d, 0x35, 0x55, 0xab, 0x25, 0x91,
	0x2b, 0x36, 0xc8, 0xce, 0x7d, 0x46, 0xd1, 0x43, 0x28, 0x6c, 0x61, 0xcf, 0x4f, 0xac, 0x19, 0x11,
	0xd6, 0x1b, 0x87, 0x86, 0x25, 0xc9, 0x47, 0x89, 0x4d, 0xc0, 0xb5, 0xd8, 0x84, 0x04, 0x7d, 0x01,
	0x05, 0x8f, 0x31, 0x9a, 0x08, 0xd2, 0x28, 0xad, 0x2e, 0xbf, 0xd4, 0xf2, 0x4d, 0xc6, 0x68, 0xd0,
	0x48, 0x19, 0x4e, 0x54, 0xd3, 0x02, 0xaf, 0x99, 0x16, 0x12, 0xfb, 0x47, 0x03, 0x8a, 0xa3, 0xbb,
	0xa0, 0x77, 0x60, 0x4e, 0x44, 0x1a, 0xf8, 0xa2, 0xf2, 0xa6, 0xca, 0x4f, 0x99, 0x42, 0xeb, 0x5f,
	0x2e, 0x5b, 0xf3, 0xd1, 0x9b, 0x7c, 0xc6, 0x7c, 0xbc, 0x2b, 0x5a, 0xc3, 0x3c, 0x6c, 0x8a, 0x7c,
	0xbc, 0xab, 0x12, 0xa1, 0x39, 0xe9, 0xe8, 0x25, 0x44, 0x68, 0xff, 0x63, 0xc2, 0x0c, 0xbf, 0xae,
	0xd8, 0x03, 0xe2, 0xec, 0xa5, 0x51, 0xf7, 0x80, 0x58, 0xdf, 0x03, 0x62, 0x54, 0x87, 0x42, 0xec,
	0x51, 0x2f, 0x14, 0x3d, 0x51, 0x5a, 0xbd, 0x72, 0x68, 0x55, 0xaa, 0xf7, 0xf9, 0x71, 0x59, 0x1b,
	0x65, 0x7a, 0x85, 0x11, 0x3d, 0x83, 0x42, 0x34, 0x7a, 0xf5, 0xcc, 0xa3, 0xbd, 0x7a, 0x5f, 0xc1,
	0xac, 0x48, 0xca, 0x71, 0xdb, 0x44, 0xb9, 0x8a, 0xc4, 0x6b, 0x85, 0x90, 0x22, 0xf4, 0x00, 0x50,
	0xc3, 0x6b, 0x6e, 0xef, 0x78, 0xd4, 0xaf, 0x27, 0x24, 0xa5, 0x4d, 0x51, 0xca, 0x82, 0xc8, 0xf0,
	0xf2, 0xa0, 0x57, 0x7e, 0x4d, 0x1a, 0xd8, 0x7f, 0x46, 0x35, 0x76, 0x6a, 0xa8, 0xde, 0x14, 0xda,
	0x35, 0x9f, 0x33, 0x31, 0x7f, 0x01, 0x29, 0xe9, 0xd4, 0x7d, 0x1c, 0x27, 0xd6, 0xec, 0xe4, 0x78,
	0xa8, 0x5a, 0x8d, 0x89, 0x33, 0xc5, 0x6d, 0x1c, 0x27, 0xf6, 0x75, 0x80, 0x71, 0x6a, 0xa7, 0x10,
	0xcc, 0x69, 0x95, 0x60, 0x8a, 0x2a, 0x75, 0x3c, 0x31, 0x00, 0xc6, 0x6d, 0x8d, 0x3e, 0x19, 0x8e,
	0x83, 0xe4, 0x8f, 0xd5, 0x23, 0x8e, 0x83, 0xf8, 0x4c, 0x84, 0xf7, 0x61, 0xf7, 0x5f, 0x97, 0x76,
	0x93, 0x63, 0x5f, 0xc9, 0x6d, 0xc1, 0xab, 0xc2, 0x8b, 0xb2, 0x55, 0x24, 0xe8, 0x73, 0x98, 0x09,
	0xa2, 0x16, 0xc9, 0xee, 0xe5, 0x1e, 0xbe, 0x88, 0xa8, 0xed, 0xc2, 0x91, 0x5a, 0xbb, 0x70, 0x81,
	0xfb, 0xa7, 0x01, 0x67, 0xee, 0x3d, 0x5c, 0xc7, 0x6c, 0x2d, 0xca, 0xd8, 0x7a, 0x03, 0x7f, 0x9b,
	0xe2, 0x84, 0xf1, 0x09, 0xc8, 0xc6, 0x54, 0x9b, 0x00, 0xbd, 0x96, 0xf9, 0xc0, 0x17, 0xaf, 0x0b,
	0x77, 0x2c, 0x77, 0x01, 0xb9, 0x66, 0xa9, 0xaf, 0xcb, 0x48, 0xa7, 0xbf, 0x2e, 0x5c, 0x2c, 0xf6,
	0x80, 0xcb, 0x60, 0xf2, 0xe7, 0xd7, 0x9c, 0x5c, 0x67, 0x27, 0x5e, 0x5d, 0x7e, 0x88, 0x0f, 0x03,
	0x5f, 0x21, 0xc4, 0x66, 0xb4, 0xa0, 0x46, 0xc7, 0xa5, 0x5a, 0x74, 0x5c, 0xe0, 0xfe, 0x64, 0xc0,
	0xdc, 0xc7, 0xf2, 0xb1, 0x1e, 0x93, 0x88, 0xb1, 0x9f, 0x44, 0x7c, 0xbc, 0x3b, 0x85, 0x44, 0x86,
	0x93, 0x97, 0x3f, 0xf2, 0xbe, 0x19, 0x53, 0xd2, 0xf0, 0x1a, 0x41, 0x27, 0x60, 0x5d, 0x11, 0x4f,
	0x5e, 0x5d, 0x49, 0x14, 0xa5, 0xd6, 0xc3, 0x8a, 0xdc, 0xfd, 0xdb, 0x80, 0xb3, 0x93, 0xe5, 0x48,
	0x62, 0x12, 0x25, 0xf8, 0xe8, 0xf5, 0xd8, 0x84, 0xf9, 0xe1, 0x82, 0x92, 0x91, 0x92, 0xb5, 0xaf,
	0x53, 0xb2, 0xa4, 0xd4, 0x2e, 0x0e, 0x7a, 0xe5, 0xf3, 0xfa, 0xb6, 0xa3, 0xbd, 0x60, 0x43, 0x21,
	0x5f, 0x73, 0x30, 0xff, 0x99, 0x24, 0xc2, 0x9a, 0xb6, 0xe6, 0x28, 0x3f, 0xa2, 0xd4, 0xdc, 0x0a,
	0x90, 0x96, 0x5b, 0x21, 0x71, 0x1f, 0xc1, 0x92, 0x88, 0x73, 0xb2, 0xc9, 0x87, 0xdd, 0xa7, 0x37,
	0x95, 0x71, 0xdc, 0xa6, 0x72, 0x67, 0x61, 0x66, 0x3d, 0xed, 0x74, 0x56, 0x9f, 0x9b, 0x50, 0x10,
	0x8e, 0xd0, 0xd7, 0x30, 0x2f, 0x92, 0xfa, 0x60, 0xe3, 0x53, 0x34, 0x85, 0x14, 0xa7, 0xcd, 0x80,
	0xbd, 0x7c, 0xe8, 0x39, 0x59, 0x1c, 0x37, 0x87, 0xea, 0x00, 0x42, 0x5c, 0xeb, 0x72, 0x0a, 0xf9,
	0x1f, 0x1c, 0x6c, 0xc2, 0xe9, 0xbb, 0xfb, 0xf3, 0x95, 0xa0, 0x33, 0xfb, 0x4c, 0xf0, 0xc0, 0xed,
	0x03, 0xd8, 0x41, 0x85, 0xba, 0x39, 0xf4, 0x0d, 0x2c, 0x4e, 0x31, 0x8a, 0xae, 0x4e, 0xbf, 0xd6,
	0x01, 0xc5, 0xb2, 0x8f, 0xc0, 0x44, 0x6e, 0x0e, 0x3d, 0x82, 0x13, 0x43, 0x5f, 0x72, 0x4f, 0x3b,
	0xa6, 0x97, 0xa5, 0x97, 0xf1, 0xb0, 0x9b, 0xab, 0xdd, 0x7a, 0xba, 0xe7, 0xe4, 0xfe, 0xd8, 0x73,
	0x72, 0xcf, 0xf6, 0x1c, 0xe3, 0xc5, 0x9e, 0x63, 0xfc, 0xbb, 0xe7, 0x18, 0xdf, 0xf5, 0x1d, 0xe3,
	0xfb, 0xbe, 0x63, 0xfc, 0xd2, 0x77, 0x8c, 0x5f, 0xfb, 0x8e, 0xf1, 0x5b, 0xdf, 0x31, 0x9e, 0xf6,
	0x1d, 0xe3, 0x59, 0xdf, 0x31, 0x9e, 0xf7, 0x9d, 0xdc, 0x8b, 0xbe, 0x63, 0x3c, 0xf9, 0xcb, 0xc9,
	0x7d, 0x59, 0x10, 0x26, 0x1b, 0xb3, 0xe2, 0xbf, 0x02, 0x6f, 0xff, 0x17, 0x00, 0x00, 0xff, 0xff,
	0xe9, 0xa6, 0x8b, 0x36, 0x64, 0x10, 0x00, 0x00,
}
