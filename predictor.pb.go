// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: predictor.proto

package dlframework

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/gogo/protobuf/gogoproto"

import github_com_gogo_protobuf_protoc_gen_gogo_descriptor "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import compress_gzip "compress/gzip"
import bytes "bytes"
import io_ioutil "io/ioutil"

import strings "strings"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ExecutionOptions_TraceLevel int32

const (
	ExecutionOptions_NO_TRACE        ExecutionOptions_TraceLevel = 0
	ExecutionOptions_FRAMEWORK_TRACE ExecutionOptions_TraceLevel = 1
	ExecutionOptions_CPU_ONLY_TRACE  ExecutionOptions_TraceLevel = 2
	ExecutionOptions_HARDWARE_TRACE  ExecutionOptions_TraceLevel = 3
	ExecutionOptions_FULL_TRACE      ExecutionOptions_TraceLevel = 4
)

var ExecutionOptions_TraceLevel_name = map[int32]string{
	0: "NO_TRACE",
	1: "FRAMEWORK_TRACE",
	2: "CPU_ONLY_TRACE",
	3: "HARDWARE_TRACE",
	4: "FULL_TRACE",
}
var ExecutionOptions_TraceLevel_value = map[string]int32{
	"NO_TRACE":        0,
	"FRAMEWORK_TRACE": 1,
	"CPU_ONLY_TRACE":  2,
	"HARDWARE_TRACE":  3,
	"FULL_TRACE":      4,
}

func (x ExecutionOptions_TraceLevel) String() string {
	return proto.EnumName(ExecutionOptions_TraceLevel_name, int32(x))
}
func (ExecutionOptions_TraceLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorPredictor, []int{2, 0}
}

type CPUOptions struct {
}

func (m *CPUOptions) Reset()                    { *m = CPUOptions{} }
func (*CPUOptions) ProtoMessage()               {}
func (*CPUOptions) Descriptor() ([]byte, []int) { return fileDescriptorPredictor, []int{0} }

type GPUOptions struct {
	// A value between 0 and 1 that indicates what fraction of the
	// available GPU memory to pre-allocate for each process.  1 means
	// to pre-allocate all of the GPU memory, 0.5 means the process
	// allocates ~50% of the available GPU memory.
	PerProcessGpuMemoryFraction float64 `protobuf:"fixed64,1,opt,name=per_process_gpu_memory_fraction,json=perProcessGpuMemoryFraction,proto3" json:"per_process_gpu_memory_fraction,omitempty" yaml:"per_process_gpu_memory_fraction,omitempty"`
	// The type of GPU allocation strategy to use.
	//
	// Allowed values:
	// "": The empty string (default) uses a system-chosen default
	//     which may change over time.
	//
	// "BFC": A "Best-fit with coalescing" algorithm, simplified from a
	//        version of dlmalloc.
	AllocatorType string `protobuf:"bytes,2,opt,name=allocator_type,json=allocatorType,proto3" json:"allocator_type,omitempty" yaml:"allocator_type,omitempty"`
	// A comma-separated list of GPU ids that determines the 'visible'
	// to 'virtual' mapping of GPU devices.  For example, if TensorFlow
	// can see 8 GPU devices in the process, and one wanted to map
	// visible GPU devices 5 and 3 as "/device:GPU:0", and "/device:GPU:1", then
	// one would specify this field as "5,3".  This field is similar in spirit to
	// the CUDA_VISIBLE_DEVICES environment variable, except it applies to the
	// visible GPU devices in the process.
	//
	// NOTE: The GPU driver provides the process with the visible GPUs
	// in an order which is not guaranteed to have any correlation to
	// the *physical* GPU id in the machine.  This field is used for
	// remapping "visible" to "virtual", which means this operates only
	// after the process starts.  Users are required to use vendor
	// specific mechanisms (e.g., CUDA_VISIBLE_DEVICES) to control the
	// physical to visible device mapping prior to invoking TensorFlow.
	VisibleDeviceList string `protobuf:"bytes,5,opt,name=visible_device_list,json=visibleDeviceList,proto3" json:"visible_device_list,omitempty" yaml:"visible_device_list,omitempty"`
	// Force all tensors to be gpu_compatible. On a GPU-enabled TensorFlow,
	// enabling this option forces all CPU tensors to be allocated with Cuda
	// pinned memory. Normally, TensorFlow will infer which tensors should be
	// allocated as the pinned memory. But in case where the inference is
	// incomplete, this option can significantly speed up the cross-device memory
	// copy performance as long as it fits the memory.
	// Note that this option is not something that should be
	// enabled by default for unknown or very large models, since all Cuda pinned
	// memory is unpageable, having too much pinned memory might negatively impact
	// the overall host system performance.
	ForceGpuCompatible bool `protobuf:"varint,8,opt,name=force_gpu_compatible,json=forceGpuCompatible,proto3" json:"force_gpu_compatible,omitempty" yaml:"force_gpu_compatible,omitempty"`
}

func (m *GPUOptions) Reset()                    { *m = GPUOptions{} }
func (*GPUOptions) ProtoMessage()               {}
func (*GPUOptions) Descriptor() ([]byte, []int) { return fileDescriptorPredictor, []int{1} }

func (m *GPUOptions) GetPerProcessGpuMemoryFraction() float64 {
	if m != nil {
		return m.PerProcessGpuMemoryFraction
	}
	return 0
}

func (m *GPUOptions) GetAllocatorType() string {
	if m != nil {
		return m.AllocatorType
	}
	return ""
}

func (m *GPUOptions) GetVisibleDeviceList() string {
	if m != nil {
		return m.VisibleDeviceList
	}
	return ""
}

func (m *GPUOptions) GetForceGpuCompatible() bool {
	if m != nil {
		return m.ForceGpuCompatible
	}
	return false
}

type ExecutionOptions struct {
	TraceLevel ExecutionOptions_TraceLevel `protobuf:"varint,1,opt,name=trace_level,json=traceLevel,proto3,enum=carml.org.dlframework.ExecutionOptions_TraceLevel" json:"trace_level,omitempty" yaml:"trace_level,omitempty"`
	// Time to wait for operation to complete in milliseconds.
	TimeoutInMs int64 `protobuf:"varint,2,opt,name=timeout_in_ms,json=timeoutInMs,proto3" json:"timeout_in_ms,omitempty" yaml:"timeout_in_ms,omitempty"`
	// Map from device type name (e.g., "CPU" or "GPU" ) to maximum
	// number of devices of that type to use.  If a particular device
	// type is not found in the map, the system picks an appropriate
	// number.
	DeviceCount map[string]int32 `protobuf:"bytes,3,rep,name=device_count,json=deviceCount" json:"device_count,omitempty" yaml:"device_count,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Options that apply to all CPUs.
	CpuOptions *CPUOptions `protobuf:"bytes,4,opt,name=cpu_options,json=cpuOptions" json:"cpu_options,omitempty" yaml:"cpu_options,omitempty"`
	// Options that apply to all GPUs.
	GpuOptions *GPUOptions `protobuf:"bytes,5,opt,name=gpu_options,json=gpuOptions" json:"gpu_options,omitempty" yaml:"gpu_options,omitempty"`
}

func (m *ExecutionOptions) Reset()                    { *m = ExecutionOptions{} }
func (*ExecutionOptions) ProtoMessage()               {}
func (*ExecutionOptions) Descriptor() ([]byte, []int) { return fileDescriptorPredictor, []int{2} }

func (m *ExecutionOptions) GetTraceLevel() ExecutionOptions_TraceLevel {
	if m != nil {
		return m.TraceLevel
	}
	return ExecutionOptions_NO_TRACE
}

func (m *ExecutionOptions) GetTimeoutInMs() int64 {
	if m != nil {
		return m.TimeoutInMs
	}
	return 0
}

func (m *ExecutionOptions) GetDeviceCount() map[string]int32 {
	if m != nil {
		return m.DeviceCount
	}
	return nil
}

func (m *ExecutionOptions) GetCpuOptions() *CPUOptions {
	if m != nil {
		return m.CpuOptions
	}
	return nil
}

func (m *ExecutionOptions) GetGpuOptions() *GPUOptions {
	if m != nil {
		return m.GpuOptions
	}
	return nil
}

type PredictionOptions struct {
	RequestID        string            `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty" yaml:"request_id,omitempty"`
	FeatureLimit     int32             `protobuf:"varint,2,opt,name=feature_limit,json=featureLimit,proto3" json:"feature_limit,omitempty" yaml:"feature_limit,omitempty"`
	BatchSize        uint32            `protobuf:"varint,3,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty" yaml:"batch_size,omitempty"`
	ExecutionOptions *ExecutionOptions `protobuf:"bytes,4,opt,name=execution_options,json=executionOptions" json:"execution_options,omitempty" yaml:"execution_options,omitempty"`
}

func (m *PredictionOptions) Reset()                    { *m = PredictionOptions{} }
func (*PredictionOptions) ProtoMessage()               {}
func (*PredictionOptions) Descriptor() ([]byte, []int) { return fileDescriptorPredictor, []int{3} }

func (m *PredictionOptions) GetRequestID() string {
	if m != nil {
		return m.RequestID
	}
	return ""
}

func (m *PredictionOptions) GetFeatureLimit() int32 {
	if m != nil {
		return m.FeatureLimit
	}
	return 0
}

func (m *PredictionOptions) GetBatchSize() uint32 {
	if m != nil {
		return m.BatchSize
	}
	return 0
}

func (m *PredictionOptions) GetExecutionOptions() *ExecutionOptions {
	if m != nil {
		return m.ExecutionOptions
	}
	return nil
}

type PredictorOpenRequest struct {
	ModelName        string             `protobuf:"bytes,1,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty" yaml:"model_name,omitempty"`
	ModelVersion     string             `protobuf:"bytes,2,opt,name=model_version,json=modelVersion,proto3" json:"model_version,omitempty" yaml:"model_version,omitempty"`
	FrameworkName    string             `protobuf:"bytes,3,opt,name=framework_name,json=frameworkName,proto3" json:"framework_name,omitempty" yaml:"framework_name,omitempty"`
	FrameworkVersion string             `protobuf:"bytes,4,opt,name=framework_version,json=frameworkVersion,proto3" json:"framework_version,omitempty" yaml:"framework_version,omitempty"`
	Options          *PredictionOptions `protobuf:"bytes,5,opt,name=options" json:"options,omitempty" yaml:"options,omitempty"`
}

func (m *PredictorOpenRequest) Reset()                    { *m = PredictorOpenRequest{} }
func (*PredictorOpenRequest) ProtoMessage()               {}
func (*PredictorOpenRequest) Descriptor() ([]byte, []int) { return fileDescriptorPredictor, []int{4} }

func (m *PredictorOpenRequest) GetModelName() string {
	if m != nil {
		return m.ModelName
	}
	return ""
}

func (m *PredictorOpenRequest) GetModelVersion() string {
	if m != nil {
		return m.ModelVersion
	}
	return ""
}

func (m *PredictorOpenRequest) GetFrameworkName() string {
	if m != nil {
		return m.FrameworkName
	}
	return ""
}

func (m *PredictorOpenRequest) GetFrameworkVersion() string {
	if m != nil {
		return m.FrameworkVersion
	}
	return ""
}

func (m *PredictorOpenRequest) GetOptions() *PredictionOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

type PredictorCloseResponse struct {
}

func (m *PredictorCloseResponse) Reset()                    { *m = PredictorCloseResponse{} }
func (*PredictorCloseResponse) ProtoMessage()               {}
func (*PredictorCloseResponse) Descriptor() ([]byte, []int) { return fileDescriptorPredictor, []int{5} }

type Predictor struct {
	ID string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id,omitempty"`
}

func (m *Predictor) Reset()                    { *m = Predictor{} }
func (*Predictor) ProtoMessage()               {}
func (*Predictor) Descriptor() ([]byte, []int) { return fileDescriptorPredictor, []int{6} }

func (m *Predictor) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type URLsRequest struct {
	Predictor *Predictor         `protobuf:"bytes,1,opt,name=predictor" json:"predictor,omitempty" yaml:"predictor,omitempty"`
	Urls      []*URLsRequest_URL `protobuf:"bytes,2,rep,name=urls" json:"urls,omitempty" yaml:"urls,omitempty"`
	Options   *PredictionOptions `protobuf:"bytes,3,opt,name=options" json:"options,omitempty" yaml:"options,omitempty"`
}

func (m *URLsRequest) Reset()                    { *m = URLsRequest{} }
func (*URLsRequest) ProtoMessage()               {}
func (*URLsRequest) Descriptor() ([]byte, []int) { return fileDescriptorPredictor, []int{7} }

func (m *URLsRequest) GetPredictor() *Predictor {
	if m != nil {
		return m.Predictor
	}
	return nil
}

func (m *URLsRequest) GetUrls() []*URLsRequest_URL {
	if m != nil {
		return m.Urls
	}
	return nil
}

func (m *URLsRequest) GetOptions() *PredictionOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

type URLsRequest_URL struct {
	// An id used to identify the output feature: maps to input_id for output
	ID   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id,omitempty"`
	Data string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty" yaml:"data,omitempty"`
}

func (m *URLsRequest_URL) Reset()                    { *m = URLsRequest_URL{} }
func (*URLsRequest_URL) ProtoMessage()               {}
func (*URLsRequest_URL) Descriptor() ([]byte, []int) { return fileDescriptorPredictor, []int{7, 0} }

func (m *URLsRequest_URL) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *URLsRequest_URL) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type ImagesRequest struct {
	Predictor *Predictor `protobuf:"bytes,1,opt,name=predictor" json:"predictor,omitempty" yaml:"predictor,omitempty"`
	// A list of Base64 encoded images
	Images  []*ImagesRequest_Image `protobuf:"bytes,2,rep,name=images" json:"images,omitempty" yaml:"images,omitempty"`
	Options *PredictionOptions     `protobuf:"bytes,3,opt,name=options" json:"options,omitempty" yaml:"options,omitempty"`
}

func (m *ImagesRequest) Reset()                    { *m = ImagesRequest{} }
func (*ImagesRequest) ProtoMessage()               {}
func (*ImagesRequest) Descriptor() ([]byte, []int) { return fileDescriptorPredictor, []int{8} }

func (m *ImagesRequest) GetPredictor() *Predictor {
	if m != nil {
		return m.Predictor
	}
	return nil
}

func (m *ImagesRequest) GetImages() []*ImagesRequest_Image {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *ImagesRequest) GetOptions() *PredictionOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

type ImagesRequest_Image struct {
	// An id used to identify the output feature: maps to input_id for output
	ID string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id,omitempty"`
	// The image is base64 encoded
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty" yaml:"data,omitempty"`
}

func (m *ImagesRequest_Image) Reset()                    { *m = ImagesRequest_Image{} }
func (*ImagesRequest_Image) ProtoMessage()               {}
func (*ImagesRequest_Image) Descriptor() ([]byte, []int) { return fileDescriptorPredictor, []int{8, 0} }

func (m *ImagesRequest_Image) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *ImagesRequest_Image) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type DatasetRequest struct {
	Predictor *Predictor              `protobuf:"bytes,1,opt,name=predictor" json:"predictor,omitempty" yaml:"predictor,omitempty"`
	Dataset   *DatasetRequest_Dataset `protobuf:"bytes,2,opt,name=dataset" json:"dataset,omitempty" yaml:"dataset,omitempty"`
	Options   *PredictionOptions      `protobuf:"bytes,3,opt,name=options" json:"options,omitempty" yaml:"options,omitempty"`
}

func (m *DatasetRequest) Reset()                    { *m = DatasetRequest{} }
func (*DatasetRequest) ProtoMessage()               {}
func (*DatasetRequest) Descriptor() ([]byte, []int) { return fileDescriptorPredictor, []int{9} }

func (m *DatasetRequest) GetPredictor() *Predictor {
	if m != nil {
		return m.Predictor
	}
	return nil
}

func (m *DatasetRequest) GetDataset() *DatasetRequest_Dataset {
	if m != nil {
		return m.Dataset
	}
	return nil
}

func (m *DatasetRequest) GetOptions() *PredictionOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

type DatasetRequest_Dataset struct {
	Category string `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty" yaml:"category,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
}

func (m *DatasetRequest_Dataset) Reset()      { *m = DatasetRequest_Dataset{} }
func (*DatasetRequest_Dataset) ProtoMessage() {}
func (*DatasetRequest_Dataset) Descriptor() ([]byte, []int) {
	return fileDescriptorPredictor, []int{9, 0}
}

func (m *DatasetRequest_Dataset) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *DatasetRequest_Dataset) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Feature struct {
	Index       int64             `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty" yaml:"index,omitempty"`
	Name        string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	Probability float32           `protobuf:"fixed32,3,opt,name=probability,proto3" json:"probability,omitempty" yaml:"probability,omitempty"`
	Metadata    map[string]string `protobuf:"bytes,4,rep,name=metadata" json:"metadata,omitempty" yaml:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Feature) Reset()                    { *m = Feature{} }
func (*Feature) ProtoMessage()               {}
func (*Feature) Descriptor() ([]byte, []int) { return fileDescriptorPredictor, []int{10} }

func (m *Feature) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Feature) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Feature) GetProbability() float32 {
	if m != nil {
		return m.Probability
	}
	return 0
}

func (m *Feature) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type FeatureResponse struct {
	ID        string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id,omitempty"`
	RequestID string            `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty" yaml:"request_id,omitempty"`
	InputID   string            `protobuf:"bytes,3,opt,name=input_id,json=inputId,proto3" json:"input_id,omitempty" yaml:"input_id,omitempty"`
	Features  []*Feature        `protobuf:"bytes,4,rep,name=features" json:"features,omitempty" yaml:"features,omitempty"`
	Metadata  map[string]string `protobuf:"bytes,5,rep,name=metadata" json:"metadata,omitempty" yaml:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *FeatureResponse) Reset()                    { *m = FeatureResponse{} }
func (*FeatureResponse) ProtoMessage()               {}
func (*FeatureResponse) Descriptor() ([]byte, []int) { return fileDescriptorPredictor, []int{11} }

func (m *FeatureResponse) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *FeatureResponse) GetRequestID() string {
	if m != nil {
		return m.RequestID
	}
	return ""
}

func (m *FeatureResponse) GetInputID() string {
	if m != nil {
		return m.InputID
	}
	return ""
}

func (m *FeatureResponse) GetFeatures() []*Feature {
	if m != nil {
		return m.Features
	}
	return nil
}

func (m *FeatureResponse) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type FeaturesResponse struct {
	ID        string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id,omitempty"`
	Responses []*FeatureResponse `protobuf:"bytes,2,rep,name=responses" json:"responses,omitempty" yaml:"responses,omitempty"`
}

func (m *FeaturesResponse) Reset()                    { *m = FeaturesResponse{} }
func (*FeaturesResponse) ProtoMessage()               {}
func (*FeaturesResponse) Descriptor() ([]byte, []int) { return fileDescriptorPredictor, []int{12} }

func (m *FeaturesResponse) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *FeaturesResponse) GetResponses() []*FeatureResponse {
	if m != nil {
		return m.Responses
	}
	return nil
}

type ResetRequest struct {
	ID        string     `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty" yaml:"id,omitempty"`
	Predictor *Predictor `protobuf:"bytes,1,opt,name=predictor" json:"predictor,omitempty" yaml:"predictor,omitempty"`
}

func (m *ResetRequest) Reset()                    { *m = ResetRequest{} }
func (*ResetRequest) ProtoMessage()               {}
func (*ResetRequest) Descriptor() ([]byte, []int) { return fileDescriptorPredictor, []int{13} }

func (m *ResetRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *ResetRequest) GetPredictor() *Predictor {
	if m != nil {
		return m.Predictor
	}
	return nil
}

type ResetResponse struct {
	*Predictor `protobuf:"bytes,1,opt,name=predictor,embedded=predictor" json:"predictor,omitempty" yaml:"predictor,omitempty"`
}

func (m *ResetResponse) Reset()                    { *m = ResetResponse{} }
func (*ResetResponse) ProtoMessage()               {}
func (*ResetResponse) Descriptor() ([]byte, []int) { return fileDescriptorPredictor, []int{14} }

func init() {
	proto.RegisterType((*CPUOptions)(nil), "carml.org.dlframework.CPUOptions")
	golang_proto.RegisterType((*CPUOptions)(nil), "carml.org.dlframework.CPUOptions")
	proto.RegisterType((*GPUOptions)(nil), "carml.org.dlframework.GPUOptions")
	golang_proto.RegisterType((*GPUOptions)(nil), "carml.org.dlframework.GPUOptions")
	proto.RegisterType((*ExecutionOptions)(nil), "carml.org.dlframework.ExecutionOptions")
	golang_proto.RegisterType((*ExecutionOptions)(nil), "carml.org.dlframework.ExecutionOptions")
	proto.RegisterType((*PredictionOptions)(nil), "carml.org.dlframework.PredictionOptions")
	golang_proto.RegisterType((*PredictionOptions)(nil), "carml.org.dlframework.PredictionOptions")
	proto.RegisterType((*PredictorOpenRequest)(nil), "carml.org.dlframework.PredictorOpenRequest")
	golang_proto.RegisterType((*PredictorOpenRequest)(nil), "carml.org.dlframework.PredictorOpenRequest")
	proto.RegisterType((*PredictorCloseResponse)(nil), "carml.org.dlframework.PredictorCloseResponse")
	golang_proto.RegisterType((*PredictorCloseResponse)(nil), "carml.org.dlframework.PredictorCloseResponse")
	proto.RegisterType((*Predictor)(nil), "carml.org.dlframework.Predictor")
	golang_proto.RegisterType((*Predictor)(nil), "carml.org.dlframework.Predictor")
	proto.RegisterType((*URLsRequest)(nil), "carml.org.dlframework.URLsRequest")
	golang_proto.RegisterType((*URLsRequest)(nil), "carml.org.dlframework.URLsRequest")
	proto.RegisterType((*URLsRequest_URL)(nil), "carml.org.dlframework.URLsRequest.URL")
	golang_proto.RegisterType((*URLsRequest_URL)(nil), "carml.org.dlframework.URLsRequest.URL")
	proto.RegisterType((*ImagesRequest)(nil), "carml.org.dlframework.ImagesRequest")
	golang_proto.RegisterType((*ImagesRequest)(nil), "carml.org.dlframework.ImagesRequest")
	proto.RegisterType((*ImagesRequest_Image)(nil), "carml.org.dlframework.ImagesRequest.Image")
	golang_proto.RegisterType((*ImagesRequest_Image)(nil), "carml.org.dlframework.ImagesRequest.Image")
	proto.RegisterType((*DatasetRequest)(nil), "carml.org.dlframework.DatasetRequest")
	golang_proto.RegisterType((*DatasetRequest)(nil), "carml.org.dlframework.DatasetRequest")
	proto.RegisterType((*DatasetRequest_Dataset)(nil), "carml.org.dlframework.DatasetRequest.Dataset")
	golang_proto.RegisterType((*DatasetRequest_Dataset)(nil), "carml.org.dlframework.DatasetRequest.Dataset")
	proto.RegisterType((*Feature)(nil), "carml.org.dlframework.Feature")
	golang_proto.RegisterType((*Feature)(nil), "carml.org.dlframework.Feature")
	proto.RegisterType((*FeatureResponse)(nil), "carml.org.dlframework.FeatureResponse")
	golang_proto.RegisterType((*FeatureResponse)(nil), "carml.org.dlframework.FeatureResponse")
	proto.RegisterType((*FeaturesResponse)(nil), "carml.org.dlframework.FeaturesResponse")
	golang_proto.RegisterType((*FeaturesResponse)(nil), "carml.org.dlframework.FeaturesResponse")
	proto.RegisterType((*ResetRequest)(nil), "carml.org.dlframework.ResetRequest")
	golang_proto.RegisterType((*ResetRequest)(nil), "carml.org.dlframework.ResetRequest")
	proto.RegisterType((*ResetResponse)(nil), "carml.org.dlframework.ResetResponse")
	golang_proto.RegisterType((*ResetResponse)(nil), "carml.org.dlframework.ResetResponse")
	proto.RegisterEnum("carml.org.dlframework.ExecutionOptions_TraceLevel", ExecutionOptions_TraceLevel_name, ExecutionOptions_TraceLevel_value)
	golang_proto.RegisterEnum("carml.org.dlframework.ExecutionOptions_TraceLevel", ExecutionOptions_TraceLevel_name, ExecutionOptions_TraceLevel_value)
}
func (this *PredictionOptions) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return PredictorDescription()
}
func (this *PredictorOpenRequest) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return PredictorDescription()
}
func (this *Predictor) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return PredictorDescription()
}
func (this *URLsRequest) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return PredictorDescription()
}
func (this *ImagesRequest) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return PredictorDescription()
}
func (this *DatasetRequest) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return PredictorDescription()
}
func (this *Feature) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return PredictorDescription()
}
func (this *FeatureResponse) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return PredictorDescription()
}
func (this *FeaturesResponse) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return PredictorDescription()
}
func (this *ResetRequest) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return PredictorDescription()
}
func (this *ResetResponse) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return PredictorDescription()
}
func PredictorDescription() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	d := &github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet{}
	var gzipped = []byte{
		// 6623 bytes of a gzipped FileDescriptorSet
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x7c, 0x69, 0x6c, 0x24, 0xc7,
		0x75, 0xbf, 0x7a, 0x0e, 0x72, 0xe6, 0x0d, 0x39, 0x6c, 0x16, 0xa9, 0xdd, 0xd9, 0x59, 0x2d, 0x67,
		0x77, 0xa4, 0xf5, 0xae, 0x8e, 0x25, 0xe5, 0x95, 0xb4, 0x5a, 0xcd, 0xfe, 0x25, 0x81, 0x43, 0xce,
		0x52, 0x5c, 0xf3, 0x72, 0x93, 0xd4, 0xe5, 0x3f, 0xdc, 0x69, 0xf6, 0x14, 0x87, 0xad, 0x9d, 0xe9,
		0x6e, 0x75, 0xf7, 0xec, 0x8a, 0x9b, 0xc4, 0x90, 0x2d, 0x1f, 0x70, 0x9c, 0xc3, 0x89, 0x03, 0xf8,
		0x88, 0x0f, 0xd9, 0x80, 0x63, 0xc7, 0x39, 0x6c, 0xc7, 0x47, 0x1c, 0x20, 0x09, 0x84, 0x00, 0x71,
		0x8c, 0x7c, 0x08, 0x6c, 0xe4, 0x4b, 0x90, 0x00, 0x8c, 0xb4, 0x16, 0x90, 0xc4, 0x51, 0x12, 0x87,
		0x11, 0x10, 0x03, 0xfa, 0x12, 0xd4, 0xd5, 0x53, 0x3d, 0x33, 0xe4, 0x0c, 0x57, 0xd2, 0x1a, 0xf9,
		0xc4, 0xe9, 0x57, 0xef, 0xf7, 0xab, 0x57, 0xaf, 0x5e, 0x55, 0xbd, 0xaa, 0xea, 0x26, 0xfc, 0x30,
		0x01, 0xb7, 0xd6, 0x1c, 0xa7, 0x56, 0xc7, 0x53, 0x86, 0x6b, 0x4d, 0x6d, 0x05, 0x81, 0x3b, 0xe9,
		0x7a, 0x4e, 0xe0, 0x20, 0x60, 0xe2, 0x49, 0xc3, 0xb5, 0x8a, 0x67, 0x21, 0xf1, 0x58, 0x10, 0xb8,
		0xe8, 0x2e, 0x48, 0x7a, 0xcd, 0x3a, 0xf6, 0x73, 0xca, 0xf1, 0xf8, 0xe9, 0xcc, 0xd9, 0xf1, 0xc9,
		0x96, 0xce, 0x24, 0x51, 0xd0, 0x9a, 0x75, 0xac, 0x31, 0x95, 0xe2, 0x77, 0x62, 0x90, 0x12, 0x32,
		0x94, 0x87, 0x94, 0x8f, 0xeb, 0xd8, 0x0c, 0x1c, 0x2f, 0xa7, 0x1c, 0x57, 0x4e, 0xa7, 0xb5, 0xf0,
		0x19, 0x21, 0x88, 0xd7, 0x70, 0x90, 0x8b, 0x11, 0xf1, 0x63, 0xb7, 0x68, 0xe4, 0x81, 0xc8, 0xdc,
		0x66, 0x90, 0x8b, 0x0b, 0x99, 0xdb, 0x0c, 0xd0, 0x38, 0x24, 0x5c, 0xc7, 0x0f, 0x72, 0x09, 0x2e,
		0xa4, 0x4f, 0x28, 0x07, 0x03, 0x55, 0x5c, 0xc7, 0x01, 0xce, 0x25, 0xb9, 0x9c, 0x3f, 0xa3, 0x43,
		0x90, 0x74, 0x8d, 0xc0, 0xdc, 0xca, 0x0d, 0xf0, 0x02, 0xf6, 0x88, 0x10, 0x24, 0x36, 0x9c, 0xea,
		0x76, 0x6e, 0x90, 0xda, 0x41, 0x7f, 0xa3, 0x07, 0x61, 0xc0, 0x6c, 0xfa, 0x81, 0xd3, 0xc8, 0xa5,
		0x8e, 0x2b, 0xa7, 0x33, 0x67, 0x8f, 0xc9, 0x2d, 0x9b, 0xa1, 0x25, 0xa4, 0x2d, 0x2b, 0x46, 0x10,
		0x60, 0xcf, 0x26, 0x95, 0x30, 0x75, 0x54, 0x81, 0x31, 0xa3, 0x5a, 0xb5, 0x02, 0xcb, 0xb1, 0x8d,
		0xba, 0xbe, 0x61, 0xd9, 0x55, 0xcb, 0xae, 0xf9, 0xb9, 0xcc, 0x3e, 0xfe, 0x41, 0x2d, 0x40, 0x99,
		0xeb, 0x97, 0xd3, 0x30, 0xe8, 0x32, 0xee, 0xe2, 0x05, 0x18, 0xed, 0xa8, 0x90, 0xd8, 0x7c, 0xd9,
		0xb2, 0xab, 0xdc, 0x77, 0xf4, 0x37, 0x91, 0xb9, 0x46, 0xb0, 0xc5, 0x1c, 0xa7, 0xd1, 0xdf, 0xe5,
		0x6b, 0x3f, 0xb8, 0x3e, 0xa1, 0xfc, 0xf0, 0xfa, 0x84, 0xf2, 0xf2, 0xf5, 0x09, 0xe5, 0xe3, 0x3f,
		0x9e, 0xb8, 0x05, 0xb2, 0xa6, 0xd3, 0x90, 0xcc, 0x28, 0xa7, 0x29, 0x2d, 0xe9, 0xe1, 0x15, 0xe5,
		0xe9, 0x69, 0x5e, 0x50, 0x73, 0xea, 0x86, 0x5d, 0x9b, 0x74, 0xbc, 0xda, 0x54, 0x0d, 0xdb, 0xb4,
		0xff, 0xa7, 0x58, 0x91, 0xe1, 0x5a, 0x3e, 0x8d, 0x0c, 0xc3, 0xb6, 0x9d, 0xc0, 0x20, 0x66, 0xfb,
		0x17, 0xa4, 0xdf, 0x3f, 0x53, 0x94, 0x2f, 0xc5, 0x12, 0x73, 0xd3, 0x2b, 0xf3, 0x1b, 0x03, 0x14,
		0x77, 0x1f, 0xbc, 0x7c, 0x0e, 0x8e, 0xf3, 0x90, 0xa2, 0x92, 0x8d, 0xe6, 0xe6, 0x54, 0x15, 0xfb,
		0xa6, 0x67, 0xb9, 0x81, 0xe3, 0xf1, 0xe8, 0x1a, 0xe1, 0x35, 0x0b, 0x8d, 0xe2, 0x22, 0x8c, 0x5e,
		0xb4, 0xea, 0x78, 0x36, 0x54, 0x5c, 0xc5, 0x01, 0x3a, 0x0f, 0x89, 0x4d, 0xab, 0x8e, 0x79, 0xb8,
		0xdd, 0x31, 0xd9, 0x06, 0x9a, 0x8c, 0x22, 0x68, 0xab, 0x34, 0x8a, 0x28, 0xbe, 0x9a, 0x80, 0xb1,
		0x2e, 0xa5, 0xc4, 0x69, 0xb6, 0xd1, 0xc0, 0xc2, 0x91, 0xe4, 0x37, 0xca, 0x11, 0xe7, 0x9b, 0x97,
		0x8d, 0x1a, 0xe6, 0xbe, 0x14, 0x8f, 0x68, 0x02, 0xa0, 0x8a, 0x5d, 0x6c, 0x57, 0xb1, 0x6d, 0x6e,
		0xe7, 0xe2, 0xc7, 0xe3, 0xa7, 0xd3, 0x9a, 0x24, 0x41, 0x77, 0xc3, 0xa8, 0xdb, 0xdc, 0xa8, 0x5b,
		0xa6, 0x2e, 0xa9, 0xc1, 0xf1, 0xf8, 0xe9, 0xa4, 0xa6, 0xb2, 0x82, 0xd9, 0x96, 0xf2, 0x29, 0x18,
		0xb9, 0x8a, 0x8d, 0xcb, 0xb2, 0x6a, 0x86, 0xaa, 0x66, 0x89, 0x58, 0x52, 0x9c, 0x81, 0xa1, 0x06,
		0xf6, 0x7d, 0xa3, 0x86, 0xf5, 0x60, 0xdb, 0xc5, 0xb9, 0x04, 0x6d, 0xfd, 0xf1, 0x8e, 0xd6, 0xb7,
		0xb7, 0x3c, 0xc3, 0x51, 0x6b, 0xdb, 0x2e, 0x46, 0xd3, 0x90, 0xc6, 0x76, 0xb3, 0xc1, 0x18, 0x92,
		0x7b, 0xf8, 0xaf, 0x62, 0x37, 0x1b, 0xed, 0x2c, 0x29, 0x02, 0xe3, 0x14, 0x83, 0x3e, 0xf6, 0xae,
		0x58, 0x26, 0xce, 0x0d, 0x50, 0x82, 0x53, 0x1d, 0x04, 0xab, 0xac, 0xbc, 0x9d, 0x43, 0xe0, 0xd0,
		0x0c, 0xa4, 0xf1, 0x73, 0x01, 0xb6, 0x7d, 0xcb, 0xb1, 0x73, 0x83, 0x94, 0xe4, 0x64, 0x97, 0x5e,
		0xc4, 0xf5, 0x6a, 0x3b, 0x45, 0x0b, 0x87, 0xce, 0xc1, 0xa0, 0xe3, 0xd2, 0x68, 0xe3, 0xa3, 0xf3,
		0xb6, 0xae, 0x81, 0xb0, 0xcc, 0x74, 0x34, 0xa1, 0x8c, 0xe6, 0x41, 0xf5, 0x9d, 0xa6, 0x67, 0x62,
		0xdd, 0x74, 0xaa, 0x58, 0xb7, 0xec, 0x4d, 0x27, 0x97, 0xa6, 0x04, 0x85, 0xce, 0x86, 0x50, 0xc5,
		0x19, 0xa7, 0x8a, 0xe7, 0xed, 0x4d, 0x47, 0xcb, 0xfa, 0x91, 0x67, 0x74, 0x08, 0x06, 0xfc, 0x6d,
		0x3b, 0x30, 0x9e, 0xcb, 0x0d, 0xd1, 0x08, 0xe1, 0x4f, 0xc5, 0xff, 0x49, 0xc2, 0x48, 0x3f, 0x21,
		0x76, 0x01, 0x92, 0x9b, 0xa4, 0x95, 0xb9, 0xd8, 0x41, 0x7c, 0xc0, 0x30, 0x51, 0x27, 0x0e, 0xdc,
		0xa0, 0x13, 0xa7, 0x21, 0x63, 0x63, 0x3f, 0xc0, 0x55, 0x16, 0x11, 0xf1, 0x3e, 0x63, 0x0a, 0x18,
		0xa8, 0x33, 0xa4, 0x12, 0x37, 0x14, 0x52, 0x4f, 0xc2, 0x48, 0x68, 0x92, 0xee, 0x19, 0x76, 0x4d,
		0xc4, 0xe6, 0x54, 0x2f, 0x4b, 0x26, 0x2b, 0x02, 0xa7, 0x11, 0x98, 0x96, 0xc5, 0x91, 0x67, 0x34,
		0x0b, 0xe0, 0xd8, 0xd8, 0xd9, 0xd4, 0xab, 0xd8, 0xac, 0xe7, 0x52, 0x7b, 0x78, 0x69, 0x99, 0xa8,
		0x74, 0x78, 0xc9, 0x61, 0x52, 0xb3, 0x8e, 0x1e, 0x6a, 0x85, 0xda, 0xe0, 0x1e, 0x91, 0xb2, 0xc8,
		0x06, 0x59, 0x47, 0xb4, 0xad, 0x43, 0xd6, 0xc3, 0x24, 0xee, 0x71, 0x95, 0xb7, 0x2c, 0x4d, 0x8d,
		0x98, 0xec, 0xd9, 0x32, 0x8d, 0xc3, 0x58, 0xc3, 0x86, 0x3d, 0xf9, 0x11, 0xdd, 0x0e, 0xa1, 0x40,
		0xa7, 0x61, 0x05, 0x74, 0x16, 0x1a, 0x12, 0xc2, 0x25, 0xa3, 0x81, 0xf3, 0xe7, 0x21, 0x1b, 0x75,
		0x0f, 0x1a, 0x87, 0xa4, 0x1f, 0x18, 0x5e, 0x40, 0xa3, 0x30, 0xa9, 0xb1, 0x07, 0xa4, 0x42, 0x1c,
		0xdb, 0x55, 0x3a, 0xcb, 0x25, 0x35, 0xf2, 0x33, 0xff, 0x20, 0x0c, 0x47, 0xaa, 0xef, 0x17, 0x58,
		0xfc, 0xd4, 0x00, 0x8c, 0x77, 0x8b, 0xb9, 0xae, 0xe1, 0x7f, 0x08, 0x06, 0xec, 0x66, 0x63, 0x03,
		0x7b, 0x74, 0x45, 0x4f, 0x6a, 0xfc, 0x09, 0x4d, 0x43, 0xb2, 0x6e, 0x6c, 0xe0, 0x3a, 0x5d, 0xd3,
		0xb3, 0x67, 0xef, 0xee, 0x2b, 0xaa, 0x27, 0x17, 0x08, 0x44, 0x63, 0x48, 0xf4, 0x08, 0x24, 0xf8,
		0x14, 0x47, 0x18, 0xee, 0xea, 0x8f, 0x81, 0xc4, 0xa2, 0x46, 0x71, 0xe8, 0x28, 0xa4, 0xc9, 0x5f,
		0xe6, 0xdb, 0x01, 0x96, 0x9a, 0x10, 0x01, 0xf1, 0x2b, 0x49, 0x5b, 0x68, 0x98, 0x55, 0xb1, 0x58,
		0x1a, 0xc2, 0x67, 0xd2, 0x31, 0x55, 0xbc, 0x69, 0x34, 0xeb, 0x81, 0x7e, 0xc5, 0xa8, 0x37, 0x31,
		0xcf, 0x27, 0x86, 0xb8, 0xf0, 0x71, 0x22, 0x43, 0x05, 0xc8, 0xb0, 0xa8, 0xb4, 0xec, 0x2a, 0x7e,
		0x8e, 0xce, 0x3e, 0x49, 0x8d, 0x05, 0xea, 0x3c, 0x91, 0x90, 0xea, 0x9f, 0xf1, 0x1d, 0x5b, 0x74,
		0x2d, 0xad, 0x82, 0x08, 0x68, 0xf5, 0x0f, 0xb6, 0x4f, 0x7c, 0xc7, 0xba, 0x37, 0xaf, 0x3d, 0x16,
		0x8b, 0xdf, 0x8d, 0x41, 0x82, 0x8e, 0xb7, 0x11, 0xc8, 0xac, 0x3d, 0xb5, 0x52, 0xd1, 0x67, 0x97,
		0xd7, 0xcb, 0x0b, 0x15, 0x55, 0x41, 0x59, 0x00, 0x2a, 0xb8, 0xb8, 0xb0, 0x3c, 0xbd, 0xa6, 0xc6,
		0xc2, 0xe7, 0xf9, 0xa5, 0xb5, 0x73, 0xf7, 0xab, 0xf1, 0x10, 0xb0, 0xce, 0x04, 0x09, 0x59, 0xe1,
		0xbe, 0xb3, 0x6a, 0x12, 0xa9, 0x30, 0xc4, 0x08, 0xe6, 0x9f, 0xac, 0xcc, 0x9e, 0xbb, 0x5f, 0x1d,
		0x88, 0x4a, 0xee, 0x3b, 0xab, 0x0e, 0xa2, 0x61, 0x48, 0x53, 0x49, 0x79, 0x79, 0x79, 0x41, 0x4d,
		0x85, 0x9c, 0xab, 0x6b, 0xda, 0xfc, 0xd2, 0x9c, 0x9a, 0x0e, 0x39, 0xe7, 0xb4, 0xe5, 0xf5, 0x15,
		0x15, 0x42, 0x86, 0xc5, 0xca, 0xea, 0xea, 0xf4, 0x5c, 0x45, 0xcd, 0x84, 0x1a, 0xe5, 0xa7, 0xd6,
		0x2a, 0xab, 0xea, 0x50, 0xc4, 0xac, 0xfb, 0xce, 0xaa, 0xc3, 0x61, 0x15, 0x95, 0xa5, 0xf5, 0x45,
		0x35, 0x8b, 0x46, 0x61, 0x98, 0x55, 0x21, 0x8c, 0x18, 0x69, 0x13, 0x9d, 0xbb, 0x5f, 0x55, 0x5b,
		0x86, 0x30, 0x96, 0xd1, 0x88, 0xe0, 0xdc, 0xfd, 0x2a, 0x2a, 0xce, 0x40, 0x92, 0x46, 0x17, 0x42,
		0x90, 0x5d, 0x98, 0x2e, 0x57, 0x16, 0xf4, 0xe5, 0x95, 0xb5, 0xf9, 0xe5, 0xa5, 0xe9, 0x05, 0x55,
		0x69, 0xc9, 0xb4, 0xca, 0xbb, 0xd7, 0xe7, 0xb5, 0xca, 0xac, 0x1a, 0x93, 0x65, 0x2b, 0x95, 0xe9,
		0xb5, 0xca, 0xac, 0x1a, 0x2f, 0x9a, 0x30, 0xde, 0x6d, 0x9e, 0xe9, 0x3a, 0x32, 0xa4, 0x2e, 0x8e,
		0xed, 0xd1, 0xc5, 0x94, 0xab, 0xa3, 0x8b, 0xbf, 0xa4, 0xc0, 0x58, 0x97, 0xb9, 0xb6, 0x6b, 0x25,
		0x8f, 0x42, 0x92, 0x85, 0x28, 0x5b, 0x7d, 0xee, 0xec, 0x3a, 0x69, 0xd3, 0x80, 0xed, 0x58, 0x81,
		0x28, 0x4e, 0x5e, 0x81, 0xe3, 0x7b, 0xac, 0xc0, 0x84, 0xa2, 0xc3, 0xc8, 0x17, 0x14, 0xc8, 0xed,
		0xc5, 0xdd, 0x63, 0xa2, 0x88, 0x45, 0x26, 0x8a, 0x0b, 0xed, 0x06, 0x9c, 0xd8, 0xbb, 0x0d, 0x1d,
		0x56, 0x7c, 0x45, 0x81, 0x43, 0xdd, 0x13, 0x95, 0xae, 0x36, 0x3c, 0x02, 0x03, 0x0d, 0x1c, 0x6c,
		0x39, 0x62, 0xb1, 0x7e, 0x47, 0x97, 0x25, 0x80, 0x14, 0xb7, 0xfb, 0x8a, 0xa3, 0xe4, 0x35, 0x24,
		0xbe, 0x57, 0xb6, 0xc1, 0xac, 0xe9, 0xb0, 0xf4, 0xa3, 0x31, 0xb8, 0xb5, 0x2b, 0x79, 0x57, 0x43,
		0x8f, 0x01, 0x58, 0xb6, 0xdb, 0x0c, 0xd8, 0x82, 0xcc, 0xe6, 0xa7, 0x34, 0x95, 0xd0, 0xb1, 0x4f,
		0xe6, 0x9e, 0x66, 0x10, 0x96, 0xd3, 0xbd, 0x94, 0x06, 0x4c, 0x44, 0x15, 0xce, 0xb7, 0x0c, 0x4d,
		0x50, 0x43, 0x27, 0xf6, 0x68, 0x69, 0xc7, 0x5a, 0x77, 0x2f, 0xa8, 0x66, 0xdd, 0xc2, 0x76, 0xa0,
		0xfb, 0x81, 0x87, 0x8d, 0x86, 0x65, 0xd7, 0xe8, 0x04, 0x9c, 0x2a, 0x25, 0x37, 0x8d, 0xba, 0x8f,
		0xb5, 0x11, 0x56, 0xbc, 0x2a, 0x4a, 0x09, 0x82, 0xae, 0x32, 0x9e, 0x84, 0x18, 0x88, 0x20, 0x58,
		0x71, 0x88, 0x28, 0xfe, 0xe3, 0x20, 0x64, 0xa4, 0xb4, 0x0e, 0x9d, 0x80, 0xa1, 0x67, 0x8c, 0x2b,
		0x86, 0x2e, 0x52, 0x75, 0xe6, 0x89, 0x0c, 0x91, 0xad, 0xf0, 0x74, 0xfd, 0x5e, 0x18, 0xa7, 0x2a,
		0x4e, 0x33, 0xc0, 0x9e, 0x6e, 0xd6, 0x0d, 0xdf, 0xa7, 0x4e, 0x4b, 0x51, 0x55, 0x44, 0xca, 0x96,
		0x49, 0xd1, 0x8c, 0x28, 0x41, 0x0f, 0xc0, 0x18, 0x45, 0x34, 0x9a, 0xf5, 0xc0, 0x72, 0xeb, 0x58,
		0x27, 0x9b, 0x07, 0x9f, 0x4e, 0xc4, 0xa1, 0x65, 0xa3, 0x44, 0x63, 0x91, 0x2b, 0x10, 0x8b, 0x7c,
		0x34, 0x0b, 0xc7, 0x28, 0xac, 0x86, 0x6d, 0xec, 0x19, 0x01, 0xd6, 0xf1, 0xb3, 0x4d, 0xa3, 0xee,
		0xeb, 0x86, 0x5d, 0xd5, 0xb7, 0x0c, 0x7f, 0x2b, 0x37, 0x4e, 0x08, 0xca, 0xb1, 0x9c, 0xa2, 0x1d,
		0x21, 0x8a, 0x73, 0x5c, 0xaf, 0x42, 0xd5, 0xa6, 0xed, 0xea, 0x63, 0x86, 0xbf, 0x85, 0x4a, 0x70,
		0x88, 0xb2, 0xf8, 0x81, 0x67, 0xd9, 0x35, 0xdd, 0xdc, 0xc2, 0xe6, 0x65, 0xbd, 0x19, 0x6c, 0x9e,
		0xcf, 0x1d, 0x95, 0xeb, 0xa7, 0x16, 0xae, 0x52, 0x9d, 0x19, 0xa2, 0xb2, 0x1e, 0x6c, 0x9e, 0x47,
		0xab, 0x30, 0x44, 0x3a, 0xa3, 0x61, 0x5d, 0xc3, 0xfa, 0xa6, 0xe3, 0xd1, 0x95, 0x25, 0xdb, 0x65,
		0x64, 0x4b, 0x1e, 0x9c, 0x5c, 0xe6, 0x80, 0x45, 0xa7, 0x8a, 0x4b, 0xc9, 0xd5, 0x95, 0x4a, 0x65,
		0x56, 0xcb, 0x08, 0x96, 0x8b, 0x8e, 0x47, 0x02, 0xaa, 0xe6, 0x84, 0x0e, 0xce, 0xb0, 0x80, 0xaa,
		0x39, 0xc2, 0xbd, 0x0f, 0xc0, 0x98, 0x69, 0xb2, 0x36, 0x5b, 0xa6, 0xce, 0x53, 0x7c, 0x3f, 0xa7,
		0x46, 0x9c, 0x65, 0x9a, 0x73, 0x4c, 0x81, 0xc7, 0xb8, 0x8f, 0x1e, 0x82, 0x5b, 0x5b, 0xce, 0x92,
		0x81, 0xa3, 0x1d, 0xad, 0x6c, 0x87, 0x3e, 0x00, 0x63, 0xee, 0x76, 0x27, 0x10, 0x45, 0x6a, 0x74,
		0xb7, 0xdb, 0x61, 0x27, 0xe9, 0xb6, 0xcd, 0xc3, 0xa6, 0x11, 0xe0, 0x6a, 0xee, 0xb0, 0xac, 0x2d,
		0x15, 0xa0, 0x29, 0x50, 0x4d, 0x53, 0xc7, 0xb6, 0xb1, 0x51, 0xc7, 0xba, 0xe1, 0x61, 0xdb, 0xf0,
		0x73, 0x05, 0x59, 0x39, 0x6b, 0x9a, 0x15, 0x5a, 0x3a, 0x4d, 0x0b, 0xd1, 0x5d, 0x30, 0xea, 0x6c,
		0x3c, 0x63, 0xb2, 0xc8, 0xd2, 0x5d, 0x0f, 0x6f, 0x5a, 0xcf, 0xe5, 0xee, 0xa0, 0x6e, 0x1a, 0x21,
		0x05, 0x34, 0xae, 0x56, 0xa8, 0x18, 0xdd, 0x09, 0xaa, 0xe9, 0x6f, 0x19, 0x9e, 0x4b, 0x97, 0x76,
		0xdf, 0x35, 0x4c, 0x9c, 0x3b, 0xc9, 0x54, 0x99, 0x7c, 0x49, 0x88, 0x49, 0x64, 0xfb, 0x57, 0xad,
		0xcd, 0x40, 0x30, 0x9e, 0x62, 0x91, 0x4d, 0x65, 0x9c, 0xed, 0x34, 0xa8, 0xee, 0x96, 0x1b, 0xad,
		0xf8, 0x34, 0x55, 0xcb, 0xba, 0x5b, 0xae, 0x5c, 0xef, 0x93, 0x30, 0xde, 0xb4, 0x2d, 0x3b, 0xc0,
		0x9e, 0xeb, 0x61, 0x92, 0xee, 0xb3, 0x31, 0x9b, 0xfb, 0xe7, 0xc1, 0x3d, 0x12, 0xf6, 0x75, 0x59,
		0x9b, 0x85, 0x8a, 0x36, 0xd6, 0xec, 0x14, 0x16, 0x4b, 0x30, 0x24, 0x47, 0x10, 0x4a, 0x03, 0x8b,
		0x21, 0x55, 0x21, 0xab, 0xf1, 0xcc, 0xf2, 0x2c, 0x59, 0x47, 0x9f, 0xae, 0xa8, 0x31, 0xb2, 0x9e,
		0x2f, 0xcc, 0xaf, 0x55, 0x74, 0x6d, 0x7d, 0x69, 0x6d, 0x7e, 0xb1, 0xa2, 0xc6, 0xef, 0x4a, 0xa7,
		0xfe, 0x65, 0x50, 0x7d, 0xfe, 0xf9, 0xe7, 0x9f, 0x8f, 0x5d, 0x4a, 0xa4, 0xde, 0xa1, 0x9e, 0x2a,
		0xfe, 0x28, 0x06, 0xd9, 0x68, 0x26, 0x8d, 0xfe, 0x1f, 0x1c, 0x16, 0xdb, 0x5e, 0x1f, 0x07, 0xfa,
		0x55, 0xcb, 0xa3, 0xa1, 0xdd, 0x30, 0x58, 0x2e, 0x1a, 0xf6, 0xca, 0x38, 0xd7, 0x5a, 0xc5, 0xc1,
		0x13, 0x96, 0x47, 0x02, 0xb7, 0x61, 0x04, 0x68, 0x01, 0x0a, 0xb6, 0xa3, 0xfb, 0x81, 0x61, 0x57,
		0x0d, 0xaf, 0xaa, 0xb7, 0x0e, 0x1c, 0x74, 0xc3, 0x34, 0xb1, 0xef, 0x3b, 0x6c, 0x49, 0x09, 0x59,
		0x6e, 0xb3, 0x9d, 0x55, 0xae, 0xdc, 0x9a, 0x6b, 0xa7, 0xb9, 0x6a, 0x5b, 0x04, 0xc5, 0xf7, 0x8a,
		0xa0, 0xa3, 0x90, 0x6e, 0x18, 0xae, 0x8e, 0xed, 0xc0, 0x63, 0xe7, 0x49, 0x29, 0x2d, 0xd5, 0x30,
		0xdc, 0x0a, 0x79, 0x7e, 0xfb, 0x7a, 0x22, 0xea, 0xcd, 0x94, 0x9a, 0xbe, 0x94, 0x48, 0xa5, 0x55,
		0x28, 0x5e, 0x8f, 0xc3, 0x90, 0x9c, 0x0f, 0x92, 0xf4, 0xda, 0xa4, 0x73, 0xbf, 0x42, 0x67, 0x87,
		0xdb, 0xf7, 0xcd, 0x1e, 0x27, 0x67, 0xc8, 0xa2, 0x50, 0x1a, 0x60, 0x59, 0x9a, 0xc6, 0x90, 0x64,
		0x41, 0x26, 0xf3, 0x01, 0x66, 0xb9, 0x7f, 0x4a, 0xe3, 0x4f, 0x68, 0x0e, 0x06, 0x9e, 0xf1, 0x29,
		0xf7, 0x00, 0xe5, 0xbe, 0x63, 0x7f, 0xee, 0x4b, 0xab, 0x94, 0x3c, 0x7d, 0x69, 0x55, 0x5f, 0x5a,
		0xd6, 0x16, 0xa7, 0x17, 0x34, 0x0e, 0x47, 0x47, 0x20, 0x51, 0x37, 0xae, 0x6d, 0x47, 0x97, 0x0f,
		0x2a, 0xea, 0xb7, 0x13, 0x8e, 0x40, 0xe2, 0x2a, 0x36, 0x2e, 0x47, 0x27, 0x6d, 0x2a, 0x7a, 0x1b,
		0x07, 0xc3, 0x14, 0x24, 0xa9, 0xbf, 0x10, 0x00, 0xf7, 0x98, 0x7a, 0x0b, 0x4a, 0x41, 0x62, 0x66,
		0x59, 0x23, 0x03, 0x42, 0x85, 0x21, 0x26, 0xd5, 0x57, 0xe6, 0x2b, 0x33, 0x15, 0x35, 0x56, 0x7c,
		0x00, 0x06, 0x98, 0x13, 0xc8, 0x60, 0x09, 0xdd, 0xa0, 0xde, 0xc2, 0x1f, 0x39, 0x87, 0x22, 0x4a,
		0xd7, 0x17, 0xcb, 0x15, 0x4d, 0x8d, 0x45, 0xbb, 0x3a, 0xa1, 0x26, 0x8b, 0x3e, 0x0c, 0xc9, 0x09,
		0xe1, 0x4d, 0x89, 0xb2, 0xe2, 0x4b, 0x0a, 0x64, 0xa4, 0x04, 0x8f, 0xa4, 0x16, 0x46, 0xbd, 0xee,
		0x5c, 0xd5, 0x8d, 0xba, 0x65, 0xf8, 0x3c, 0x34, 0x80, 0x8a, 0xa6, 0x89, 0xa4, 0xdf, 0xae, 0xbb,
		0x49, 0x43, 0x24, 0xa9, 0x0e, 0x14, 0x3f, 0xaf, 0x80, 0xda, 0x9e, 0x22, 0xb6, 0x99, 0xa9, 0xfc,
		0x3c, 0xcd, 0x2c, 0x7e, 0x56, 0x81, 0x6c, 0x34, 0x2f, 0x6c, 0x33, 0xef, 0xc4, 0xcf, 0xd5, 0xbc,
		0x97, 0x63, 0x30, 0x1c, 0xc9, 0x06, 0xfb, 0xb5, 0xee, 0x59, 0x18, 0xb5, 0xaa, 0xb8, 0xe1, 0x3a,
		0x01, 0xb6, 0xcd, 0x6d, 0xbd, 0x8e, 0xaf, 0xe0, 0x7a, 0xae, 0x48, 0x27, 0x8d, 0xa9, 0xfd, 0xf3,
		0xcd, 0xc9, 0xf9, 0x16, 0x6e, 0x81, 0xc0, 0x4a, 0x63, 0xf3, 0xb3, 0x95, 0xc5, 0x95, 0xe5, 0xb5,
		0xca, 0xd2, 0xcc, 0x53, 0xfa, 0xfa, 0xd2, 0xbb, 0x96, 0x96, 0x9f, 0x58, 0xd2, 0x54, 0xab, 0x4d,
		0xed, 0x6d, 0x1c, 0xf6, 0x2b, 0xa0, 0xb6, 0x1b, 0x85, 0x0e, 0x43, 0x37, 0xb3, 0xd4, 0x5b, 0xd0,
		0x18, 0x8c, 0x2c, 0x2d, 0xeb, 0xab, 0xf3, 0xb3, 0x15, 0xbd, 0x72, 0xf1, 0x62, 0x65, 0x66, 0x6d,
		0x95, 0x6d, 0xc0, 0x43, 0xed, 0xb5, 0xc8, 0x00, 0x2f, 0x7e, 0x26, 0x0e, 0x63, 0x5d, 0x2c, 0x41,
		0xd3, 0x3c, 0xf7, 0x67, 0xdb, 0x91, 0x33, 0xfd, 0x58, 0x3f, 0x49, 0xb2, 0x8b, 0x15, 0xc3, 0x0b,
		0xf8, 0x56, 0xe1, 0x4e, 0x20, 0x5e, 0xb2, 0x03, 0x6b, 0xd3, 0xc2, 0x1e, 0x3f, 0xaf, 0x60, 0x1b,
		0x82, 0x91, 0x96, 0x9c, 0x1d, 0x59, 0xdc, 0x03, 0xc8, 0x75, 0x7c, 0x2b, 0xb0, 0xae, 0x60, 0xdd,
		0xb2, 0xc5, 0xe1, 0x06, 0xd9, 0x20, 0x24, 0x34, 0x55, 0x94, 0xcc, 0xdb, 0x41, 0xa8, 0x6d, 0xe3,
		0x9a, 0xd1, 0xa6, 0x4d, 0x26, 0xf3, 0xb8, 0xa6, 0x8a, 0x92, 0x50, 0xfb, 0x04, 0x0c, 0x55, 0x9d,
		0x26, 0x49, 0xb7, 0x98, 0x1e, 0x59, 0x3b, 0x14, 0x2d, 0xc3, 0x64, 0xa1, 0x0a, 0xcf, 0x87, 0x5b,
		0xa7, 0x2a, 0x43, 0x5a, 0x86, 0xc9, 0x98, 0xca, 0x29, 0x18, 0x31, 0x6a, 0x35, 0x8f, 0x90, 0x0b,
		0x22, 0x96, 0xe1, 0x67, 0x43, 0x31, 0x55, 0xcc, 0x5f, 0x82, 0x94, 0xf0, 0x03, 0x59, 0xaa, 0x89,
		0x27, 0x74, 0x97, 0x9d, 0x6d, 0xc5, 0x4e, 0xa7, 0xb5, 0x94, 0x2d, 0x0a, 0x4f, 0xc0, 0x90, 0xe5,
		0xeb, 0xad, 0x43, 0xd6, 0xd8, 0xf1, 0xd8, 0xe9, 0x94, 0x96, 0xb1, 0xfc, 0xf0, 0x54, 0xad, 0xf8,
		0x95, 0x18, 0x64, 0xa3, 0x87, 0xc4, 0x68, 0x16, 0x52, 0x75, 0xc7, 0xa4, 0xf7, 0x20, 0xfc, 0x86,
		0xe2, 0x74, 0x8f, 0x73, 0xe5, 0xc9, 0x05, 0xae, 0xaf, 0x85, 0xc8, 0xfc, 0xdf, 0x2a, 0x90, 0x12,
		0x62, 0x74, 0x88, 0xdf, 0xe9, 0x10, 0xba, 0x64, 0x39, 0xa6, 0x2a, 0xec, 0x5e, 0x87, 0xc8, 0x7d,
		0xd7, 0xb0, 0x69, 0x08, 0x70, 0x39, 0x79, 0x26, 0xfd, 0x5a, 0xc7, 0x46, 0x95, 0x6e, 0x1f, 0x9c,
		0x46, 0x03, 0xdb, 0x81, 0x2f, 0xfa, 0x95, 0xcb, 0x67, 0xb8, 0x18, 0xdd, 0x0d, 0xa3, 0x81, 0x67,
		0x58, 0xf5, 0x88, 0x2e, 0xbd, 0x4b, 0xd3, 0x54, 0x51, 0x10, 0x2a, 0x97, 0xe0, 0x88, 0xe0, 0xad,
		0xe2, 0xc0, 0x30, 0xb7, 0x70, 0xb5, 0x05, 0x1a, 0xa0, 0x27, 0x90, 0x87, 0xb9, 0xc2, 0x2c, 0x2f,
		0x17, 0xd8, 0xe2, 0x8f, 0x14, 0x18, 0x15, 0x1b, 0x9e, 0x6a, 0xe8, 0xac, 0x45, 0x80, 0xd6, 0xb5,
		0x11, 0x77, 0x57, 0x67, 0x28, 0x77, 0xe0, 0x26, 0xa7, 0x43, 0x90, 0x26, 0x11, 0xe4, 0x1b, 0x00,
		0xad, 0x92, 0x3d, 0xdd, 0x56, 0x80, 0x0c, 0xbf, 0x01, 0xa0, 0xd7, 0x48, 0x6c, 0x8b, 0x0c, 0x4c,
		0x44, 0x76, 0x46, 0x68, 0x1c, 0x92, 0x1b, 0xb8, 0x66, 0xd9, 0xfc, 0x5c, 0x92, 0x3d, 0x88, 0xd3,
		0xce, 0x44, 0x78, 0xda, 0x59, 0xfe, 0x55, 0x05, 0xc6, 0xa4, 0x8b, 0x34, 0x61, 0x6f, 0x59, 0x6d,
		0xdb, 0xa7, 0xfb, 0x8f, 0x29, 0x4f, 0x3f, 0x52, 0xb3, 0x82, 0xad, 0xe6, 0xc6, 0xa4, 0xe9, 0x34,
		0xa6, 0xd8, 0xc5, 0x5a, 0xeb, 0x1e, 0x8c, 0xfe, 0x30, 0xcf, 0xd4, 0xb0, 0x7d, 0xa6, 0xe6, 0x48,
		0xb7, 0x62, 0x17, 0x5a, 0x3f, 0xbf, 0x14, 0x8b, 0xcf, 0xad, 0x94, 0xbf, 0x16, 0xcb, 0xcf, 0xb1,
		0xba, 0x56, 0x84, 0x6f, 0x34, 0xbc, 0x59, 0xc7, 0x26, 0x69, 0x2f, 0x7c, 0x2f, 0x06, 0xb7, 0x49,
		0xb7, 0xb6, 0xd2, 0x7d, 0x5c, 0xe7, 0xe5, 0x6d, 0xbe, 0xfb, 0xfd, 0x6e, 0xbe, 0xe7, 0x1d, 0x5d,
		0xe9, 0x5d, 0x90, 0x20, 0xfa, 0xa8, 0xc7, 0xb1, 0x40, 0xee, 0x1b, 0x7f, 0xf3, 0x67, 0x45, 0x7a,
		0x7e, 0xd0, 0xfd, 0xbe, 0x93, 0x92, 0x94, 0xdf, 0xd7, 0xf3, 0x66, 0x52, 0x6d, 0x75, 0xa8, 0xff,
		0xd6, 0x5d, 0x50, 0xb6, 0xdf, 0x4e, 0xbe, 0x70, 0x0a, 0xce, 0x44, 0x3a, 0xa8, 0xe6, 0xb4, 0x5c,
		0x40, 0x9e, 0x04, 0x79, 0xcd, 0xe1, 0xbe, 0x4c, 0x87, 0xd2, 0x3e, 0x7c, 0xb6, 0x04, 0x63, 0x5c,
		0x59, 0xa7, 0x77, 0x25, 0x6c, 0xaf, 0x86, 0xf6, 0x3d, 0x2f, 0xcb, 0x7d, 0xf3, 0x55, 0x9a, 0x21,
		0x69, 0xa3, 0x1c, 0x4a, 0xca, 0xd8, 0x76, 0xae, 0xa4, 0xc1, 0xad, 0x11, 0x3e, 0x36, 0x0f, 0x62,
		0xaf, 0x07, 0xe3, 0x5f, 0x71, 0xc6, 0x31, 0x89, 0x71, 0x95, 0x43, 0x4b, 0x33, 0x30, 0x7c, 0x10,
		0xae, 0xef, 0x73, 0xae, 0x21, 0x2c, 0x93, 0xcc, 0xc1, 0x08, 0x25, 0x61, 0xf7, 0xe0, 0x74, 0x91,
		0xd9, 0x9f, 0xe6, 0xaf, 0x5f, 0x65, 0x13, 0x53, 0x96, 0xc0, 0x66, 0x42, 0x54, 0xa9, 0x04, 0xf4,
		0x7a, 0xa8, 0x8a, 0xcd, 0x7a, 0x0f, 0x86, 0x1f, 0x70, 0x43, 0x42, 0xfd, 0xd2, 0xe3, 0x30, 0x4e,
		0x7e, 0xd3, 0x35, 0x40, 0xb6, 0xa4, 0xf7, 0xe9, 0x60, 0xee, 0x47, 0x2f, 0xb0, 0xb9, 0x6f, 0x2c,
		0x24, 0x90, 0x6c, 0x92, 0x7a, 0xb1, 0x86, 0x83, 0x00, 0x7b, 0xbe, 0x6e, 0xd4, 0xbb, 0x99, 0x27,
		0x1d, 0xaf, 0xe4, 0x3e, 0xfd, 0x5a, 0xb4, 0x17, 0xe7, 0x18, 0x72, 0xba, 0x5e, 0x2f, 0xad, 0xc3,
		0xe1, 0x2e, 0x51, 0xd1, 0x07, 0xe7, 0x67, 0x38, 0xe7, 0x78, 0x47, 0x64, 0x10, 0xda, 0x15, 0x10,
		0xf2, 0xb0, 0x2f, 0xfb, 0xe0, 0xfc, 0x1d, 0xce, 0x89, 0x38, 0x56, 0x74, 0x29, 0x61, 0xbc, 0x04,
		0xa3, 0x57, 0xb0, 0xb7, 0xe1, 0xf8, 0xfc, 0x48, 0xab, 0x0f, 0xba, 0xcf, 0x72, 0xba, 0x11, 0x0e,
		0xa4, 0x67, 0x5c, 0x84, 0xeb, 0x21, 0x48, 0x6d, 0x1a, 0x26, 0xee, 0x83, 0xe2, 0x73, 0x9c, 0x62,
		0x90, 0xe8, 0x13, 0xe8, 0x34, 0x0c, 0xd5, 0x1c, 0x9e, 0x06, 0xf4, 0x86, 0x7f, 0x9e, 0xc3, 0x33,
		0x02, 0xc3, 0x29, 0x5c, 0xc7, 0x6d, 0xd6, 0x49, 0x8e, 0xd0, 0x9b, 0xe2, 0x0b, 0x82, 0x42, 0x60,
		0x38, 0xc5, 0x01, 0xdc, 0xfa, 0xa2, 0xa0, 0xf0, 0x25, 0x7f, 0x3e, 0x0a, 0x19, 0xc7, 0xae, 0x6f,
		0x3b, 0x76, 0x3f, 0x46, 0x7c, 0x91, 0x33, 0x00, 0x87, 0x10, 0x82, 0x0b, 0x90, 0xee, 0xb7, 0x23,
		0xbe, 0xfc, 0x9a, 0x18, 0x1e, 0xa2, 0x07, 0xe6, 0x60, 0x44, 0x4c, 0x50, 0x96, 0x63, 0xf7, 0x41,
		0xf1, 0xbb, 0x9c, 0x22, 0x2b, 0xc1, 0x78, 0x33, 0x02, 0xec, 0x07, 0x35, 0xdc, 0x0f, 0xc9, 0x57,
		0x44, 0x33, 0x38, 0x84, 0xbb, 0x72, 0x03, 0xdb, 0xe6, 0x56, 0x7f, 0x0c, 0x5f, 0x15, 0xae, 0x14,
		0x18, 0x42, 0x31, 0x03, 0xc3, 0x0d, 0xc3, 0xf3, 0xb7, 0x8c, 0x7a, 0x5f, 0xdd, 0xf1, 0x7b, 0x9c,
		0x63, 0x28, 0x04, 0x71, 0x8f, 0x34, 0xed, 0x83, 0xd0, 0x7c, 0x4d, 0x78, 0x44, 0x82, 0xf1, 0xa1,
		0xe7, 0x07, 0xf4, 0xe0, 0xf0, 0x20, 0x6c, 0xbf, 0x2f, 0x86, 0x1e, 0xc3, 0x2e, 0xca, 0x8c, 0x17,
		0x20, 0xed, 0x5b, 0xd7, 0xfa, 0xa2, 0xf9, 0x03, 0xd1, 0xd3, 0x14, 0x40, 0xc0, 0x4f, 0xc1, 0x91,
		0xae, 0xcb, 0x44, 0x1f, 0x64, 0x7f, 0xc8, 0xc9, 0x0e, 0x75, 0x59, 0x2a, 0xf8, 0x94, 0x70, 0x50,
		0xca, 0x3f, 0x12, 0x53, 0x02, 0x6e, 0xe3, 0x5a, 0x21, 0x1b, 0x33, 0xdf, 0xd8, 0x3c, 0x98, 0xd7,
		0xbe, 0x2e, 0xbc, 0xc6, 0xb0, 0x11, 0xaf, 0xad, 0xc1, 0x21, 0xce, 0x78, 0xb0, 0x7e, 0xfd, 0x86,
		0x98, 0x58, 0x19, 0x7a, 0x3d, 0xda, 0xbb, 0xef, 0x81, 0x7c, 0xe8, 0x4e, 0xb1, 0x03, 0xf0, 0xf5,
		0x86, 0xe1, 0xf6, 0xc1, 0xfc, 0x4d, 0xce, 0x2c, 0x66, 0xfc, 0x70, 0x0b, 0xe1, 0x2f, 0x1a, 0x2e,
		0x21, 0x7f, 0x12, 0x72, 0x82, 0xbc, 0x69, 0x7b, 0xd8, 0x74, 0x6a, 0xb6, 0x75, 0x0d, 0x57, 0xfb,
		0xa0, 0xfe, 0xe3, 0xb6, 0xae, 0x5a, 0x97, 0xe0, 0x84, 0x79, 0x1e, 0xd4, 0x30, 0x57, 0xd1, 0xad,
		0x86, 0xeb, 0x78, 0x41, 0x0f, 0xc6, 0x6f, 0x89, 0x9e, 0x0a, 0x71, 0xf3, 0x14, 0x56, 0xaa, 0x40,
		0x96, 0x3e, 0xf6, 0x1b, 0x92, 0xdf, 0xe6, 0x44, 0xc3, 0x2d, 0x14, 0x9f, 0x38, 0x4c, 0xa7, 0xe1,
		0x1a, 0x5e, 0x3f, 0xf3, 0xdf, 0x77, 0xc4, 0xc4, 0xc1, 0x21, 0x7c, 0xe2, 0x08, 0xb6, 0x5d, 0x4c,
		0x56, 0xfb, 0x3e, 0x18, 0xbe, 0x2b, 0x26, 0x0e, 0x81, 0xe1, 0x14, 0x22, 0x61, 0xe8, 0x83, 0xe2,
		0x4f, 0x04, 0x85, 0xc0, 0x10, 0x8a, 0x77, 0xb7, 0x16, 0x5a, 0x0f, 0xd7, 0x2c, 0x3f, 0xf0, 0xd8,
		0xbe, 0x63, 0x7f, 0xaa, 0xef, 0xbd, 0x16, 0x4d, 0xc2, 0x34, 0x09, 0x5a, 0xba, 0x04, 0x23, 0x6d,
		0x29, 0x06, 0xea, 0xf5, 0xae, 0x49, 0xee, 0xfd, 0xaf, 0xf3, 0xc9, 0x28, 0x9a, 0x61, 0x94, 0x16,
		0x48, 0xbf, 0x47, 0xf3, 0x80, 0xde, 0x64, 0x2f, 0xbc, 0x1e, 0x76, 0x7d, 0x24, 0x0d, 0x28, 0x5d,
		0x84, 0xe1, 0x48, 0x0e, 0xd0, 0x9b, 0xea, 0x83, 0x9c, 0x6a, 0x48, 0x4e, 0x01, 0x4a, 0x0f, 0x40,
		0x82, 0xac, 0xe7, 0xbd, 0xe1, 0x1f, 0xe2, 0x70, 0xaa, 0x5e, 0x7a, 0x18, 0x52, 0x62, 0x1d, 0xef,
		0x0d, 0xfd, 0x30, 0x87, 0x86, 0x10, 0x02, 0x17, 0x6b, 0x78, 0x6f, 0xf8, 0x47, 0x04, 0x5c, 0x40,
		0x08, 0xbc, 0x7f, 0x17, 0xbe, 0xf4, 0xb1, 0x04, 0x9f, 0x87, 0x85, 0xef, 0x2e, 0xc0, 0x20, 0x5f,
		0xbc, 0x7b, 0xa3, 0x3f, 0xca, 0x2b, 0x17, 0x88, 0xd2, 0x83, 0x90, 0xec, 0xd3, 0xe1, 0xbf, 0xc6,
		0xa1, 0x4c, 0xbf, 0x34, 0x03, 0x19, 0x69, 0xc1, 0xee, 0x0d, 0xff, 0x75, 0x0e, 0x97, 0x51, 0xc4,
		0x74, 0xbe, 0x60, 0xf7, 0x26, 0xf8, 0x0d, 0x61, 0x3a, 0x47, 0x10, 0xb7, 0x89, 0xb5, 0xba, 0x37,
		0xfa, 0xe3, 0xc2, 0xeb, 0x02, 0x52, 0x7a, 0x14, 0xd2, 0xe1, 0xfc, 0xdb, 0x1b, 0xff, 0x9b, 0x1c,
		0xdf, 0xc2, 0x10, 0x0f, 0x48, 0xf3, 0x7f, 0x6f, 0x8a, 0xdf, 0x12, 0x1e, 0x90, 0x50, 0x64, 0x18,
		0xb5, 0xaf, 0xe9, 0xbd, 0x99, 0x3e, 0x21, 0x86, 0x51, 0xdb, 0x92, 0x4e, 0x7a, 0x93, 0x4e, 0x83,
		0xbd, 0x29, 0x7e, 0x5b, 0xf4, 0x26, 0xd5, 0x27, 0x66, 0xb4, 0x2f, 0x92, 0xbd, 0x39, 0x3e, 0x29,
		0xcc, 0x68, 0x5b, 0x23, 0x4b, 0x2b, 0x80, 0x3a, 0x17, 0xc8, 0xde, 0x7c, 0x9f, 0xe2, 0x7c, 0xa3,
		0x1d, 0xeb, 0x63, 0xe9, 0x09, 0x38, 0xd4, 0x7d, 0x71, 0xec, 0xcd, 0xfa, 0xe9, 0xd7, 0xdb, 0xb6,
		0x33, 0xf2, 0xda, 0x58, 0x5a, 0x6b, 0xcd, 0xb2, 0xf2, 0xc2, 0xd8, 0x9b, 0xf6, 0x33, 0xaf, 0x47,
		0x27, 0x5a, 0x79, 0x5d, 0x2c, 0x4d, 0x03, 0xb4, 0xd6, 0xa4, 0xde, 0x5c, 0x9f, 0xe5, 0x5c, 0x12,
		0x88, 0x0c, 0x0d, 0xbe, 0x24, 0xf5, 0xc6, 0x7f, 0x4e, 0x0c, 0x0d, 0x8e, 0x20, 0x43, 0x43, 0xac,
		0x46, 0xbd, 0xd1, 0x9f, 0x17, 0x43, 0x43, 0x40, 0x4a, 0x17, 0x20, 0x65, 0x37, 0xeb, 0x75, 0x12,
		0x5b, 0x68, 0xff, 0xd7, 0xbf, 0x72, 0xff, 0xfa, 0x06, 0x07, 0x0b, 0x40, 0xe9, 0x01, 0x48, 0xe2,
		0xc6, 0x06, 0xae, 0xf6, 0x42, 0xfe, 0xe4, 0x0d, 0x31, 0x9f, 0x10, 0xed, 0xd2, 0xa3, 0x00, 0x6c,
		0x33, 0x4d, 0x6f, 0xe8, 0x7a, 0x60, 0xff, 0xed, 0x0d, 0xfe, 0x66, 0x49, 0x0b, 0xd2, 0x22, 0x60,
		0xef, 0xa9, 0xec, 0x4f, 0xf0, 0x5a, 0x94, 0x80, 0x6e, 0xc0, 0x1f, 0x82, 0xc1, 0x67, 0x7c, 0xc7,
		0x0e, 0x8c, 0x5a, 0x2f, 0xf4, 0xbf, 0x73, 0xb4, 0xd0, 0x27, 0x0e, 0x6b, 0x38, 0x1e, 0x0e, 0x8c,
		0x9a, 0xdf, 0x0b, 0xfb, 0x1f, 0x1c, 0x1b, 0x02, 0x08, 0xd8, 0x34, 0xfc, 0xa0, 0x9f, 0x76, 0xff,
		0xa7, 0x00, 0x0b, 0x00, 0x31, 0x9a, 0xfc, 0xbe, 0x8c, 0xb7, 0x7b, 0x61, 0x7f, 0x2a, 0x8c, 0xe6,
		0xfa, 0xa5, 0x87, 0x21, 0x4d, 0x7e, 0xb2, 0xb7, 0xad, 0x7a, 0x80, 0xff, 0x8b, 0x83, 0x5b, 0x08,
		0x52, 0xb3, 0x1f, 0x54, 0x03, 0xab, 0xb7, 0xb3, 0x77, 0x79, 0x4f, 0x0b, 0xfd, 0xd2, 0x34, 0x64,
		0xfc, 0xa0, 0x5a, 0x6d, 0xf2, 0x8c, 0xa6, 0x07, 0xfc, 0xbf, 0xdf, 0x08, 0x37, 0xb9, 0x21, 0xa6,
		0xfc, 0xce, 0x8e, 0xa3, 0xbd, 0xae, 0x67, 0xa5, 0x30, 0xe7, 0xcc, 0x39, 0xec, 0x94, 0x14, 0xde,
		0x38, 0x09, 0x59, 0x9e, 0x49, 0x6d, 0xf3, 0x63, 0xb6, 0x5b, 0x4d, 0xc3, 0x6b, 0xd4, 0x27, 0x1d,
		0xaf, 0x36, 0x59, 0xad, 0x6f, 0x7a, 0x46, 0x03, 0x5f, 0x75, 0xbc, 0xcb, 0xf9, 0x7d, 0xcf, 0x39,
		0xf3, 0x07, 0x3b, 0xca, 0x2b, 0x06, 0x90, 0xa9, 0x78, 0x9e, 0xe3, 0xad, 0x06, 0x46, 0xd0, 0xf4,
		0xd1, 0x29, 0x88, 0x39, 0x97, 0xd9, 0xb5, 0x5f, 0xf9, 0xf0, 0xee, 0x4e, 0x61, 0x6c, 0xdb, 0x68,
		0xd4, 0x4b, 0x45, 0xe7, 0xf2, 0x3d, 0x4e, 0xc3, 0x0a, 0x70, 0xc3, 0x0d, 0xb6, 0x8b, 0x5a, 0xcc,
		0xb9, 0x8c, 0xce, 0xc1, 0x20, 0x7f, 0xe9, 0x80, 0x9d, 0x21, 0x97, 0x6f, 0xdb, 0xdd, 0x29, 0xe4,
		0x98, 0x36, 0x2f, 0x90, 0x21, 0x42, 0xb9, 0x94, 0xf8, 0xe9, 0x8b, 0x05, 0xa5, 0xf8, 0x2c, 0x8c,
		0xce, 0x90, 0xd8, 0xb4, 0x6c, 0xec, 0x3d, 0x66, 0x78, 0xd5, 0xab, 0x64, 0x22, 0xb9, 0x0b, 0xe2,
		0x35, 0xb7, 0xc9, 0xde, 0x62, 0x2a, 0xe7, 0x76, 0x77, 0x0a, 0xe3, 0x8c, 0xae, 0xe6, 0x36, 0x65,
		0x2a, 0xa2, 0x44, 0x74, 0x4d, 0xb7, 0xc9, 0xab, 0x96, 0x74, 0xcd, 0x36, 0x5d, 0xd3, 0x6d, 0xf2,
		0x2a, 0xff, 0x29, 0x06, 0xa3, 0x17, 0x85, 0x0f, 0x17, 0x0d, 0xdb, 0xda, 0xc4, 0x7e, 0x80, 0xce,
		0xc8, 0x2f, 0x91, 0x95, 0x8f, 0xec, 0xee, 0x14, 0x6e, 0x65, 0x44, 0x44, 0x2a, 0x33, 0xb1, 0x4b,
		0xa3, 0x73, 0x30, 0x78, 0x05, 0x7b, 0xfc, 0x42, 0xa4, 0xad, 0xd5, 0xbc, 0x20, 0xd2, 0x6a, 0x2e,
		0x43, 0x4d, 0x48, 0x9b, 0xa2, 0xbd, 0xfc, 0x45, 0xf3, 0x07, 0x27, 0xbb, 0xf6, 0xee, 0x64, 0x87,
		0x8d, 0x93, 0xa1, 0xa7, 0xe8, 0x4b, 0x14, 0xe5, 0x89, 0xdd, 0x9d, 0x42, 0x9e, 0xb7, 0x56, 0x94,
		0xc8, 0x95, 0xb6, 0x6a, 0xca, 0x6f, 0x42, 0x36, 0x0a, 0x46, 0x2a, 0xc4, 0x2f, 0xe3, 0x6d, 0xfe,
		0xa6, 0x18, 0xf9, 0x89, 0x1e, 0x69, 0xbd, 0x09, 0xa9, 0xd0, 0xfb, 0x9a, 0xee, 0x66, 0x75, 0x74,
		0x17, 0x7f, 0x11, 0xb2, 0x14, 0x3b, 0xaf, 0x70, 0x0f, 0x7f, 0x71, 0x0c, 0x86, 0x17, 0x9d, 0x2a,
		0xae, 0xdf, 0x6c, 0xef, 0x6e, 0x42, 0x3a, 0x34, 0x94, 0xbf, 0x60, 0x78, 0xba, 0x5f, 0xef, 0xca,
		0xee, 0x0c, 0xd5, 0x22, 0xee, 0x0c, 0xa5, 0xe8, 0x59, 0xb9, 0x17, 0xd9, 0xdb, 0xfe, 0xf7, 0xed,
		0x51, 0x4f, 0xc4, 0x0f, 0x37, 0xde, 0x83, 0xa8, 0x1c, 0xc9, 0x63, 0xd9, 0x07, 0x5d, 0xe5, 0xe3,
		0xbb, 0x3b, 0x85, 0xdb, 0x18, 0x5e, 0x2a, 0x94, 0x19, 0x22, 0xc9, 0xef, 0xc3, 0x90, 0xf6, 0xf0,
		0x26, 0xf6, 0xb0, 0xcd, 0x3f, 0x5b, 0x49, 0x97, 0x0b, 0xbb, 0x3b, 0x85, 0xa3, 0x8c, 0x21, 0x2c,
		0xf2, 0x23, 0x26, 0x84, 0x62, 0xd2, 0x2b, 0x75, 0xcb, 0xc4, 0xb6, 0xcf, 0xdf, 0xe7, 0x96, 0x7b,
		0x85, 0x17, 0x44, 0x7a, 0x85, 0xcb, 0xd0, 0x7b, 0x61, 0x80, 0xbe, 0x79, 0xe9, 0xf3, 0x4f, 0x0f,
		0xee, 0xec, 0xcb, 0x55, 0x6b, 0xdb, 0x2e, 0x2e, 0x1f, 0xdd, 0xdd, 0x29, 0x1c, 0x66, 0x35, 0x30,
		0x0a, 0xb9, 0x02, 0xce, 0x4a, 0xf8, 0xd9, 0x9b, 0x9b, 0xfc, 0x0b, 0x96, 0x1b, 0xe3, 0x67, 0x14,
		0x11, 0x7e, 0x26, 0x42, 0xab, 0x30, 0xba, 0x81, 0x37, 0x1d, 0x0f, 0xeb, 0xae, 0x87, 0x5d, 0xcf,
		0x31, 0xb1, 0xcf, 0x5e, 0x83, 0x4c, 0x97, 0xdf, 0xb1, 0xbb, 0x53, 0x28, 0x32, 0x7c, 0x87, 0x8a,
		0x4c, 0xa5, 0xb2, 0xd2, 0x95, 0xb0, 0x10, 0x3d, 0x4a, 0x52, 0xaf, 0x90, 0x8d, 0xbe, 0x4f, 0x28,
		0x77, 0x46, 0x77, 0x1a, 0x09, 0x82, 0x56, 0x40, 0x35, 0x36, 0x03, 0xec, 0xc9, 0x46, 0xd1, 0x0f,
		0x70, 0xca, 0x27, 0x77, 0x77, 0x0a, 0x27, 0x18, 0x4d, 0xbb, 0x86, 0x4c, 0x36, 0x42, 0x0b, 0x25,
		0x93, 0x1e, 0x07, 0x24, 0x1a, 0xe1, 0xf8, 0x81, 0xe0, 0x1c, 0xa6, 0x9c, 0xa7, 0x76, 0x77, 0x0a,
		0xb7, 0x47, 0x1b, 0xda, 0xd2, 0x91, 0x59, 0xb9, 0xab, 0x56, 0x5a, 0xa5, 0x24, 0x74, 0x65, 0xc2,
		0x6c, 0x7b, 0xe8, 0xee, 0xc1, 0x24, 0x83, 0x48, 0x1f, 0xf0, 0xb6, 0x48, 0x4c, 0x23, 0xed, 0x7d,
		0xd0, 0xa1, 0x12, 0xe9, 0x03, 0xd6, 0x5e, 0x89, 0xf4, 0xff, 0x43, 0xb2, 0x41, 0x62, 0x82, 0xbe,
		0xa6, 0x99, 0x39, 0x7b, 0x57, 0x5f, 0x71, 0x43, 0x9f, 0xca, 0xf9, 0xdd, 0x9d, 0xc2, 0x21, 0xbe,
		0xc8, 0x11, 0x81, 0x5c, 0x11, 0x23, 0x45, 0x4d, 0x00, 0x23, 0x08, 0x3c, 0x6b, 0xa3, 0x19, 0xd0,
		0x17, 0x3a, 0x49, 0xe8, 0xdf, 0xdf, 0x57, 0x15, 0xd3, 0x21, 0x8c, 0x4d, 0x13, 0x52, 0x5c, 0xb4,
		0x18, 0x23, 0x71, 0xd1, 0x12, 0xa3, 0xfb, 0x60, 0x60, 0xcb, 0xaa, 0x56, 0xb1, 0xcd, 0x5e, 0x05,
		0x95, 0x43, 0x9c, 0xc9, 0x23, 0x21, 0xce, 0x44, 0xf9, 0x17, 0xe3, 0xfc, 0xa3, 0x88, 0x33, 0xfc,
		0x93, 0x91, 0x8e, 0x89, 0x9a, 0x48, 0x23, 0x13, 0x35, 0xcd, 0x03, 0xdb, 0x66, 0xa5, 0xd8, 0x8d,
		0xcc, 0x4a, 0xd7, 0x00, 0x5c, 0x83, 0x78, 0x22, 0xc0, 0x9e, 0xcf, 0xd7, 0xc4, 0x87, 0xfa, 0x1e,
		0xc2, 0x93, 0x2b, 0x21, 0xb6, 0xc3, 0x59, 0x2d, 0xda, 0xe8, 0x20, 0x0a, 0xc5, 0xf9, 0x07, 0x20,
		0x1d, 0xe2, 0xd1, 0x69, 0xb1, 0x00, 0xb2, 0xc6, 0xa3, 0xdd, 0x9d, 0x42, 0x96, 0x11, 0xdd, 0x63,
		0xd9, 0x75, 0xcb, 0xc6, 0x45, 0xbe, 0xd4, 0xe5, 0x3d, 0x18, 0x69, 0xab, 0xb6, 0xcb, 0x7a, 0x3a,
		0x1f, 0x5d, 0x4f, 0xef, 0xbb, 0x81, 0x26, 0x49, 0x4b, 0x6b, 0xfe, 0xcb, 0x71, 0x48, 0x52, 0x5d,
		0x74, 0x1e, 0x52, 0x1b, 0x86, 0x8f, 0xf5, 0xa6, 0x57, 0xe7, 0xa6, 0x1e, 0xdb, 0xdd, 0x29, 0x1c,
		0xe1, 0xa3, 0x93, 0x97, 0x44, 0x66, 0x62, 0x22, 0x5c, 0xf7, 0xea, 0x68, 0x16, 0x86, 0xae, 0x62,
		0xab, 0xb6, 0x15, 0xf8, 0x7a, 0xeb, 0xf3, 0xd8, 0xf2, 0x89, 0xdd, 0x9d, 0xc2, 0x31, 0x86, 0x96,
		0x4b, 0x23, 0x1d, 0xc6, 0x0b, 0x56, 0x8c, 0x60, 0x0b, 0x3d, 0x02, 0x50, 0xf3, 0x0c, 0x77, 0x8b,
		0x71, 0xc4, 0xdb, 0xa7, 0xae, 0x56, 0x59, 0x64, 0x1d, 0xa1, 0x62, 0x81, 0xb7, 0x7c, 0xdd, 0xf0,
		0xcc, 0x2d, 0xeb, 0x0a, 0x7b, 0x7b, 0x26, 0x25, 0xe3, 0x5b, 0x65, 0x11, 0xbc, 0xe5, 0x4f, 0x33,
		0x29, 0x99, 0xf9, 0x84, 0x9d, 0xf4, 0xbd, 0x70, 0xbf, 0xd9, 0xe0, 0xeb, 0xa1, 0x34, 0xf3, 0xb5,
		0x6b, 0x44, 0x66, 0x3e, 0x5e, 0x38, 0xc3, 0xcb, 0xd0, 0x25, 0xc8, 0x32, 0xab, 0x43, 0x3e, 0xfa,
		0xb5, 0x53, 0xf9, 0xf6, 0xdd, 0x9d, 0x42, 0x41, 0x6e, 0x55, 0x37, 0xb6, 0x61, 0x5a, 0x24, 0xb8,
		0x6e, 0x56, 0xaa, 0x95, 0x7f, 0x18, 0x46, 0xda, 0xe6, 0x89, 0x2e, 0x15, 0x8d, 0xcb, 0x15, 0xa5,
		0x25, 0x78, 0xf1, 0x4f, 0x15, 0x50, 0xc3, 0x1c, 0x48, 0xc3, 0xcf, 0x36, 0x49, 0x9a, 0x76, 0x09,
		0xb2, 0x61, 0xed, 0xba, 0x94, 0xb0, 0x49, 0x7e, 0x88, 0x96, 0x47, 0xfc, 0x10, 0x16, 0xd1, 0x0f,
		0xb4, 0x56, 0x61, 0xb4, 0xa5, 0x1b, 0xcd, 0xe6, 0xa4, 0x19, 0xbb, 0x43, 0x25, 0x32, 0x63, 0x87,
		0xa5, 0x8f, 0xb3, 0x42, 0x9e, 0x5f, 0xfe, 0x8a, 0x02, 0xf9, 0x8e, 0xfc, 0xcd, 0xd7, 0xb0, 0xef,
		0x3a, 0x24, 0xdf, 0xd8, 0x84, 0x74, 0x43, 0x08, 0xc3, 0x97, 0x8f, 0x6e, 0x20, 0x0b, 0x0c, 0x49,
		0x22, 0x71, 0x18, 0x4a, 0xb9, 0x31, 0xdf, 0x51, 0x20, 0x39, 0x5d, 0xc3, 0x36, 0x4d, 0x72, 0xb7,
		0x1c, 0x3f, 0xe8, 0x9c, 0x3b, 0x89, 0x34, 0x32, 0x77, 0x12, 0x01, 0x51, 0x77, 0x1d, 0x8f, 0x7f,
		0xdc, 0x2f, 0xab, 0x13, 0x69, 0x44, 0x9d, 0x5e, 0x56, 0x3c, 0x06, 0xc3, 0xbe, 0x8b, 0x4d, 0x6b,
		0xd3, 0xe2, 0xaf, 0x55, 0xb1, 0x81, 0x57, 0xdc, 0xdd, 0x29, 0x4c, 0x30, 0x5c, 0xa4, 0x38, 0xd2,
		0x33, 0x91, 0x12, 0x6e, 0xb7, 0x01, 0x03, 0xd4, 0x6c, 0x1f, 0xbd, 0x1b, 0x06, 0x0c, 0xfa, 0x8b,
		0x3b, 0xeb, 0xb6, 0x3d, 0x9c, 0x45, 0xd5, 0xe5, 0xf5, 0x84, 0xa1, 0x22, 0xeb, 0x09, 0x13, 0xf1,
		0x2a, 0xfe, 0x22, 0x06, 0x43, 0x74, 0xca, 0xfa, 0xbf, 0x12, 0x5f, 0x64, 0x6a, 0xa2, 0x8b, 0x37,
		0x33, 0xae, 0x63, 0x6a, 0x6b, 0x95, 0x45, 0x43, 0x82, 0x88, 0xa9, 0x51, 0x73, 0x30, 0xcc, 0x74,
		0x84, 0x41, 0x89, 0xf6, 0x4e, 0x8a, 0x14, 0xcb, 0x2c, 0x43, 0xb4, 0x24, 0x1a, 0xe8, 0x1f, 0x50,
		0xe0, 0x50, 0x64, 0x7d, 0x68, 0x05, 0xf9, 0x46, 0x67, 0x90, 0xdf, 0xd1, 0xcf, 0x0a, 0x73, 0xe0,
		0x00, 0x3f, 0xfb, 0x62, 0x02, 0x52, 0xfc, 0x7a, 0x66, 0x1b, 0x7d, 0x52, 0x01, 0xd4, 0x39, 0xf4,
		0xd0, 0xa9, 0x5e, 0xe3, 0x8b, 0x47, 0x40, 0xfe, 0x9d, 0xfd, 0x0e, 0xc4, 0xb0, 0xa5, 0xc5, 0x93,
		0x1f, 0xf8, 0xbb, 0x57, 0x3f, 0x11, 0x2b, 0xa0, 0x63, 0x53, 0xe2, 0x54, 0x64, 0x2a, 0xc4, 0xf9,
		0x53, 0xc2, 0x5a, 0xf4, 0xcb, 0x30, 0x12, 0x92, 0xf0, 0xc0, 0xee, 0xdb, 0xaa, 0x63, 0xfb, 0x45,
		0xbc, 0x5f, 0x2c, 0x52, 0x0b, 0x6e, 0x43, 0xf9, 0xae, 0x16, 0xd0, 0x90, 0x47, 0x1f, 0x51, 0x20,
		0x1b, 0xed, 0x2a, 0x74, 0xfb, 0x7e, 0xfd, 0x21, 0xaa, 0x3e, 0xd3, 0x4f, 0xa7, 0xb5, 0x9c, 0x71,
		0x82, 0x9a, 0x72, 0x14, 0x1d, 0x69, 0x99, 0x42, 0xe3, 0x46, 0x72, 0xc4, 0xb3, 0x90, 0xa1, 0x60,
		0xee, 0x84, 0xbe, 0xac, 0xe8, 0xe1, 0x80, 0x09, 0x5a, 0x6b, 0x0e, 0x1d, 0xea, 0xa8, 0x95, 0x36,
		0xbe, 0x3c, 0xfd, 0xf7, 0xaf, 0x4c, 0xdc, 0xf2, 0xf2, 0x2b, 0x13, 0xca, 0x4f, 0x5f, 0x99, 0x50,
		0x7e, 0xf6, 0xca, 0x84, 0xf2, 0xfc, 0xf5, 0x09, 0xe5, 0xab, 0xd7, 0x27, 0x94, 0xef, 0x5d, 0x9f,
		0x50, 0x5e, 0xba, 0x3e, 0xa1, 0xb4, 0x9f, 0x82, 0xbd, 0xf4, 0xe3, 0x09, 0xe5, 0xe9, 0x8c, 0x54,
		0x53, 0xf8, 0x0e, 0xda, 0x87, 0xa7, 0x60, 0xc4, 0xf5, 0x70, 0xd5, 0x32, 0x5b, 0xff, 0x10, 0xe3,
		0x66, 0x1c, 0x7f, 0x0d, 0x01, 0xcc, 0xac, 0xac, 0xf3, 0xb3, 0xbc, 0xe2, 0xc7, 0xe2, 0x00, 0x73,
		0xe1, 0x23, 0xba, 0x06, 0x05, 0x97, 0xee, 0xa3, 0xe8, 0xbe, 0x41, 0xaf, 0xb9, 0x4d, 0xbd, 0x81,
		0x1b, 0x8e, 0xb7, 0xad, 0x6f, 0x7a, 0x86, 0xc9, 0xdf, 0xda, 0x54, 0x4e, 0x2b, 0xe5, 0xfb, 0x77,
		0x77, 0x0a, 0xf7, 0xf2, 0x59, 0x7c, 0x7f, 0x80, 0x3c, 0xe4, 0x8e, 0xba, 0x64, 0x1f, 0x46, 0x55,
		0xe7, 0xdc, 0xe6, 0x22, 0x55, 0xbc, 0xc8, 0xf5, 0xc8, 0x9c, 0x69, 0xd4, 0xe9, 0x1b, 0xb1, 0x8e,
		0x27, 0x7d, 0xcd, 0x28, 0xcf, 0x99, 0xd1, 0xf2, 0xc8, 0x9c, 0x19, 0x16, 0xf1, 0x7f, 0x31, 0x30,
		0x76, 0xc5, 0xf2, 0xad, 0x8d, 0x3a, 0xd6, 0xab, 0xf8, 0x8a, 0x65, 0x62, 0xbd, 0x6e, 0xf9, 0x01,
		0x4f, 0x9e, 0x4e, 0xef, 0xee, 0x14, 0xee, 0xe0, 0x67, 0x2c, 0x9d, 0x4a, 0x91, 0x3d, 0x1e, 0x2f,
		0x9f, 0xa5, 0xc5, 0x0b, 0x96, 0x1f, 0xa0, 0xf7, 0xc0, 0xf8, 0xa6, 0xe3, 0x99, 0x98, 0x36, 0x95,
		0x1e, 0xef, 0x07, 0x44, 0x83, 0xbe, 0x7c, 0x9c, 0x2a, 0xdf, 0xb9, 0xbb, 0x53, 0x38, 0xc9, 0x27,
		0xe4, 0x2e, 0x5a, 0x32, 0x37, 0xa2, 0x0a, 0x73, 0x6e, 0x73, 0x26, 0x2c, 0x2e, 0x7e, 0x3f, 0x09,
		0x6a, 0xe5, 0x39, 0x6c, 0x36, 0x89, 0x43, 0x44, 0x9f, 0x34, 0x21, 0x13, 0x78, 0x06, 0xb1, 0x8e,
		0xbe, 0x35, 0xcf, 0x3e, 0xe3, 0x39, 0xbb, 0x47, 0x1c, 0xb7, 0xa3, 0x27, 0xd7, 0x08, 0x94, 0xbe,
		0xa3, 0x2e, 0x6f, 0x57, 0x24, 0xc2, 0xc8, 0x8e, 0x21, 0x08, 0xb5, 0xd1, 0x45, 0x18, 0x0e, 0xac,
		0x06, 0x76, 0x9a, 0x81, 0x6e, 0xd9, 0x7a, 0x83, 0x7d, 0xe0, 0x11, 0x97, 0x67, 0xf8, 0x48, 0x71,
		0x24, 0x89, 0xe6, 0x25, 0xf3, 0xf6, 0xa2, 0x8f, 0xde, 0x07, 0x43, 0xdc, 0xbb, 0xa6, 0xd3, 0xb4,
		0x03, 0xbe, 0xef, 0x39, 0xdf, 0xaf, 0xfd, 0xcc, 0xf5, 0x33, 0x04, 0xca, 0xb6, 0x3d, 0x52, 0x12,
		0x2f, 0xf3, 0xb6, 0xed, 0xba, 0x42, 0x10, 0xaa, 0x42, 0xc6, 0x74, 0x9b, 0x7a, 0xf4, 0x23, 0xd7,
		0x13, 0x7b, 0x25, 0xa2, 0xe1, 0x50, 0x90, 0xbd, 0x25, 0xe1, 0x23, 0xde, 0x32, 0xdd, 0xa6, 0xe8,
		0xa4, 0x2a, 0x64, 0x6a, 0x52, 0x2d, 0xc9, 0x7d, 0x6b, 0x99, 0xeb, 0x5a, 0x4b, 0x6d, 0x8f, 0x5a,
		0x6a, 0x61, 0x2d, 0xf9, 0x47, 0x40, 0x6d, 0xf7, 0x47, 0xaf, 0x5c, 0x38, 0x29, 0xe7, 0xc2, 0x35,
		0x80, 0x56, 0x3c, 0xa0, 0x21, 0x48, 0x2d, 0x2d, 0xeb, 0x6b, 0xda, 0xf4, 0x4c, 0x85, 0x7d, 0xa8,
		0x70, 0x51, 0x9b, 0x5e, 0xac, 0x3c, 0xb1, 0xac, 0xbd, 0x8b, 0x0b, 0xe9, 0xd7, 0xee, 0x33, 0x2b,
		0xeb, 0xfa, 0xf2, 0xd2, 0xc2, 0x53, 0x5c, 0x46, 0xbf, 0x76, 0x7f, 0x6c, 0x5a, 0x9b, 0x7d, 0x62,
		0x5a, 0xab, 0x70, 0x59, 0x1c, 0x65, 0x01, 0x2e, 0xae, 0x2f, 0x2c, 0xf0, 0xe7, 0x44, 0xf1, 0x43,
		0x71, 0x18, 0x5d, 0x61, 0x93, 0x9b, 0x14, 0xc9, 0x26, 0x80, 0xc7, 0xe6, 0x61, 0xdd, 0xe2, 0xff,
		0xc6, 0xa8, 0x3c, 0x7b, 0x7d, 0xa7, 0x90, 0xe6, 0xb3, 0xf3, 0xfc, 0xec, 0x4f, 0x76, 0x0a, 0xe3,
		0x2d, 0x95, 0x96, 0x1b, 0xe4, 0xc3, 0xbb, 0xce, 0x52, 0x7a, 0x78, 0xc7, 0x18, 0xaa, 0x24, 0x33,
		0xd9, 0xc4, 0x46, 0xd0, 0xf4, 0xc8, 0x70, 0x6e, 0x58, 0x2c, 0xed, 0x4c, 0xca, 0x71, 0x1b, 0x29,
		0x8e, 0x64, 0x26, 0xbc, 0x64, 0x81, 0x14, 0x90, 0x14, 0x69, 0xc3, 0x08, 0xcc, 0x2d, 0xdd, 0xb7,
		0xae, 0xb1, 0x14, 0x69, 0x58, 0x4e, 0x91, 0x5a, 0x65, 0x11, 0x43, 0xa8, 0x78, 0xd5, 0xba, 0x86,
		0xd1, 0x2f, 0xc1, 0x28, 0x16, 0xd1, 0xdc, 0x16, 0x7e, 0xa7, 0xfa, 0x8c, 0x7e, 0x39, 0xc1, 0xeb,
		0xe0, 0x8a, 0x24, 0x78, 0xb8, 0x0d, 0xc9, 0xf3, 0xaa, 0xaf, 0xc6, 0x61, 0x7c, 0x45, 0x2c, 0x32,
		0xcb, 0x2e, 0xb6, 0x45, 0x82, 0x1a, 0xcd, 0xff, 0x94, 0x37, 0x9f, 0xff, 0xc5, 0x6e, 0x2c, 0xff,
		0xeb, 0x92, 0x29, 0xc7, 0xdf, 0xda, 0x4c, 0x39, 0xf1, 0x26, 0x33, 0xe5, 0x5f, 0x68, 0x7d, 0x20,
		0x9f, 0xdc, 0x77, 0x13, 0xdb, 0x11, 0xef, 0xf2, 0xb1, 0x71, 0x97, 0x3e, 0x13, 0xb4, 0xbc, 0xab,
		0x72, 0x70, 0x28, 0xec, 0xa9, 0x99, 0xba, 0xe3, 0xe3, 0x30, 0x15, 0x5a, 0x81, 0x74, 0x58, 0x82,
		0x1e, 0x86, 0x58, 0x38, 0x76, 0xce, 0x5c, 0xdf, 0x29, 0xc4, 0xe8, 0xa0, 0x19, 0x6a, 0x1b, 0x2c,
		0xfc, 0x12, 0x2b, 0x3a, 0x48, 0x62, 0x56, 0x55, 0xdc, 0x5b, 0xc4, 0x21, 0xb3, 0xae, 0x2d, 0xf8,
		0x22, 0x1a, 0xde, 0x0b, 0xe9, 0x30, 0x15, 0xa1, 0xdc, 0x99, 0xb3, 0xc7, 0xf7, 0x6f, 0xa5, 0xe3,
		0xc9, 0xf9, 0x75, 0x08, 0x8e, 0x44, 0x4b, 0x28, 0x45, 0xeb, 0x90, 0x68, 0x7a, 0x75, 0x3f, 0xfc,
		0x5f, 0x0a, 0xdd, 0xa9, 0x25, 0x8b, 0xc8, 0x6f, 0x79, 0xa7, 0x48, 0xd0, 0x91, 0x9d, 0x22, 0x11,
		0xc8, 0x5d, 0x13, 0x7f, 0x5b, 0xba, 0x26, 0xef, 0x43, 0x7c, 0x5d, 0x5b, 0x78, 0x93, 0x4e, 0x27,
		0x1b, 0xe0, 0xaa, 0x11, 0x18, 0x9d, 0x1b, 0x60, 0x22, 0x8d, 0x34, 0x8b, 0x08, 0x78, 0x1f, 0x7d,
		0x3d, 0x0e, 0xc3, 0xf3, 0x0d, 0xa3, 0x86, 0x6f, 0x5a, 0x2f, 0xe9, 0x30, 0x60, 0xd1, 0x0a, 0x79,
		0x3f, 0xed, 0x75, 0x4c, 0x1c, 0xb1, 0x8a, 0x3d, 0x45, 0xee, 0x2f, 0x68, 0x71, 0xf4, 0xfe, 0x82,
		0x8a, 0x6e, 0x42, 0x7f, 0x35, 0x21, 0x49, 0xed, 0x79, 0x2b, 0x7b, 0x6c, 0xa8, 0xdf, 0x1e, 0xfb,
		0x76, 0x1c, 0xb2, 0xb3, 0x46, 0x60, 0xf8, 0x38, 0xb8, 0x59, 0x5d, 0x86, 0x61, 0xb0, 0xca, 0x6a,
		0xe4, 0x27, 0x6c, 0x7b, 0xed, 0xb2, 0xa2, 0x76, 0x89, 0x47, 0xd9, 0xad, 0x9c, 0x27, 0xe2, 0x56,
		0x2e, 0xbb, 0x29, 0x03, 0x6d, 0x90, 0xdb, 0x84, 0x1e, 0x82, 0x94, 0x69, 0x04, 0xb8, 0xe6, 0x78,
		0xdb, 0x9d, 0xa7, 0xbe, 0xa2, 0x44, 0x26, 0x09, 0xd5, 0xc3, 0xdb, 0xd7, 0x58, 0x5f, 0xb7, 0xaf,
		0xbc, 0xdb, 0xfe, 0x21, 0x06, 0x83, 0x17, 0xd9, 0xc2, 0x8f, 0xee, 0x85, 0x24, 0xfb, 0x27, 0x4d,
		0x0a, 0x4d, 0x76, 0xa5, 0xcb, 0x0f, 0x2a, 0x8e, 0x5c, 0x7e, 0x50, 0xc9, 0x01, 0xab, 0xa4, 0x57,
		0x44, 0x9e, 0xb3, 0x61, 0x6c, 0x58, 0x75, 0x2b, 0xd8, 0xa6, 0xde, 0x8c, 0x45, 0xae, 0x88, 0x5a,
		0x85, 0xd1, 0x2b, 0xa2, 0x96, 0x1c, 0xd5, 0x20, 0xd5, 0xc0, 0x81, 0x41, 0x03, 0x94, 0xdd, 0xc9,
		0xde, 0xb3, 0xd7, 0xfe, 0x9f, 0x35, 0x6b, 0x72, 0x91, 0xab, 0xb3, 0x0c, 0x5a, 0x72, 0xa7, 0xe0,
		0x89, 0xb8, 0x53, 0x08, 0xf3, 0x17, 0xe8, 0xd7, 0xbe, 0x2d, 0xe4, 0x41, 0xce, 0x5d, 0xb9, 0x73,
		0xbf, 0x90, 0x80, 0x11, 0x6e, 0x45, 0x78, 0xa2, 0xf3, 0x26, 0xc7, 0x66, 0x34, 0x8b, 0x8c, 0xbd,
		0x3d, 0x59, 0xe4, 0x53, 0x90, 0x62, 0xff, 0x56, 0xc7, 0xaa, 0xf2, 0x84, 0xe4, 0x91, 0xeb, 0x3b,
		0x85, 0xc1, 0x79, 0x22, 0xa3, 0x15, 0x20, 0x51, 0x1c, 0xa1, 0x3f, 0x22, 0x5d, 0xe1, 0xb6, 0x91,
		0x0f, 0x52, 0x21, 0xa3, 0xe6, 0x79, 0xa6, 0xcf, 0xbb, 0x6f, 0x62, 0xff, 0xee, 0x93, 0x3b, 0x4c,
		0x20, 0x23, 0x1d, 0x26, 0x84, 0xc8, 0x91, 0x22, 0x23, 0xb9, 0xef, 0x3d, 0x5c, 0x5b, 0x9f, 0xfc,
		0x1c, 0x23, 0xe4, 0xcf, 0x15, 0x50, 0xb9, 0x35, 0xfe, 0x5b, 0x15, 0x22, 0x55, 0x48, 0x7b, 0x9c,
		0xaa, 0x57, 0xd2, 0xd1, 0xe6, 0x08, 0x79, 0xf2, 0x0d, 0x29, 0xda, 0x62, 0x84, 0x4b, 0xb9, 0xfd,
		0xdf, 0x52, 0x60, 0x48, 0xc3, 0xd2, 0x9c, 0xcf, 0x6c, 0x8f, 0xdd, 0xa8, 0xed, 0x6f, 0xf3, 0x92,
		0xc1, 0xad, 0xde, 0x66, 0xff, 0xf2, 0x2f, 0x90, 0x8f, 0x59, 0x0f, 0x5e, 0x6d, 0xf1, 0x87, 0x3b,
		0x05, 0xe5, 0x80, 0x55, 0x9f, 0xfd, 0xcb, 0x14, 0x0c, 0x72, 0x0a, 0xe4, 0x40, 0x82, 0xec, 0x4a,
		0xd0, 0xdd, 0xbd, 0xaa, 0x92, 0xf6, 0x2e, 0xf9, 0x9e, 0x76, 0x15, 0x73, 0xf4, 0x18, 0x0f, 0x15,
		0x87, 0xa7, 0x78, 0xe5, 0x53, 0x8e, 0x8b, 0xed, 0x92, 0x72, 0x17, 0xf2, 0x21, 0x49, 0x93, 0x6b,
		0xd4, 0x93, 0x64, 0xcf, 0x03, 0xcb, 0x3d, 0xb2, 0xf4, 0x23, 0xb4, 0xce, 0xb1, 0x62, 0x36, 0xac,
		0xd3, 0x24, 0xe5, 0xa4, 0xd2, 0x06, 0x24, 0x48, 0x6e, 0x8b, 0x8a, 0xbd, 0x13, 0xdf, 0xfc, 0xa9,
		0xfd, 0xe3, 0xb4, 0x75, 0x40, 0xda, 0xd9, 0x46, 0x92, 0x13, 0x93, 0xea, 0x7e, 0x11, 0x80, 0x30,
		0xb2, 0xff, 0xa2, 0xd5, 0x57, 0xa5, 0x7d, 0x0e, 0x8e, 0x62, 0x81, 0xd6, 0x79, 0xa4, 0x38, 0x1e,
		0xd6, 0xc9, 0xfe, 0x91, 0x97, 0xa8, 0xfa, 0x5e, 0x05, 0xf9, 0x30, 0xc0, 0xf2, 0x43, 0x74, 0x47,
		0x3f, 0xe9, 0x63, 0xff, 0xed, 0xcd, 0xd3, 0xba, 0xc7, 0x8b, 0x23, 0x61, 0xdd, 0x2c, 0xab, 0x24,
		0x2d, 0x7e, 0xbf, 0x02, 0x43, 0x8c, 0x96, 0x37, 0xba, 0xbf, 0xba, 0xfb, 0x6d, 0x36, 0x3f, 0x8b,
		0x2e, 0x1e, 0x6a, 0x6f, 0x76, 0x68, 0xc1, 0xbd, 0x0a, 0xba, 0xd2, 0xca, 0x60, 0x4e, 0xf6, 0x95,
		0x84, 0xf5, 0xdf, 0xf4, 0xa3, 0xb4, 0xfe, 0x5b, 0x8b, 0x6a, 0x58, 0x3f, 0x4f, 0xcc, 0x48, 0xdb,
		0x3f, 0xa8, 0xc0, 0x30, 0x27, 0xe6, 0x8d, 0xef, 0xb3, 0xfa, 0x7e, 0x5b, 0xcf, 0x2f, 0x05, 0x8a,
		0x87, 0xdb, 0x5b, 0xdf, 0x32, 0xe2, 0x5e, 0x05, 0x35, 0x20, 0x49, 0x27, 0x94, 0x3d, 0x8f, 0xe1,
		0xe5, 0x39, 0x32, 0x7f, 0xc7, 0xfe, 0x4a, 0x7b, 0x0e, 0x29, 0x0f, 0xb3, 0x0a, 0xdf, 0xc2, 0x83,
		0xf8, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xa1, 0x52, 0xcf, 0xd0, 0xfe, 0x5c, 0x00, 0x00,
	}
	r := bytes.NewReader(gzipped)
	gzipr, err := compress_gzip.NewReader(r)
	if err != nil {
		panic(err)
	}
	ungzipped, err := io_ioutil.ReadAll(gzipr)
	if err != nil {
		panic(err)
	}
	if err := github_com_gogo_protobuf_proto.Unmarshal(ungzipped, d); err != nil {
		panic(err)
	}
	return d
}
func (this *CPUOptions) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*CPUOptions)
	if !ok {
		that2, ok := that.(CPUOptions)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *CPUOptions")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *CPUOptions but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *CPUOptions but is not nil && this == nil")
	}
	return nil
}
func (this *CPUOptions) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CPUOptions)
	if !ok {
		that2, ok := that.(CPUOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *GPUOptions) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GPUOptions)
	if !ok {
		that2, ok := that.(GPUOptions)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GPUOptions")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GPUOptions but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GPUOptions but is not nil && this == nil")
	}
	if this.PerProcessGpuMemoryFraction != that1.PerProcessGpuMemoryFraction {
		return fmt.Errorf("PerProcessGpuMemoryFraction this(%v) Not Equal that(%v)", this.PerProcessGpuMemoryFraction, that1.PerProcessGpuMemoryFraction)
	}
	if this.AllocatorType != that1.AllocatorType {
		return fmt.Errorf("AllocatorType this(%v) Not Equal that(%v)", this.AllocatorType, that1.AllocatorType)
	}
	if this.VisibleDeviceList != that1.VisibleDeviceList {
		return fmt.Errorf("VisibleDeviceList this(%v) Not Equal that(%v)", this.VisibleDeviceList, that1.VisibleDeviceList)
	}
	if this.ForceGpuCompatible != that1.ForceGpuCompatible {
		return fmt.Errorf("ForceGpuCompatible this(%v) Not Equal that(%v)", this.ForceGpuCompatible, that1.ForceGpuCompatible)
	}
	return nil
}
func (this *GPUOptions) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GPUOptions)
	if !ok {
		that2, ok := that.(GPUOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.PerProcessGpuMemoryFraction != that1.PerProcessGpuMemoryFraction {
		return false
	}
	if this.AllocatorType != that1.AllocatorType {
		return false
	}
	if this.VisibleDeviceList != that1.VisibleDeviceList {
		return false
	}
	if this.ForceGpuCompatible != that1.ForceGpuCompatible {
		return false
	}
	return true
}
func (this *ExecutionOptions) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ExecutionOptions)
	if !ok {
		that2, ok := that.(ExecutionOptions)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ExecutionOptions")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ExecutionOptions but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ExecutionOptions but is not nil && this == nil")
	}
	if this.TraceLevel != that1.TraceLevel {
		return fmt.Errorf("TraceLevel this(%v) Not Equal that(%v)", this.TraceLevel, that1.TraceLevel)
	}
	if this.TimeoutInMs != that1.TimeoutInMs {
		return fmt.Errorf("TimeoutInMs this(%v) Not Equal that(%v)", this.TimeoutInMs, that1.TimeoutInMs)
	}
	if len(this.DeviceCount) != len(that1.DeviceCount) {
		return fmt.Errorf("DeviceCount this(%v) Not Equal that(%v)", len(this.DeviceCount), len(that1.DeviceCount))
	}
	for i := range this.DeviceCount {
		if this.DeviceCount[i] != that1.DeviceCount[i] {
			return fmt.Errorf("DeviceCount this[%v](%v) Not Equal that[%v](%v)", i, this.DeviceCount[i], i, that1.DeviceCount[i])
		}
	}
	if !this.CpuOptions.Equal(that1.CpuOptions) {
		return fmt.Errorf("CpuOptions this(%v) Not Equal that(%v)", this.CpuOptions, that1.CpuOptions)
	}
	if !this.GpuOptions.Equal(that1.GpuOptions) {
		return fmt.Errorf("GpuOptions this(%v) Not Equal that(%v)", this.GpuOptions, that1.GpuOptions)
	}
	return nil
}
func (this *ExecutionOptions) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ExecutionOptions)
	if !ok {
		that2, ok := that.(ExecutionOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.TraceLevel != that1.TraceLevel {
		return false
	}
	if this.TimeoutInMs != that1.TimeoutInMs {
		return false
	}
	if len(this.DeviceCount) != len(that1.DeviceCount) {
		return false
	}
	for i := range this.DeviceCount {
		if this.DeviceCount[i] != that1.DeviceCount[i] {
			return false
		}
	}
	if !this.CpuOptions.Equal(that1.CpuOptions) {
		return false
	}
	if !this.GpuOptions.Equal(that1.GpuOptions) {
		return false
	}
	return true
}
func (this *PredictionOptions) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*PredictionOptions)
	if !ok {
		that2, ok := that.(PredictionOptions)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *PredictionOptions")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *PredictionOptions but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *PredictionOptions but is not nil && this == nil")
	}
	if this.RequestID != that1.RequestID {
		return fmt.Errorf("RequestID this(%v) Not Equal that(%v)", this.RequestID, that1.RequestID)
	}
	if this.FeatureLimit != that1.FeatureLimit {
		return fmt.Errorf("FeatureLimit this(%v) Not Equal that(%v)", this.FeatureLimit, that1.FeatureLimit)
	}
	if this.BatchSize != that1.BatchSize {
		return fmt.Errorf("BatchSize this(%v) Not Equal that(%v)", this.BatchSize, that1.BatchSize)
	}
	if !this.ExecutionOptions.Equal(that1.ExecutionOptions) {
		return fmt.Errorf("ExecutionOptions this(%v) Not Equal that(%v)", this.ExecutionOptions, that1.ExecutionOptions)
	}
	return nil
}
func (this *PredictionOptions) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PredictionOptions)
	if !ok {
		that2, ok := that.(PredictionOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.RequestID != that1.RequestID {
		return false
	}
	if this.FeatureLimit != that1.FeatureLimit {
		return false
	}
	if this.BatchSize != that1.BatchSize {
		return false
	}
	if !this.ExecutionOptions.Equal(that1.ExecutionOptions) {
		return false
	}
	return true
}
func (this *PredictorOpenRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*PredictorOpenRequest)
	if !ok {
		that2, ok := that.(PredictorOpenRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *PredictorOpenRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *PredictorOpenRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *PredictorOpenRequest but is not nil && this == nil")
	}
	if this.ModelName != that1.ModelName {
		return fmt.Errorf("ModelName this(%v) Not Equal that(%v)", this.ModelName, that1.ModelName)
	}
	if this.ModelVersion != that1.ModelVersion {
		return fmt.Errorf("ModelVersion this(%v) Not Equal that(%v)", this.ModelVersion, that1.ModelVersion)
	}
	if this.FrameworkName != that1.FrameworkName {
		return fmt.Errorf("FrameworkName this(%v) Not Equal that(%v)", this.FrameworkName, that1.FrameworkName)
	}
	if this.FrameworkVersion != that1.FrameworkVersion {
		return fmt.Errorf("FrameworkVersion this(%v) Not Equal that(%v)", this.FrameworkVersion, that1.FrameworkVersion)
	}
	if !this.Options.Equal(that1.Options) {
		return fmt.Errorf("Options this(%v) Not Equal that(%v)", this.Options, that1.Options)
	}
	return nil
}
func (this *PredictorOpenRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PredictorOpenRequest)
	if !ok {
		that2, ok := that.(PredictorOpenRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ModelName != that1.ModelName {
		return false
	}
	if this.ModelVersion != that1.ModelVersion {
		return false
	}
	if this.FrameworkName != that1.FrameworkName {
		return false
	}
	if this.FrameworkVersion != that1.FrameworkVersion {
		return false
	}
	if !this.Options.Equal(that1.Options) {
		return false
	}
	return true
}
func (this *PredictorCloseResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*PredictorCloseResponse)
	if !ok {
		that2, ok := that.(PredictorCloseResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *PredictorCloseResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *PredictorCloseResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *PredictorCloseResponse but is not nil && this == nil")
	}
	return nil
}
func (this *PredictorCloseResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PredictorCloseResponse)
	if !ok {
		that2, ok := that.(PredictorCloseResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *Predictor) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Predictor)
	if !ok {
		that2, ok := that.(Predictor)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Predictor")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Predictor but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Predictor but is not nil && this == nil")
	}
	if this.ID != that1.ID {
		return fmt.Errorf("ID this(%v) Not Equal that(%v)", this.ID, that1.ID)
	}
	return nil
}
func (this *Predictor) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Predictor)
	if !ok {
		that2, ok := that.(Predictor)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	return true
}
func (this *URLsRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*URLsRequest)
	if !ok {
		that2, ok := that.(URLsRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *URLsRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *URLsRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *URLsRequest but is not nil && this == nil")
	}
	if !this.Predictor.Equal(that1.Predictor) {
		return fmt.Errorf("Predictor this(%v) Not Equal that(%v)", this.Predictor, that1.Predictor)
	}
	if len(this.Urls) != len(that1.Urls) {
		return fmt.Errorf("Urls this(%v) Not Equal that(%v)", len(this.Urls), len(that1.Urls))
	}
	for i := range this.Urls {
		if !this.Urls[i].Equal(that1.Urls[i]) {
			return fmt.Errorf("Urls this[%v](%v) Not Equal that[%v](%v)", i, this.Urls[i], i, that1.Urls[i])
		}
	}
	if !this.Options.Equal(that1.Options) {
		return fmt.Errorf("Options this(%v) Not Equal that(%v)", this.Options, that1.Options)
	}
	return nil
}
func (this *URLsRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*URLsRequest)
	if !ok {
		that2, ok := that.(URLsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Predictor.Equal(that1.Predictor) {
		return false
	}
	if len(this.Urls) != len(that1.Urls) {
		return false
	}
	for i := range this.Urls {
		if !this.Urls[i].Equal(that1.Urls[i]) {
			return false
		}
	}
	if !this.Options.Equal(that1.Options) {
		return false
	}
	return true
}
func (this *URLsRequest_URL) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*URLsRequest_URL)
	if !ok {
		that2, ok := that.(URLsRequest_URL)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *URLsRequest_URL")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *URLsRequest_URL but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *URLsRequest_URL but is not nil && this == nil")
	}
	if this.ID != that1.ID {
		return fmt.Errorf("ID this(%v) Not Equal that(%v)", this.ID, that1.ID)
	}
	if this.Data != that1.Data {
		return fmt.Errorf("Data this(%v) Not Equal that(%v)", this.Data, that1.Data)
	}
	return nil
}
func (this *URLsRequest_URL) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*URLsRequest_URL)
	if !ok {
		that2, ok := that.(URLsRequest_URL)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Data != that1.Data {
		return false
	}
	return true
}
func (this *ImagesRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ImagesRequest)
	if !ok {
		that2, ok := that.(ImagesRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ImagesRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ImagesRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ImagesRequest but is not nil && this == nil")
	}
	if !this.Predictor.Equal(that1.Predictor) {
		return fmt.Errorf("Predictor this(%v) Not Equal that(%v)", this.Predictor, that1.Predictor)
	}
	if len(this.Images) != len(that1.Images) {
		return fmt.Errorf("Images this(%v) Not Equal that(%v)", len(this.Images), len(that1.Images))
	}
	for i := range this.Images {
		if !this.Images[i].Equal(that1.Images[i]) {
			return fmt.Errorf("Images this[%v](%v) Not Equal that[%v](%v)", i, this.Images[i], i, that1.Images[i])
		}
	}
	if !this.Options.Equal(that1.Options) {
		return fmt.Errorf("Options this(%v) Not Equal that(%v)", this.Options, that1.Options)
	}
	return nil
}
func (this *ImagesRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ImagesRequest)
	if !ok {
		that2, ok := that.(ImagesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Predictor.Equal(that1.Predictor) {
		return false
	}
	if len(this.Images) != len(that1.Images) {
		return false
	}
	for i := range this.Images {
		if !this.Images[i].Equal(that1.Images[i]) {
			return false
		}
	}
	if !this.Options.Equal(that1.Options) {
		return false
	}
	return true
}
func (this *ImagesRequest_Image) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ImagesRequest_Image)
	if !ok {
		that2, ok := that.(ImagesRequest_Image)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ImagesRequest_Image")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ImagesRequest_Image but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ImagesRequest_Image but is not nil && this == nil")
	}
	if this.ID != that1.ID {
		return fmt.Errorf("ID this(%v) Not Equal that(%v)", this.ID, that1.ID)
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return fmt.Errorf("Data this(%v) Not Equal that(%v)", this.Data, that1.Data)
	}
	return nil
}
func (this *ImagesRequest_Image) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ImagesRequest_Image)
	if !ok {
		that2, ok := that.(ImagesRequest_Image)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	return true
}
func (this *DatasetRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*DatasetRequest)
	if !ok {
		that2, ok := that.(DatasetRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *DatasetRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *DatasetRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *DatasetRequest but is not nil && this == nil")
	}
	if !this.Predictor.Equal(that1.Predictor) {
		return fmt.Errorf("Predictor this(%v) Not Equal that(%v)", this.Predictor, that1.Predictor)
	}
	if !this.Dataset.Equal(that1.Dataset) {
		return fmt.Errorf("Dataset this(%v) Not Equal that(%v)", this.Dataset, that1.Dataset)
	}
	if !this.Options.Equal(that1.Options) {
		return fmt.Errorf("Options this(%v) Not Equal that(%v)", this.Options, that1.Options)
	}
	return nil
}
func (this *DatasetRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DatasetRequest)
	if !ok {
		that2, ok := that.(DatasetRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Predictor.Equal(that1.Predictor) {
		return false
	}
	if !this.Dataset.Equal(that1.Dataset) {
		return false
	}
	if !this.Options.Equal(that1.Options) {
		return false
	}
	return true
}
func (this *DatasetRequest_Dataset) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*DatasetRequest_Dataset)
	if !ok {
		that2, ok := that.(DatasetRequest_Dataset)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *DatasetRequest_Dataset")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *DatasetRequest_Dataset but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *DatasetRequest_Dataset but is not nil && this == nil")
	}
	if this.Category != that1.Category {
		return fmt.Errorf("Category this(%v) Not Equal that(%v)", this.Category, that1.Category)
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	return nil
}
func (this *DatasetRequest_Dataset) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DatasetRequest_Dataset)
	if !ok {
		that2, ok := that.(DatasetRequest_Dataset)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Category != that1.Category {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *Feature) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Feature)
	if !ok {
		that2, ok := that.(Feature)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Feature")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Feature but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Feature but is not nil && this == nil")
	}
	if this.Index != that1.Index {
		return fmt.Errorf("Index this(%v) Not Equal that(%v)", this.Index, that1.Index)
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if this.Probability != that1.Probability {
		return fmt.Errorf("Probability this(%v) Not Equal that(%v)", this.Probability, that1.Probability)
	}
	if len(this.Metadata) != len(that1.Metadata) {
		return fmt.Errorf("Metadata this(%v) Not Equal that(%v)", len(this.Metadata), len(that1.Metadata))
	}
	for i := range this.Metadata {
		if this.Metadata[i] != that1.Metadata[i] {
			return fmt.Errorf("Metadata this[%v](%v) Not Equal that[%v](%v)", i, this.Metadata[i], i, that1.Metadata[i])
		}
	}
	return nil
}
func (this *Feature) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Feature)
	if !ok {
		that2, ok := that.(Feature)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Index != that1.Index {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Probability != that1.Probability {
		return false
	}
	if len(this.Metadata) != len(that1.Metadata) {
		return false
	}
	for i := range this.Metadata {
		if this.Metadata[i] != that1.Metadata[i] {
			return false
		}
	}
	return true
}
func (this *FeatureResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*FeatureResponse)
	if !ok {
		that2, ok := that.(FeatureResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *FeatureResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *FeatureResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *FeatureResponse but is not nil && this == nil")
	}
	if this.ID != that1.ID {
		return fmt.Errorf("ID this(%v) Not Equal that(%v)", this.ID, that1.ID)
	}
	if this.RequestID != that1.RequestID {
		return fmt.Errorf("RequestID this(%v) Not Equal that(%v)", this.RequestID, that1.RequestID)
	}
	if this.InputID != that1.InputID {
		return fmt.Errorf("InputID this(%v) Not Equal that(%v)", this.InputID, that1.InputID)
	}
	if len(this.Features) != len(that1.Features) {
		return fmt.Errorf("Features this(%v) Not Equal that(%v)", len(this.Features), len(that1.Features))
	}
	for i := range this.Features {
		if !this.Features[i].Equal(that1.Features[i]) {
			return fmt.Errorf("Features this[%v](%v) Not Equal that[%v](%v)", i, this.Features[i], i, that1.Features[i])
		}
	}
	if len(this.Metadata) != len(that1.Metadata) {
		return fmt.Errorf("Metadata this(%v) Not Equal that(%v)", len(this.Metadata), len(that1.Metadata))
	}
	for i := range this.Metadata {
		if this.Metadata[i] != that1.Metadata[i] {
			return fmt.Errorf("Metadata this[%v](%v) Not Equal that[%v](%v)", i, this.Metadata[i], i, that1.Metadata[i])
		}
	}
	return nil
}
func (this *FeatureResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*FeatureResponse)
	if !ok {
		that2, ok := that.(FeatureResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.RequestID != that1.RequestID {
		return false
	}
	if this.InputID != that1.InputID {
		return false
	}
	if len(this.Features) != len(that1.Features) {
		return false
	}
	for i := range this.Features {
		if !this.Features[i].Equal(that1.Features[i]) {
			return false
		}
	}
	if len(this.Metadata) != len(that1.Metadata) {
		return false
	}
	for i := range this.Metadata {
		if this.Metadata[i] != that1.Metadata[i] {
			return false
		}
	}
	return true
}
func (this *FeaturesResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*FeaturesResponse)
	if !ok {
		that2, ok := that.(FeaturesResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *FeaturesResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *FeaturesResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *FeaturesResponse but is not nil && this == nil")
	}
	if this.ID != that1.ID {
		return fmt.Errorf("ID this(%v) Not Equal that(%v)", this.ID, that1.ID)
	}
	if len(this.Responses) != len(that1.Responses) {
		return fmt.Errorf("Responses this(%v) Not Equal that(%v)", len(this.Responses), len(that1.Responses))
	}
	for i := range this.Responses {
		if !this.Responses[i].Equal(that1.Responses[i]) {
			return fmt.Errorf("Responses this[%v](%v) Not Equal that[%v](%v)", i, this.Responses[i], i, that1.Responses[i])
		}
	}
	return nil
}
func (this *FeaturesResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*FeaturesResponse)
	if !ok {
		that2, ok := that.(FeaturesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if len(this.Responses) != len(that1.Responses) {
		return false
	}
	for i := range this.Responses {
		if !this.Responses[i].Equal(that1.Responses[i]) {
			return false
		}
	}
	return true
}
func (this *ResetRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ResetRequest)
	if !ok {
		that2, ok := that.(ResetRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ResetRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ResetRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ResetRequest but is not nil && this == nil")
	}
	if this.ID != that1.ID {
		return fmt.Errorf("ID this(%v) Not Equal that(%v)", this.ID, that1.ID)
	}
	if !this.Predictor.Equal(that1.Predictor) {
		return fmt.Errorf("Predictor this(%v) Not Equal that(%v)", this.Predictor, that1.Predictor)
	}
	return nil
}
func (this *ResetRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResetRequest)
	if !ok {
		that2, ok := that.(ResetRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if !this.Predictor.Equal(that1.Predictor) {
		return false
	}
	return true
}
func (this *ResetResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ResetResponse)
	if !ok {
		that2, ok := that.(ResetResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ResetResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ResetResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ResetResponse but is not nil && this == nil")
	}
	if !this.Predictor.Equal(that1.Predictor) {
		return fmt.Errorf("Predictor this(%v) Not Equal that(%v)", this.Predictor, that1.Predictor)
	}
	return nil
}
func (this *ResetResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResetResponse)
	if !ok {
		that2, ok := that.(ResetResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Predictor.Equal(that1.Predictor) {
		return false
	}
	return true
}
func (this *CPUOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&dlframework.CPUOptions{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GPUOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dlframework.GPUOptions{")
	s = append(s, "PerProcessGpuMemoryFraction: "+fmt.Sprintf("%#v", this.PerProcessGpuMemoryFraction)+",\n")
	s = append(s, "AllocatorType: "+fmt.Sprintf("%#v", this.AllocatorType)+",\n")
	s = append(s, "VisibleDeviceList: "+fmt.Sprintf("%#v", this.VisibleDeviceList)+",\n")
	s = append(s, "ForceGpuCompatible: "+fmt.Sprintf("%#v", this.ForceGpuCompatible)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExecutionOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dlframework.ExecutionOptions{")
	s = append(s, "TraceLevel: "+fmt.Sprintf("%#v", this.TraceLevel)+",\n")
	s = append(s, "TimeoutInMs: "+fmt.Sprintf("%#v", this.TimeoutInMs)+",\n")
	keysForDeviceCount := make([]string, 0, len(this.DeviceCount))
	for k := range this.DeviceCount {
		keysForDeviceCount = append(keysForDeviceCount, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForDeviceCount)
	mapStringForDeviceCount := "map[string]int32{"
	for _, k := range keysForDeviceCount {
		mapStringForDeviceCount += fmt.Sprintf("%#v: %#v,", k, this.DeviceCount[k])
	}
	mapStringForDeviceCount += "}"
	if this.DeviceCount != nil {
		s = append(s, "DeviceCount: "+mapStringForDeviceCount+",\n")
	}
	if this.CpuOptions != nil {
		s = append(s, "CpuOptions: "+fmt.Sprintf("%#v", this.CpuOptions)+",\n")
	}
	if this.GpuOptions != nil {
		s = append(s, "GpuOptions: "+fmt.Sprintf("%#v", this.GpuOptions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PredictionOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dlframework.PredictionOptions{")
	s = append(s, "RequestID: "+fmt.Sprintf("%#v", this.RequestID)+",\n")
	s = append(s, "FeatureLimit: "+fmt.Sprintf("%#v", this.FeatureLimit)+",\n")
	s = append(s, "BatchSize: "+fmt.Sprintf("%#v", this.BatchSize)+",\n")
	if this.ExecutionOptions != nil {
		s = append(s, "ExecutionOptions: "+fmt.Sprintf("%#v", this.ExecutionOptions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PredictorOpenRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dlframework.PredictorOpenRequest{")
	s = append(s, "ModelName: "+fmt.Sprintf("%#v", this.ModelName)+",\n")
	s = append(s, "ModelVersion: "+fmt.Sprintf("%#v", this.ModelVersion)+",\n")
	s = append(s, "FrameworkName: "+fmt.Sprintf("%#v", this.FrameworkName)+",\n")
	s = append(s, "FrameworkVersion: "+fmt.Sprintf("%#v", this.FrameworkVersion)+",\n")
	if this.Options != nil {
		s = append(s, "Options: "+fmt.Sprintf("%#v", this.Options)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PredictorCloseResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&dlframework.PredictorCloseResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Predictor) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dlframework.Predictor{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *URLsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dlframework.URLsRequest{")
	if this.Predictor != nil {
		s = append(s, "Predictor: "+fmt.Sprintf("%#v", this.Predictor)+",\n")
	}
	if this.Urls != nil {
		s = append(s, "Urls: "+fmt.Sprintf("%#v", this.Urls)+",\n")
	}
	if this.Options != nil {
		s = append(s, "Options: "+fmt.Sprintf("%#v", this.Options)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *URLsRequest_URL) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dlframework.URLsRequest_URL{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ImagesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dlframework.ImagesRequest{")
	if this.Predictor != nil {
		s = append(s, "Predictor: "+fmt.Sprintf("%#v", this.Predictor)+",\n")
	}
	if this.Images != nil {
		s = append(s, "Images: "+fmt.Sprintf("%#v", this.Images)+",\n")
	}
	if this.Options != nil {
		s = append(s, "Options: "+fmt.Sprintf("%#v", this.Options)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ImagesRequest_Image) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dlframework.ImagesRequest_Image{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DatasetRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dlframework.DatasetRequest{")
	if this.Predictor != nil {
		s = append(s, "Predictor: "+fmt.Sprintf("%#v", this.Predictor)+",\n")
	}
	if this.Dataset != nil {
		s = append(s, "Dataset: "+fmt.Sprintf("%#v", this.Dataset)+",\n")
	}
	if this.Options != nil {
		s = append(s, "Options: "+fmt.Sprintf("%#v", this.Options)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DatasetRequest_Dataset) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dlframework.DatasetRequest_Dataset{")
	s = append(s, "Category: "+fmt.Sprintf("%#v", this.Category)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Feature) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dlframework.Feature{")
	s = append(s, "Index: "+fmt.Sprintf("%#v", this.Index)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Probability: "+fmt.Sprintf("%#v", this.Probability)+",\n")
	keysForMetadata := make([]string, 0, len(this.Metadata))
	for k := range this.Metadata {
		keysForMetadata = append(keysForMetadata, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMetadata)
	mapStringForMetadata := "map[string]string{"
	for _, k := range keysForMetadata {
		mapStringForMetadata += fmt.Sprintf("%#v: %#v,", k, this.Metadata[k])
	}
	mapStringForMetadata += "}"
	if this.Metadata != nil {
		s = append(s, "Metadata: "+mapStringForMetadata+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FeatureResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dlframework.FeatureResponse{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "RequestID: "+fmt.Sprintf("%#v", this.RequestID)+",\n")
	s = append(s, "InputID: "+fmt.Sprintf("%#v", this.InputID)+",\n")
	if this.Features != nil {
		s = append(s, "Features: "+fmt.Sprintf("%#v", this.Features)+",\n")
	}
	keysForMetadata := make([]string, 0, len(this.Metadata))
	for k := range this.Metadata {
		keysForMetadata = append(keysForMetadata, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMetadata)
	mapStringForMetadata := "map[string]string{"
	for _, k := range keysForMetadata {
		mapStringForMetadata += fmt.Sprintf("%#v: %#v,", k, this.Metadata[k])
	}
	mapStringForMetadata += "}"
	if this.Metadata != nil {
		s = append(s, "Metadata: "+mapStringForMetadata+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FeaturesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dlframework.FeaturesResponse{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	if this.Responses != nil {
		s = append(s, "Responses: "+fmt.Sprintf("%#v", this.Responses)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResetRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dlframework.ResetRequest{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	if this.Predictor != nil {
		s = append(s, "Predictor: "+fmt.Sprintf("%#v", this.Predictor)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResetResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dlframework.ResetResponse{")
	if this.Predictor != nil {
		s = append(s, "Predictor: "+fmt.Sprintf("%#v", this.Predictor)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPredictor(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Predict service

type PredictClient interface {
	// Opens a predictor and returns an id where the predictor
	// is accessible. The id can be used to perform inference
	// requests.
	Open(ctx context.Context, in *PredictorOpenRequest, opts ...grpc.CallOption) (*Predictor, error)
	// Close a predictor clear it's memory.
	Close(ctx context.Context, in *Predictor, opts ...grpc.CallOption) (*PredictorCloseResponse, error)
	// Image method receives a stream of urls and runs
	// the predictor on all the urls. The
	//
	// The result is a prediction feature stream for each url.
	URLs(ctx context.Context, in *URLsRequest, opts ...grpc.CallOption) (*FeaturesResponse, error)
	// Image method receives a stream of urls and runs
	// the predictor on all the urls. The
	//
	// The result is a prediction feature stream for each url.
	URLsStream(ctx context.Context, in *URLsRequest, opts ...grpc.CallOption) (Predict_URLsStreamClient, error)
	// Image method receives a list base64 encoded images and runs
	// the predictor on all the images.
	//
	// The result is a prediction feature list for each image.
	Images(ctx context.Context, in *ImagesRequest, opts ...grpc.CallOption) (*FeaturesResponse, error)
	// Image method receives a list base64 encoded images and runs
	// the predictor on all the images.
	//
	// The result is a prediction feature stream for each image.
	ImagesStream(ctx context.Context, in *ImagesRequest, opts ...grpc.CallOption) (Predict_ImagesStreamClient, error)
	// Dataset method receives a single dataset and runs
	// the predictor on all elements of the dataset.
	//
	// The result is a prediction feature list.
	Dataset(ctx context.Context, in *DatasetRequest, opts ...grpc.CallOption) (*FeaturesResponse, error)
	// Dataset method receives a single dataset and runs
	// the predictor on all elements of the dataset.
	//
	// The result is a prediction feature stream.
	DatasetStream(ctx context.Context, in *DatasetRequest, opts ...grpc.CallOption) (Predict_DatasetStreamClient, error)
	// Clear method clears the internal cache of the predictors
	Reset(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*ResetResponse, error)
}

type predictClient struct {
	cc *grpc.ClientConn
}

func NewPredictClient(cc *grpc.ClientConn) PredictClient {
	return &predictClient{cc}
}

func (c *predictClient) Open(ctx context.Context, in *PredictorOpenRequest, opts ...grpc.CallOption) (*Predictor, error) {
	out := new(Predictor)
	err := grpc.Invoke(ctx, "/carml.org.dlframework.Predict/Open", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *predictClient) Close(ctx context.Context, in *Predictor, opts ...grpc.CallOption) (*PredictorCloseResponse, error) {
	out := new(PredictorCloseResponse)
	err := grpc.Invoke(ctx, "/carml.org.dlframework.Predict/Close", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *predictClient) URLs(ctx context.Context, in *URLsRequest, opts ...grpc.CallOption) (*FeaturesResponse, error) {
	out := new(FeaturesResponse)
	err := grpc.Invoke(ctx, "/carml.org.dlframework.Predict/URLs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *predictClient) URLsStream(ctx context.Context, in *URLsRequest, opts ...grpc.CallOption) (Predict_URLsStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Predict_serviceDesc.Streams[0], c.cc, "/carml.org.dlframework.Predict/URLsStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &predictURLsStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Predict_URLsStreamClient interface {
	Recv() (*FeatureResponse, error)
	grpc.ClientStream
}

type predictURLsStreamClient struct {
	grpc.ClientStream
}

func (x *predictURLsStreamClient) Recv() (*FeatureResponse, error) {
	m := new(FeatureResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *predictClient) Images(ctx context.Context, in *ImagesRequest, opts ...grpc.CallOption) (*FeaturesResponse, error) {
	out := new(FeaturesResponse)
	err := grpc.Invoke(ctx, "/carml.org.dlframework.Predict/Images", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *predictClient) ImagesStream(ctx context.Context, in *ImagesRequest, opts ...grpc.CallOption) (Predict_ImagesStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Predict_serviceDesc.Streams[1], c.cc, "/carml.org.dlframework.Predict/ImagesStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &predictImagesStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Predict_ImagesStreamClient interface {
	Recv() (*FeatureResponse, error)
	grpc.ClientStream
}

type predictImagesStreamClient struct {
	grpc.ClientStream
}

func (x *predictImagesStreamClient) Recv() (*FeatureResponse, error) {
	m := new(FeatureResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *predictClient) Dataset(ctx context.Context, in *DatasetRequest, opts ...grpc.CallOption) (*FeaturesResponse, error) {
	out := new(FeaturesResponse)
	err := grpc.Invoke(ctx, "/carml.org.dlframework.Predict/Dataset", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *predictClient) DatasetStream(ctx context.Context, in *DatasetRequest, opts ...grpc.CallOption) (Predict_DatasetStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Predict_serviceDesc.Streams[2], c.cc, "/carml.org.dlframework.Predict/DatasetStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &predictDatasetStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Predict_DatasetStreamClient interface {
	Recv() (*FeatureResponse, error)
	grpc.ClientStream
}

type predictDatasetStreamClient struct {
	grpc.ClientStream
}

func (x *predictDatasetStreamClient) Recv() (*FeatureResponse, error) {
	m := new(FeatureResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *predictClient) Reset(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*ResetResponse, error) {
	out := new(ResetResponse)
	err := grpc.Invoke(ctx, "/carml.org.dlframework.Predict/Reset", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Predict service

type PredictServer interface {
	// Opens a predictor and returns an id where the predictor
	// is accessible. The id can be used to perform inference
	// requests.
	Open(context.Context, *PredictorOpenRequest) (*Predictor, error)
	// Close a predictor clear it's memory.
	Close(context.Context, *Predictor) (*PredictorCloseResponse, error)
	// Image method receives a stream of urls and runs
	// the predictor on all the urls. The
	//
	// The result is a prediction feature stream for each url.
	URLs(context.Context, *URLsRequest) (*FeaturesResponse, error)
	// Image method receives a stream of urls and runs
	// the predictor on all the urls. The
	//
	// The result is a prediction feature stream for each url.
	URLsStream(*URLsRequest, Predict_URLsStreamServer) error
	// Image method receives a list base64 encoded images and runs
	// the predictor on all the images.
	//
	// The result is a prediction feature list for each image.
	Images(context.Context, *ImagesRequest) (*FeaturesResponse, error)
	// Image method receives a list base64 encoded images and runs
	// the predictor on all the images.
	//
	// The result is a prediction feature stream for each image.
	ImagesStream(*ImagesRequest, Predict_ImagesStreamServer) error
	// Dataset method receives a single dataset and runs
	// the predictor on all elements of the dataset.
	//
	// The result is a prediction feature list.
	Dataset(context.Context, *DatasetRequest) (*FeaturesResponse, error)
	// Dataset method receives a single dataset and runs
	// the predictor on all elements of the dataset.
	//
	// The result is a prediction feature stream.
	DatasetStream(*DatasetRequest, Predict_DatasetStreamServer) error
	// Clear method clears the internal cache of the predictors
	Reset(context.Context, *ResetRequest) (*ResetResponse, error)
}

func RegisterPredictServer(s *grpc.Server, srv PredictServer) {
	s.RegisterService(&_Predict_serviceDesc, srv)
}

func _Predict_Open_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PredictorOpenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PredictServer).Open(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carml.org.dlframework.Predict/Open",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PredictServer).Open(ctx, req.(*PredictorOpenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Predict_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Predictor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PredictServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carml.org.dlframework.Predict/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PredictServer).Close(ctx, req.(*Predictor))
	}
	return interceptor(ctx, in, info, handler)
}

func _Predict_URLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(URLsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PredictServer).URLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carml.org.dlframework.Predict/URLs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PredictServer).URLs(ctx, req.(*URLsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Predict_URLsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(URLsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PredictServer).URLsStream(m, &predictURLsStreamServer{stream})
}

type Predict_URLsStreamServer interface {
	Send(*FeatureResponse) error
	grpc.ServerStream
}

type predictURLsStreamServer struct {
	grpc.ServerStream
}

func (x *predictURLsStreamServer) Send(m *FeatureResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Predict_Images_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PredictServer).Images(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carml.org.dlframework.Predict/Images",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PredictServer).Images(ctx, req.(*ImagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Predict_ImagesStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ImagesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PredictServer).ImagesStream(m, &predictImagesStreamServer{stream})
}

type Predict_ImagesStreamServer interface {
	Send(*FeatureResponse) error
	grpc.ServerStream
}

type predictImagesStreamServer struct {
	grpc.ServerStream
}

func (x *predictImagesStreamServer) Send(m *FeatureResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Predict_Dataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PredictServer).Dataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carml.org.dlframework.Predict/Dataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PredictServer).Dataset(ctx, req.(*DatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Predict_DatasetStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DatasetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PredictServer).DatasetStream(m, &predictDatasetStreamServer{stream})
}

type Predict_DatasetStreamServer interface {
	Send(*FeatureResponse) error
	grpc.ServerStream
}

type predictDatasetStreamServer struct {
	grpc.ServerStream
}

func (x *predictDatasetStreamServer) Send(m *FeatureResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Predict_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PredictServer).Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carml.org.dlframework.Predict/Reset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PredictServer).Reset(ctx, req.(*ResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Predict_serviceDesc = grpc.ServiceDesc{
	ServiceName: "carml.org.dlframework.Predict",
	HandlerType: (*PredictServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Open",
			Handler:    _Predict_Open_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _Predict_Close_Handler,
		},
		{
			MethodName: "URLs",
			Handler:    _Predict_URLs_Handler,
		},
		{
			MethodName: "Images",
			Handler:    _Predict_Images_Handler,
		},
		{
			MethodName: "Dataset",
			Handler:    _Predict_Dataset_Handler,
		},
		{
			MethodName: "Reset",
			Handler:    _Predict_Reset_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "URLsStream",
			Handler:       _Predict_URLsStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ImagesStream",
			Handler:       _Predict_ImagesStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DatasetStream",
			Handler:       _Predict_DatasetStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "predictor.proto",
}

func (m *CPUOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPUOptions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GPUOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GPUOptions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PerProcessGpuMemoryFraction != 0 {
		dAtA[i] = 0x9
		i++
		i = encodeFixed64Predictor(dAtA, i, uint64(math.Float64bits(float64(m.PerProcessGpuMemoryFraction))))
	}
	if len(m.AllocatorType) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPredictor(dAtA, i, uint64(len(m.AllocatorType)))
		i += copy(dAtA[i:], m.AllocatorType)
	}
	if len(m.VisibleDeviceList) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPredictor(dAtA, i, uint64(len(m.VisibleDeviceList)))
		i += copy(dAtA[i:], m.VisibleDeviceList)
	}
	if m.ForceGpuCompatible {
		dAtA[i] = 0x40
		i++
		if m.ForceGpuCompatible {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ExecutionOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecutionOptions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TraceLevel != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPredictor(dAtA, i, uint64(m.TraceLevel))
	}
	if m.TimeoutInMs != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPredictor(dAtA, i, uint64(m.TimeoutInMs))
	}
	if len(m.DeviceCount) > 0 {
		for k := range m.DeviceCount {
			dAtA[i] = 0x1a
			i++
			v := m.DeviceCount[k]
			mapSize := 1 + len(k) + sovPredictor(uint64(len(k))) + 1 + sovPredictor(uint64(v))
			i = encodeVarintPredictor(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintPredictor(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x10
			i++
			i = encodeVarintPredictor(dAtA, i, uint64(v))
		}
	}
	if m.CpuOptions != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPredictor(dAtA, i, uint64(m.CpuOptions.Size()))
		n1, err := m.CpuOptions.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.GpuOptions != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPredictor(dAtA, i, uint64(m.GpuOptions.Size()))
		n2, err := m.GpuOptions.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *PredictionOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PredictionOptions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RequestID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPredictor(dAtA, i, uint64(len(m.RequestID)))
		i += copy(dAtA[i:], m.RequestID)
	}
	if m.FeatureLimit != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPredictor(dAtA, i, uint64(m.FeatureLimit))
	}
	if m.BatchSize != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPredictor(dAtA, i, uint64(m.BatchSize))
	}
	if m.ExecutionOptions != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPredictor(dAtA, i, uint64(m.ExecutionOptions.Size()))
		n3, err := m.ExecutionOptions.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *PredictorOpenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PredictorOpenRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ModelName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPredictor(dAtA, i, uint64(len(m.ModelName)))
		i += copy(dAtA[i:], m.ModelName)
	}
	if len(m.ModelVersion) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPredictor(dAtA, i, uint64(len(m.ModelVersion)))
		i += copy(dAtA[i:], m.ModelVersion)
	}
	if len(m.FrameworkName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPredictor(dAtA, i, uint64(len(m.FrameworkName)))
		i += copy(dAtA[i:], m.FrameworkName)
	}
	if len(m.FrameworkVersion) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPredictor(dAtA, i, uint64(len(m.FrameworkVersion)))
		i += copy(dAtA[i:], m.FrameworkVersion)
	}
	if m.Options != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPredictor(dAtA, i, uint64(m.Options.Size()))
		n4, err := m.Options.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *PredictorCloseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PredictorCloseResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Predictor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Predictor) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPredictor(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	return i, nil
}

func (m *URLsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *URLsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Predictor != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPredictor(dAtA, i, uint64(m.Predictor.Size()))
		n5, err := m.Predictor.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.Urls) > 0 {
		for _, msg := range m.Urls {
			dAtA[i] = 0x12
			i++
			i = encodeVarintPredictor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Options != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPredictor(dAtA, i, uint64(m.Options.Size()))
		n6, err := m.Options.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *URLsRequest_URL) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *URLsRequest_URL) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPredictor(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPredictor(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *ImagesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImagesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Predictor != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPredictor(dAtA, i, uint64(m.Predictor.Size()))
		n7, err := m.Predictor.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if len(m.Images) > 0 {
		for _, msg := range m.Images {
			dAtA[i] = 0x12
			i++
			i = encodeVarintPredictor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Options != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPredictor(dAtA, i, uint64(m.Options.Size()))
		n8, err := m.Options.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *ImagesRequest_Image) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImagesRequest_Image) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPredictor(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPredictor(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *DatasetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DatasetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Predictor != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPredictor(dAtA, i, uint64(m.Predictor.Size()))
		n9, err := m.Predictor.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.Dataset != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPredictor(dAtA, i, uint64(m.Dataset.Size()))
		n10, err := m.Dataset.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.Options != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPredictor(dAtA, i, uint64(m.Options.Size()))
		n11, err := m.Options.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}

func (m *DatasetRequest_Dataset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DatasetRequest_Dataset) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Category) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPredictor(dAtA, i, uint64(len(m.Category)))
		i += copy(dAtA[i:], m.Category)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPredictor(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *Feature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Feature) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPredictor(dAtA, i, uint64(m.Index))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPredictor(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Probability != 0 {
		dAtA[i] = 0x1d
		i++
		i = encodeFixed32Predictor(dAtA, i, uint32(math.Float32bits(float32(m.Probability))))
	}
	if len(m.Metadata) > 0 {
		for k := range m.Metadata {
			dAtA[i] = 0x22
			i++
			v := m.Metadata[k]
			mapSize := 1 + len(k) + sovPredictor(uint64(len(k))) + 1 + len(v) + sovPredictor(uint64(len(v)))
			i = encodeVarintPredictor(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintPredictor(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintPredictor(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func (m *FeatureResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeatureResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPredictor(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.RequestID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPredictor(dAtA, i, uint64(len(m.RequestID)))
		i += copy(dAtA[i:], m.RequestID)
	}
	if len(m.InputID) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPredictor(dAtA, i, uint64(len(m.InputID)))
		i += copy(dAtA[i:], m.InputID)
	}
	if len(m.Features) > 0 {
		for _, msg := range m.Features {
			dAtA[i] = 0x22
			i++
			i = encodeVarintPredictor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Metadata) > 0 {
		for k := range m.Metadata {
			dAtA[i] = 0x2a
			i++
			v := m.Metadata[k]
			mapSize := 1 + len(k) + sovPredictor(uint64(len(k))) + 1 + len(v) + sovPredictor(uint64(len(v)))
			i = encodeVarintPredictor(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintPredictor(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintPredictor(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func (m *FeaturesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeaturesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPredictor(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.Responses) > 0 {
		for _, msg := range m.Responses {
			dAtA[i] = 0x12
			i++
			i = encodeVarintPredictor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ResetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Predictor != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPredictor(dAtA, i, uint64(m.Predictor.Size()))
		n12, err := m.Predictor.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if len(m.ID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPredictor(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	return i, nil
}

func (m *ResetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Predictor != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPredictor(dAtA, i, uint64(m.Predictor.Size()))
		n13, err := m.Predictor.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}

func encodeFixed64Predictor(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Predictor(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintPredictor(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedCPUOptions(r randyPredictor, easy bool) *CPUOptions {
	this := &CPUOptions{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGPUOptions(r randyPredictor, easy bool) *GPUOptions {
	this := &GPUOptions{}
	this.PerProcessGpuMemoryFraction = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.PerProcessGpuMemoryFraction *= -1
	}
	this.AllocatorType = string(randStringPredictor(r))
	this.VisibleDeviceList = string(randStringPredictor(r))
	this.ForceGpuCompatible = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedExecutionOptions(r randyPredictor, easy bool) *ExecutionOptions {
	this := &ExecutionOptions{}
	this.TraceLevel = ExecutionOptions_TraceLevel([]int32{0, 1, 2, 3, 4}[r.Intn(5)])
	this.TimeoutInMs = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.TimeoutInMs *= -1
	}
	if r.Intn(10) != 0 {
		v1 := r.Intn(10)
		this.DeviceCount = make(map[string]int32)
		for i := 0; i < v1; i++ {
			v2 := randStringPredictor(r)
			this.DeviceCount[v2] = int32(r.Int31())
			if r.Intn(2) == 0 {
				this.DeviceCount[v2] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		this.CpuOptions = NewPopulatedCPUOptions(r, easy)
	}
	if r.Intn(10) != 0 {
		this.GpuOptions = NewPopulatedGPUOptions(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPredictionOptions(r randyPredictor, easy bool) *PredictionOptions {
	this := &PredictionOptions{}
	this.RequestID = string(randStringPredictor(r))
	this.FeatureLimit = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.FeatureLimit *= -1
	}
	this.BatchSize = uint32(r.Uint32())
	if r.Intn(10) != 0 {
		this.ExecutionOptions = NewPopulatedExecutionOptions(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPredictorOpenRequest(r randyPredictor, easy bool) *PredictorOpenRequest {
	this := &PredictorOpenRequest{}
	this.ModelName = string(randStringPredictor(r))
	this.ModelVersion = string(randStringPredictor(r))
	this.FrameworkName = string(randStringPredictor(r))
	this.FrameworkVersion = string(randStringPredictor(r))
	if r.Intn(10) != 0 {
		this.Options = NewPopulatedPredictionOptions(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPredictorCloseResponse(r randyPredictor, easy bool) *PredictorCloseResponse {
	this := &PredictorCloseResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPredictor(r randyPredictor, easy bool) *Predictor {
	this := &Predictor{}
	this.ID = string(randStringPredictor(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedURLsRequest(r randyPredictor, easy bool) *URLsRequest {
	this := &URLsRequest{}
	if r.Intn(10) != 0 {
		this.Predictor = NewPopulatedPredictor(r, easy)
	}
	if r.Intn(10) != 0 {
		v3 := r.Intn(5)
		this.Urls = make([]*URLsRequest_URL, v3)
		for i := 0; i < v3; i++ {
			this.Urls[i] = NewPopulatedURLsRequest_URL(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		this.Options = NewPopulatedPredictionOptions(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedURLsRequest_URL(r randyPredictor, easy bool) *URLsRequest_URL {
	this := &URLsRequest_URL{}
	this.ID = string(randStringPredictor(r))
	this.Data = string(randStringPredictor(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedImagesRequest(r randyPredictor, easy bool) *ImagesRequest {
	this := &ImagesRequest{}
	if r.Intn(10) != 0 {
		this.Predictor = NewPopulatedPredictor(r, easy)
	}
	if r.Intn(10) != 0 {
		v4 := r.Intn(5)
		this.Images = make([]*ImagesRequest_Image, v4)
		for i := 0; i < v4; i++ {
			this.Images[i] = NewPopulatedImagesRequest_Image(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		this.Options = NewPopulatedPredictionOptions(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedImagesRequest_Image(r randyPredictor, easy bool) *ImagesRequest_Image {
	this := &ImagesRequest_Image{}
	this.ID = string(randStringPredictor(r))
	v5 := r.Intn(100)
	this.Data = make([]byte, v5)
	for i := 0; i < v5; i++ {
		this.Data[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDatasetRequest(r randyPredictor, easy bool) *DatasetRequest {
	this := &DatasetRequest{}
	if r.Intn(10) != 0 {
		this.Predictor = NewPopulatedPredictor(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Dataset = NewPopulatedDatasetRequest_Dataset(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Options = NewPopulatedPredictionOptions(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDatasetRequest_Dataset(r randyPredictor, easy bool) *DatasetRequest_Dataset {
	this := &DatasetRequest_Dataset{}
	this.Category = string(randStringPredictor(r))
	this.Name = string(randStringPredictor(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedFeature(r randyPredictor, easy bool) *Feature {
	this := &Feature{}
	this.Index = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Index *= -1
	}
	this.Name = string(randStringPredictor(r))
	this.Probability = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.Probability *= -1
	}
	if r.Intn(10) != 0 {
		v6 := r.Intn(10)
		this.Metadata = make(map[string]string)
		for i := 0; i < v6; i++ {
			this.Metadata[randStringPredictor(r)] = randStringPredictor(r)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedFeatureResponse(r randyPredictor, easy bool) *FeatureResponse {
	this := &FeatureResponse{}
	this.ID = string(randStringPredictor(r))
	this.RequestID = string(randStringPredictor(r))
	this.InputID = string(randStringPredictor(r))
	if r.Intn(10) != 0 {
		v7 := r.Intn(5)
		this.Features = make([]*Feature, v7)
		for i := 0; i < v7; i++ {
			this.Features[i] = NewPopulatedFeature(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v8 := r.Intn(10)
		this.Metadata = make(map[string]string)
		for i := 0; i < v8; i++ {
			this.Metadata[randStringPredictor(r)] = randStringPredictor(r)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedFeaturesResponse(r randyPredictor, easy bool) *FeaturesResponse {
	this := &FeaturesResponse{}
	this.ID = string(randStringPredictor(r))
	if r.Intn(10) != 0 {
		v9 := r.Intn(5)
		this.Responses = make([]*FeatureResponse, v9)
		for i := 0; i < v9; i++ {
			this.Responses[i] = NewPopulatedFeatureResponse(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedResetRequest(r randyPredictor, easy bool) *ResetRequest {
	this := &ResetRequest{}
	if r.Intn(10) != 0 {
		this.Predictor = NewPopulatedPredictor(r, easy)
	}
	this.ID = string(randStringPredictor(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedResetResponse(r randyPredictor, easy bool) *ResetResponse {
	this := &ResetResponse{}
	if r.Intn(10) != 0 {
		this.Predictor = NewPopulatedPredictor(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyPredictor interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RunePredictor(r randyPredictor) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringPredictor(r randyPredictor) string {
	v10 := r.Intn(100)
	tmps := make([]rune, v10)
	for i := 0; i < v10; i++ {
		tmps[i] = randUTF8RunePredictor(r)
	}
	return string(tmps)
}
func randUnrecognizedPredictor(r randyPredictor, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldPredictor(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldPredictor(dAtA []byte, r randyPredictor, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulatePredictor(dAtA, uint64(key))
		v11 := r.Int63()
		if r.Intn(2) == 0 {
			v11 *= -1
		}
		dAtA = encodeVarintPopulatePredictor(dAtA, uint64(v11))
	case 1:
		dAtA = encodeVarintPopulatePredictor(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulatePredictor(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulatePredictor(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulatePredictor(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulatePredictor(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *CPUOptions) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GPUOptions) Size() (n int) {
	var l int
	_ = l
	if m.PerProcessGpuMemoryFraction != 0 {
		n += 9
	}
	l = len(m.AllocatorType)
	if l > 0 {
		n += 1 + l + sovPredictor(uint64(l))
	}
	l = len(m.VisibleDeviceList)
	if l > 0 {
		n += 1 + l + sovPredictor(uint64(l))
	}
	if m.ForceGpuCompatible {
		n += 2
	}
	return n
}

func (m *ExecutionOptions) Size() (n int) {
	var l int
	_ = l
	if m.TraceLevel != 0 {
		n += 1 + sovPredictor(uint64(m.TraceLevel))
	}
	if m.TimeoutInMs != 0 {
		n += 1 + sovPredictor(uint64(m.TimeoutInMs))
	}
	if len(m.DeviceCount) > 0 {
		for k, v := range m.DeviceCount {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPredictor(uint64(len(k))) + 1 + sovPredictor(uint64(v))
			n += mapEntrySize + 1 + sovPredictor(uint64(mapEntrySize))
		}
	}
	if m.CpuOptions != nil {
		l = m.CpuOptions.Size()
		n += 1 + l + sovPredictor(uint64(l))
	}
	if m.GpuOptions != nil {
		l = m.GpuOptions.Size()
		n += 1 + l + sovPredictor(uint64(l))
	}
	return n
}

func (m *PredictionOptions) Size() (n int) {
	var l int
	_ = l
	l = len(m.RequestID)
	if l > 0 {
		n += 1 + l + sovPredictor(uint64(l))
	}
	if m.FeatureLimit != 0 {
		n += 1 + sovPredictor(uint64(m.FeatureLimit))
	}
	if m.BatchSize != 0 {
		n += 1 + sovPredictor(uint64(m.BatchSize))
	}
	if m.ExecutionOptions != nil {
		l = m.ExecutionOptions.Size()
		n += 1 + l + sovPredictor(uint64(l))
	}
	return n
}

func (m *PredictorOpenRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ModelName)
	if l > 0 {
		n += 1 + l + sovPredictor(uint64(l))
	}
	l = len(m.ModelVersion)
	if l > 0 {
		n += 1 + l + sovPredictor(uint64(l))
	}
	l = len(m.FrameworkName)
	if l > 0 {
		n += 1 + l + sovPredictor(uint64(l))
	}
	l = len(m.FrameworkVersion)
	if l > 0 {
		n += 1 + l + sovPredictor(uint64(l))
	}
	if m.Options != nil {
		l = m.Options.Size()
		n += 1 + l + sovPredictor(uint64(l))
	}
	return n
}

func (m *PredictorCloseResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *Predictor) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovPredictor(uint64(l))
	}
	return n
}

func (m *URLsRequest) Size() (n int) {
	var l int
	_ = l
	if m.Predictor != nil {
		l = m.Predictor.Size()
		n += 1 + l + sovPredictor(uint64(l))
	}
	if len(m.Urls) > 0 {
		for _, e := range m.Urls {
			l = e.Size()
			n += 1 + l + sovPredictor(uint64(l))
		}
	}
	if m.Options != nil {
		l = m.Options.Size()
		n += 1 + l + sovPredictor(uint64(l))
	}
	return n
}

func (m *URLsRequest_URL) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovPredictor(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovPredictor(uint64(l))
	}
	return n
}

func (m *ImagesRequest) Size() (n int) {
	var l int
	_ = l
	if m.Predictor != nil {
		l = m.Predictor.Size()
		n += 1 + l + sovPredictor(uint64(l))
	}
	if len(m.Images) > 0 {
		for _, e := range m.Images {
			l = e.Size()
			n += 1 + l + sovPredictor(uint64(l))
		}
	}
	if m.Options != nil {
		l = m.Options.Size()
		n += 1 + l + sovPredictor(uint64(l))
	}
	return n
}

func (m *ImagesRequest_Image) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovPredictor(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovPredictor(uint64(l))
	}
	return n
}

func (m *DatasetRequest) Size() (n int) {
	var l int
	_ = l
	if m.Predictor != nil {
		l = m.Predictor.Size()
		n += 1 + l + sovPredictor(uint64(l))
	}
	if m.Dataset != nil {
		l = m.Dataset.Size()
		n += 1 + l + sovPredictor(uint64(l))
	}
	if m.Options != nil {
		l = m.Options.Size()
		n += 1 + l + sovPredictor(uint64(l))
	}
	return n
}

func (m *DatasetRequest_Dataset) Size() (n int) {
	var l int
	_ = l
	l = len(m.Category)
	if l > 0 {
		n += 1 + l + sovPredictor(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPredictor(uint64(l))
	}
	return n
}

func (m *Feature) Size() (n int) {
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovPredictor(uint64(m.Index))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPredictor(uint64(l))
	}
	if m.Probability != 0 {
		n += 5
	}
	if len(m.Metadata) > 0 {
		for k, v := range m.Metadata {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPredictor(uint64(len(k))) + 1 + len(v) + sovPredictor(uint64(len(v)))
			n += mapEntrySize + 1 + sovPredictor(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *FeatureResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovPredictor(uint64(l))
	}
	l = len(m.RequestID)
	if l > 0 {
		n += 1 + l + sovPredictor(uint64(l))
	}
	l = len(m.InputID)
	if l > 0 {
		n += 1 + l + sovPredictor(uint64(l))
	}
	if len(m.Features) > 0 {
		for _, e := range m.Features {
			l = e.Size()
			n += 1 + l + sovPredictor(uint64(l))
		}
	}
	if len(m.Metadata) > 0 {
		for k, v := range m.Metadata {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPredictor(uint64(len(k))) + 1 + len(v) + sovPredictor(uint64(len(v)))
			n += mapEntrySize + 1 + sovPredictor(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *FeaturesResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovPredictor(uint64(l))
	}
	if len(m.Responses) > 0 {
		for _, e := range m.Responses {
			l = e.Size()
			n += 1 + l + sovPredictor(uint64(l))
		}
	}
	return n
}

func (m *ResetRequest) Size() (n int) {
	var l int
	_ = l
	if m.Predictor != nil {
		l = m.Predictor.Size()
		n += 1 + l + sovPredictor(uint64(l))
	}
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovPredictor(uint64(l))
	}
	return n
}

func (m *ResetResponse) Size() (n int) {
	var l int
	_ = l
	if m.Predictor != nil {
		l = m.Predictor.Size()
		n += 1 + l + sovPredictor(uint64(l))
	}
	return n
}

func sovPredictor(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPredictor(x uint64) (n int) {
	return sovPredictor(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CPUOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CPUOptions{`,
		`}`,
	}, "")
	return s
}
func (this *GPUOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GPUOptions{`,
		`PerProcessGpuMemoryFraction:` + fmt.Sprintf("%v", this.PerProcessGpuMemoryFraction) + `,`,
		`AllocatorType:` + fmt.Sprintf("%v", this.AllocatorType) + `,`,
		`VisibleDeviceList:` + fmt.Sprintf("%v", this.VisibleDeviceList) + `,`,
		`ForceGpuCompatible:` + fmt.Sprintf("%v", this.ForceGpuCompatible) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExecutionOptions) String() string {
	if this == nil {
		return "nil"
	}
	keysForDeviceCount := make([]string, 0, len(this.DeviceCount))
	for k := range this.DeviceCount {
		keysForDeviceCount = append(keysForDeviceCount, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForDeviceCount)
	mapStringForDeviceCount := "map[string]int32{"
	for _, k := range keysForDeviceCount {
		mapStringForDeviceCount += fmt.Sprintf("%v: %v,", k, this.DeviceCount[k])
	}
	mapStringForDeviceCount += "}"
	s := strings.Join([]string{`&ExecutionOptions{`,
		`TraceLevel:` + fmt.Sprintf("%v", this.TraceLevel) + `,`,
		`TimeoutInMs:` + fmt.Sprintf("%v", this.TimeoutInMs) + `,`,
		`DeviceCount:` + mapStringForDeviceCount + `,`,
		`CpuOptions:` + strings.Replace(fmt.Sprintf("%v", this.CpuOptions), "CPUOptions", "CPUOptions", 1) + `,`,
		`GpuOptions:` + strings.Replace(fmt.Sprintf("%v", this.GpuOptions), "GPUOptions", "GPUOptions", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PredictionOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PredictionOptions{`,
		`RequestID:` + fmt.Sprintf("%v", this.RequestID) + `,`,
		`FeatureLimit:` + fmt.Sprintf("%v", this.FeatureLimit) + `,`,
		`BatchSize:` + fmt.Sprintf("%v", this.BatchSize) + `,`,
		`ExecutionOptions:` + strings.Replace(fmt.Sprintf("%v", this.ExecutionOptions), "ExecutionOptions", "ExecutionOptions", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PredictorOpenRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PredictorOpenRequest{`,
		`ModelName:` + fmt.Sprintf("%v", this.ModelName) + `,`,
		`ModelVersion:` + fmt.Sprintf("%v", this.ModelVersion) + `,`,
		`FrameworkName:` + fmt.Sprintf("%v", this.FrameworkName) + `,`,
		`FrameworkVersion:` + fmt.Sprintf("%v", this.FrameworkVersion) + `,`,
		`Options:` + strings.Replace(fmt.Sprintf("%v", this.Options), "PredictionOptions", "PredictionOptions", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PredictorCloseResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PredictorCloseResponse{`,
		`}`,
	}, "")
	return s
}
func (this *Predictor) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Predictor{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *URLsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&URLsRequest{`,
		`Predictor:` + strings.Replace(fmt.Sprintf("%v", this.Predictor), "Predictor", "Predictor", 1) + `,`,
		`Urls:` + strings.Replace(fmt.Sprintf("%v", this.Urls), "URLsRequest_URL", "URLsRequest_URL", 1) + `,`,
		`Options:` + strings.Replace(fmt.Sprintf("%v", this.Options), "PredictionOptions", "PredictionOptions", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *URLsRequest_URL) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&URLsRequest_URL{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImagesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImagesRequest{`,
		`Predictor:` + strings.Replace(fmt.Sprintf("%v", this.Predictor), "Predictor", "Predictor", 1) + `,`,
		`Images:` + strings.Replace(fmt.Sprintf("%v", this.Images), "ImagesRequest_Image", "ImagesRequest_Image", 1) + `,`,
		`Options:` + strings.Replace(fmt.Sprintf("%v", this.Options), "PredictionOptions", "PredictionOptions", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImagesRequest_Image) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImagesRequest_Image{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DatasetRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DatasetRequest{`,
		`Predictor:` + strings.Replace(fmt.Sprintf("%v", this.Predictor), "Predictor", "Predictor", 1) + `,`,
		`Dataset:` + strings.Replace(fmt.Sprintf("%v", this.Dataset), "DatasetRequest_Dataset", "DatasetRequest_Dataset", 1) + `,`,
		`Options:` + strings.Replace(fmt.Sprintf("%v", this.Options), "PredictionOptions", "PredictionOptions", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DatasetRequest_Dataset) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DatasetRequest_Dataset{`,
		`Category:` + fmt.Sprintf("%v", this.Category) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Feature) String() string {
	if this == nil {
		return "nil"
	}
	keysForMetadata := make([]string, 0, len(this.Metadata))
	for k := range this.Metadata {
		keysForMetadata = append(keysForMetadata, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMetadata)
	mapStringForMetadata := "map[string]string{"
	for _, k := range keysForMetadata {
		mapStringForMetadata += fmt.Sprintf("%v: %v,", k, this.Metadata[k])
	}
	mapStringForMetadata += "}"
	s := strings.Join([]string{`&Feature{`,
		`Index:` + fmt.Sprintf("%v", this.Index) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Probability:` + fmt.Sprintf("%v", this.Probability) + `,`,
		`Metadata:` + mapStringForMetadata + `,`,
		`}`,
	}, "")
	return s
}
func (this *FeatureResponse) String() string {
	if this == nil {
		return "nil"
	}
	keysForMetadata := make([]string, 0, len(this.Metadata))
	for k := range this.Metadata {
		keysForMetadata = append(keysForMetadata, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMetadata)
	mapStringForMetadata := "map[string]string{"
	for _, k := range keysForMetadata {
		mapStringForMetadata += fmt.Sprintf("%v: %v,", k, this.Metadata[k])
	}
	mapStringForMetadata += "}"
	s := strings.Join([]string{`&FeatureResponse{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`RequestID:` + fmt.Sprintf("%v", this.RequestID) + `,`,
		`InputID:` + fmt.Sprintf("%v", this.InputID) + `,`,
		`Features:` + strings.Replace(fmt.Sprintf("%v", this.Features), "Feature", "Feature", 1) + `,`,
		`Metadata:` + mapStringForMetadata + `,`,
		`}`,
	}, "")
	return s
}
func (this *FeaturesResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FeaturesResponse{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Responses:` + strings.Replace(fmt.Sprintf("%v", this.Responses), "FeatureResponse", "FeatureResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResetRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResetRequest{`,
		`Predictor:` + strings.Replace(fmt.Sprintf("%v", this.Predictor), "Predictor", "Predictor", 1) + `,`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResetResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResetResponse{`,
		`Predictor:` + strings.Replace(fmt.Sprintf("%v", this.Predictor), "Predictor", "Predictor", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPredictor(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CPUOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPredictor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPUOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPUOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPredictor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPredictor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GPUOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPredictor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GPUOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GPUOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerProcessGpuMemoryFraction", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.PerProcessGpuMemoryFraction = float64(math.Float64frombits(v))
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocatorType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPredictor
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllocatorType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisibleDeviceList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPredictor
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VisibleDeviceList = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceGpuCompatible", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ForceGpuCompatible = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPredictor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPredictor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecutionOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPredictor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecutionOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecutionOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceLevel", wireType)
			}
			m.TraceLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TraceLevel |= (ExecutionOptions_TraceLevel(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutInMs", wireType)
			}
			m.TimeoutInMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutInMs |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPredictor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeviceCount == nil {
				m.DeviceCount = make(map[string]int32)
			}
			var mapkey string
			var mapvalue int32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPredictor
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPredictor
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPredictor
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPredictor
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPredictor(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthPredictor
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.DeviceCount[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPredictor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CpuOptions == nil {
				m.CpuOptions = &CPUOptions{}
			}
			if err := m.CpuOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GpuOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPredictor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GpuOptions == nil {
				m.GpuOptions = &GPUOptions{}
			}
			if err := m.GpuOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPredictor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPredictor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PredictionOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPredictor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PredictionOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PredictionOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPredictor
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeatureLimit", wireType)
			}
			m.FeatureLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeatureLimit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchSize", wireType)
			}
			m.BatchSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPredictor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExecutionOptions == nil {
				m.ExecutionOptions = &ExecutionOptions{}
			}
			if err := m.ExecutionOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPredictor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPredictor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PredictorOpenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPredictor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PredictorOpenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PredictorOpenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPredictor
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPredictor
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrameworkName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPredictor
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FrameworkName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrameworkVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPredictor
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FrameworkVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPredictor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Options == nil {
				m.Options = &PredictionOptions{}
			}
			if err := m.Options.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPredictor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPredictor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PredictorCloseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPredictor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PredictorCloseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PredictorCloseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPredictor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPredictor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Predictor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPredictor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Predictor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Predictor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPredictor
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPredictor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPredictor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *URLsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPredictor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: URLsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: URLsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Predictor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPredictor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Predictor == nil {
				m.Predictor = &Predictor{}
			}
			if err := m.Predictor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Urls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPredictor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Urls = append(m.Urls, &URLsRequest_URL{})
			if err := m.Urls[len(m.Urls)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPredictor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Options == nil {
				m.Options = &PredictionOptions{}
			}
			if err := m.Options.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPredictor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPredictor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *URLsRequest_URL) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPredictor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: URL: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: URL: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPredictor
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPredictor
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPredictor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPredictor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImagesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPredictor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImagesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImagesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Predictor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPredictor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Predictor == nil {
				m.Predictor = &Predictor{}
			}
			if err := m.Predictor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Images", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPredictor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Images = append(m.Images, &ImagesRequest_Image{})
			if err := m.Images[len(m.Images)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPredictor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Options == nil {
				m.Options = &PredictionOptions{}
			}
			if err := m.Options.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPredictor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPredictor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImagesRequest_Image) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPredictor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Image: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Image: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPredictor
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPredictor
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPredictor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPredictor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DatasetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPredictor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DatasetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DatasetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Predictor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPredictor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Predictor == nil {
				m.Predictor = &Predictor{}
			}
			if err := m.Predictor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dataset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPredictor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dataset == nil {
				m.Dataset = &DatasetRequest_Dataset{}
			}
			if err := m.Dataset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPredictor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Options == nil {
				m.Options = &PredictionOptions{}
			}
			if err := m.Options.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPredictor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPredictor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DatasetRequest_Dataset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPredictor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Dataset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Dataset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPredictor
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Category = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPredictor
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPredictor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPredictor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Feature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPredictor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Feature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Feature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPredictor
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Probability", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Probability = float32(math.Float32frombits(v))
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPredictor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPredictor
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPredictor
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPredictor
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPredictor
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthPredictor
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPredictor(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthPredictor
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Metadata[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPredictor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPredictor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeatureResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPredictor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeatureResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeatureResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPredictor
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPredictor
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPredictor
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InputID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Features", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPredictor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Features = append(m.Features, &Feature{})
			if err := m.Features[len(m.Features)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPredictor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPredictor
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPredictor
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPredictor
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPredictor
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthPredictor
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPredictor(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthPredictor
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Metadata[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPredictor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPredictor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeaturesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPredictor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeaturesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeaturesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPredictor
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Responses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPredictor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Responses = append(m.Responses, &FeatureResponse{})
			if err := m.Responses[len(m.Responses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPredictor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPredictor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPredictor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Predictor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPredictor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Predictor == nil {
				m.Predictor = &Predictor{}
			}
			if err := m.Predictor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPredictor
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPredictor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPredictor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPredictor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Predictor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPredictor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Predictor == nil {
				m.Predictor = &Predictor{}
			}
			if err := m.Predictor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPredictor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPredictor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPredictor(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPredictor
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPredictor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPredictor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPredictor
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPredictor
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPredictor(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPredictor = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPredictor   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("predictor.proto", fileDescriptorPredictor) }
func init() { golang_proto.RegisterFile("predictor.proto", fileDescriptorPredictor) }

var fileDescriptorPredictor = []byte{
	// 1752 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x58, 0xcd, 0x6f, 0x23, 0x67,
	0x19, 0xdf, 0xf1, 0xd8, 0x9b, 0xe4, 0x71, 0x9c, 0xcd, 0xbe, 0x9b, 0xdd, 0x3a, 0xce, 0x76, 0xc6,
	0x3b, 0xdd, 0xb6, 0xa6, 0x34, 0x4e, 0x14, 0x7a, 0x28, 0x8b, 0x58, 0x29, 0x93, 0x2f, 0x02, 0xde,
	0x4d, 0xe4, 0xdd, 0x50, 0x0a, 0x12, 0xc3, 0x78, 0xfc, 0xc6, 0x1d, 0xd5, 0xe3, 0x19, 0xe6, 0x23,
	0xd4, 0x0b, 0x42, 0x80, 0xe0, 0xc4, 0x05, 0x89, 0x3f, 0x00, 0xb8, 0xf5, 0xc6, 0x01, 0x0e, 0x5c,
	0x90, 0x2a, 0x0e, 0x88, 0x63, 0x25, 0x2e, 0x88, 0xc3, 0xa8, 0xeb, 0x72, 0xe2, 0x54, 0xf9, 0xc4,
	0x11, 0xbd, 0x1f, 0x33, 0x7e, 0xc7, 0x1b, 0xc7, 0x86, 0x6d, 0xd3, 0x9b, 0xe7, 0x79, 0x9e, 0xf7,
	0xf7, 0x7b, 0x3e, 0xdf, 0xf7, 0x49, 0xe0, 0x9a, 0xe7, 0xe3, 0xb6, 0x6d, 0x85, 0xae, 0x5f, 0xf7,
	0x7c, 0x37, 0x74, 0xd1, 0x4d, 0xcb, 0xf4, 0x9d, 0x6e, 0xdd, 0xf5, 0x3b, 0xf5, 0x76, 0xf7, 0xd4,
	0x37, 0x1d, 0xfc, 0x03, 0xd7, 0x7f, 0xb7, 0x72, 0xbb, 0xe3, 0xba, 0x9d, 0x2e, 0xde, 0x30, 0x3d,
	0x7b, 0xc3, 0xec, 0xf5, 0xdc, 0xd0, 0x0c, 0x6d, 0xb7, 0x17, 0xb0, 0x43, 0x95, 0xf5, 0x8e, 0x1d,
	0xbe, 0x13, 0xb5, 0xea, 0x96, 0xeb, 0x6c, 0x74, 0xdc, 0x8e, 0xbb, 0x41, 0xc5, 0xad, 0xe8, 0x94,
	0x7e, 0xd1, 0x0f, 0xfa, 0x8b, 0x99, 0x6b, 0x8b, 0x00, 0x3b, 0xc7, 0x27, 0x47, 0x1e, 0x85, 0xd0,
	0x7e, 0x29, 0x03, 0x1c, 0xa4, 0x9f, 0xe8, 0x09, 0xa8, 0x1e, 0xf6, 0x0d, 0xcf, 0x77, 0x2d, 0x1c,
	0x04, 0x46, 0xc7, 0x8b, 0x0c, 0x07, 0x3b, 0xae, 0xdf, 0x37, 0x4e, 0x7d, 0xd3, 0x22, 0x36, 0x65,
	0xa9, 0x2a, 0xd5, 0x24, 0xfd, 0x8d, 0x61, 0xac, 0x6e, 0xf6, 0x4d, 0xa7, 0x7b, 0x4f, 0x9b, 0x72,
	0xe0, 0x75, 0xd7, 0xb1, 0x43, 0xec, 0x78, 0x61, 0x5f, 0x6b, 0xae, 0x79, 0xd8, 0x3f, 0x66, 0xa6,
	0x07, 0x5e, 0xf4, 0x80, 0x1a, 0xee, 0x73, 0x3b, 0xf4, 0x75, 0x58, 0x32, 0xbb, 0x5d, 0xd7, 0x32,
	0x43, 0xd7, 0x37, 0xc2, 0xbe, 0x87, 0xcb, 0xb9, 0xaa, 0x54, 0x5b, 0xd0, 0x5f, 0x1a, 0xc6, 0xaa,
	0xca, 0xa8, 0xb2, 0x7a, 0x11, 0xb9, 0x94, 0xaa, 0x1e, 0xf7, 0x3d, 0x8c, 0xbe, 0x05, 0x37, 0xce,
	0xec, 0xc0, 0x6e, 0x75, 0xb1, 0xd1, 0xc6, 0x67, 0xb6, 0x85, 0x8d, 0xae, 0x1d, 0x84, 0xe5, 0x02,
	0x05, 0xac, 0x0d, 0x63, 0xf5, 0x2e, 0x03, 0x3c, 0xc7, 0x48, 0x44, 0xbd, 0xce, 0xf5, 0xbb, 0x54,
	0xdd, 0xb0, 0x83, 0x10, 0x7d, 0x07, 0x56, 0x4e, 0x5d, 0xdf, 0xc2, 0x34, 0x54, 0xcb, 0x75, 0x3c,
	0x33, 0x24, 0x16, 0xe5, 0xf9, 0xaa, 0x54, 0x9b, 0xd7, 0xbf, 0x30, 0x8c, 0xd5, 0x97, 0x19, 0xf4,
	0x79, 0x56, 0x22, 0x36, 0xa2, 0x06, 0x07, 0x5e, 0xb4, 0x93, 0xaa, 0xb5, 0xbf, 0x16, 0x60, 0x79,
	0xef, 0x3d, 0x6c, 0x45, 0x24, 0x21, 0x49, 0x4d, 0x22, 0x28, 0x86, 0xbe, 0x49, 0xbc, 0xc3, 0x67,
	0xb8, 0x4b, 0xf3, 0xbf, 0xb4, 0xb5, 0x55, 0x3f, 0xb7, 0x55, 0xea, 0xe3, 0xa7, 0xeb, 0x8f, 0xc9,
	0xd1, 0x06, 0x39, 0xa9, 0x57, 0x87, 0xb1, 0x7a, 0x9b, 0x39, 0x27, 0x00, 0x8a, 0x3e, 0x41, 0x98,
	0x5a, 0xa3, 0x7d, 0x28, 0x85, 0xb6, 0x83, 0xdd, 0x28, 0x34, 0xec, 0x9e, 0xe1, 0x04, 0xb4, 0x1a,
	0xb2, 0xae, 0x0d, 0x63, 0x55, 0xe1, 0x20, 0xa2, 0x5a, 0x84, 0x29, 0x72, 0xcd, 0x61, 0xef, 0x41,
	0x80, 0x7e, 0x0c, 0x8b, 0x3c, 0xbb, 0x96, 0x1b, 0xf5, 0xc2, 0xb2, 0x5c, 0x95, 0x6b, 0xc5, 0xad,
	0x37, 0x67, 0xf5, 0x9f, 0xa5, 0x7e, 0x87, 0x1c, 0xdd, 0xeb, 0x85, 0x7e, 0x5f, 0xbf, 0x33, 0x8c,
	0xd5, 0x17, 0x99, 0x03, 0x22, 0x6e, 0x86, 0xbf, 0x3d, 0x3a, 0x84, 0xda, 0x50, 0xb4, 0xbc, 0xc8,
	0x70, 0x19, 0x5e, 0x39, 0x5f, 0x95, 0x6a, 0xc5, 0xad, 0x3b, 0x13, 0xe8, 0x47, 0x93, 0x21, 0x66,
	0x4b, 0x38, 0x9f, 0xc9, 0x96, 0xe5, 0x45, 0x49, 0x91, 0xda, 0x50, 0xec, 0x08, 0x2c, 0x85, 0x0b,
	0x59, 0x0e, 0xce, 0x65, 0xe9, 0x4c, 0x60, 0xe9, 0xa4, 0x2c, 0x95, 0xfb, 0xb0, 0x3c, 0x9e, 0x0f,
	0xb4, 0x0c, 0xf2, 0xbb, 0xb8, 0x4f, 0xdb, 0x62, 0xa1, 0x49, 0x7e, 0xa2, 0x15, 0x28, 0x9c, 0x99,
	0xdd, 0x88, 0xcd, 0x4f, 0xa1, 0xc9, 0x3e, 0xee, 0xe5, 0xde, 0x94, 0xb4, 0x0e, 0xc0, 0xa8, 0x1f,
	0xd0, 0x22, 0xcc, 0x3f, 0x3c, 0x32, 0x1e, 0x37, 0xb7, 0x77, 0xf6, 0x96, 0xaf, 0xa0, 0x1b, 0x70,
	0x6d, 0xbf, 0xb9, 0xfd, 0x60, 0xef, 0xad, 0xa3, 0xe6, 0x37, 0xb8, 0x50, 0x42, 0x08, 0x96, 0x76,
	0x8e, 0x4f, 0x8c, 0xa3, 0x87, 0x8d, 0xb7, 0xb9, 0x2c, 0x47, 0x64, 0x5f, 0xdb, 0x6e, 0xee, 0xbe,
	0xb5, 0xdd, 0xdc, 0xe3, 0x32, 0x19, 0x2d, 0x01, 0xec, 0x9f, 0x34, 0x1a, 0xfc, 0x3b, 0xaf, 0xfd,
	0x42, 0x86, 0xeb, 0xc7, 0xec, 0x72, 0x13, 0x3a, 0xd9, 0x02, 0xf0, 0xf1, 0xf7, 0x23, 0x1c, 0x84,
	0x86, 0xdd, 0x66, 0x1e, 0xeb, 0xbb, 0x83, 0x58, 0x5d, 0x68, 0x32, 0xe9, 0xe1, 0xee, 0xbf, 0x63,
	0x75, 0x65, 0x64, 0x32, 0x4a, 0xc3, 0x30, 0x56, 0xd7, 0x58, 0x96, 0xce, 0xd3, 0x6a, 0xcd, 0x05,
	0x2e, 0x3e, 0x6c, 0xa3, 0x03, 0x28, 0x9d, 0x62, 0x33, 0x8c, 0x7c, 0x32, 0xce, 0x8e, 0x1d, 0xb2,
	0x2c, 0x88, 0x7d, 0x9b, 0x51, 0x8b, 0x28, 0x8b, 0x5c, 0xd3, 0x20, 0x0a, 0x74, 0x1f, 0xa0, 0x65,
	0x86, 0xd6, 0x3b, 0x46, 0x60, 0x3f, 0xc1, 0x65, 0xb9, 0x2a, 0xd5, 0x4a, 0xba, 0x3a, 0x72, 0x64,
	0xa4, 0xcb, 0x38, 0x42, 0xc5, 0x8f, 0xec, 0x27, 0x18, 0xfd, 0x08, 0xae, 0xe3, 0xa4, 0x9b, 0xc7,
	0xda, 0xef, 0xd5, 0x19, 0xbb, 0x5f, 0x7f, 0x65, 0x18, 0xab, 0x1a, 0xe3, 0x7b, 0x06, 0x4b, 0xa4,
	0x5d, 0xc6, 0x63, 0x27, 0xef, 0xe5, 0x3f, 0xf9, 0xad, 0x2a, 0x69, 0xef, 0xcb, 0xb0, 0x72, 0x9c,
	0x3c, 0x32, 0x47, 0x1e, 0xee, 0xf1, 0x4c, 0x93, 0xe0, 0x1c, 0xb7, 0x8d, 0xbb, 0x46, 0xcf, 0x74,
	0x30, 0x2f, 0x85, 0x10, 0xdc, 0x48, 0x97, 0x09, 0x8e, 0x8a, 0x1f, 0x9a, 0x0e, 0x26, 0x59, 0x66,
	0x36, 0x67, 0xd8, 0x0f, 0xc8, 0xb3, 0xc0, 0xee, 0x6a, 0x21, 0xcb, 0x19, 0x75, 0x26, 0xcb, 0x54,
	0xf3, 0x4d, 0xa6, 0x20, 0xb7, 0x7e, 0x1a, 0x3f, 0x73, 0x46, 0x1e, 0xbf, 0xf5, 0xb3, 0xfa, 0xcc,
	0xad, 0x9f, 0xaa, 0xa8, 0x53, 0x8f, 0xe0, 0xfa, 0xc8, 0x36, 0x71, 0x2c, 0x4f, 0xe1, 0x84, 0x44,
	0x3e, 0x63, 0x92, 0x49, 0x64, 0xaa, 0x4d, 0x1c, 0xfc, 0x1e, 0xcc, 0x65, 0xa7, 0xba, 0x36, 0xa1,
	0x78, 0xcf, 0xf4, 0xbb, 0x7e, 0x7b, 0x18, 0xab, 0x65, 0x46, 0x7a, 0x4e, 0xcd, 0x12, 0x58, 0x5e,
	0xaa, 0x32, 0xdc, 0x4a, 0x2b, 0xb5, 0xd3, 0x75, 0x03, 0xdc, 0xc4, 0x81, 0xe7, 0xf6, 0x02, 0xac,
	0x1d, 0xc3, 0x42, 0xaa, 0x41, 0x5f, 0x85, 0x5c, 0x3a, 0x3b, 0xeb, 0x83, 0x58, 0xcd, 0xd1, 0xa1,
	0x59, 0x1c, 0x1b, 0x96, 0x1b, 0x8c, 0x35, 0x3b, 0x24, 0x39, 0xbb, 0xcd, 0xb9, 0x7e, 0x27, 0x43,
	0xf1, 0xa4, 0xd9, 0x08, 0x92, 0x6e, 0xf8, 0x2e, 0x2c, 0xa4, 0xab, 0x08, 0xc5, 0x2e, 0x6e, 0x55,
	0x2f, 0x8e, 0xd2, 0xf5, 0x75, 0x65, 0x18, 0xab, 0x15, 0xbe, 0x02, 0x24, 0xc2, 0x4c, 0xb7, 0xa4,
	0x52, 0x74, 0x02, 0xf9, 0xc8, 0xef, 0x92, 0x27, 0x84, 0xdc, 0xfd, 0xaf, 0x4c, 0x80, 0x16, 0x3c,
	0x22, 0xbf, 0xf5, 0xd5, 0x61, 0xac, 0xde, 0x64, 0x04, 0xe4, 0xb4, 0x88, 0x4d, 0xe1, 0xc4, 0xd2,
	0xc8, 0x9f, 0x49, 0x69, 0x2a, 0x01, 0xc8, 0x27, 0xcd, 0xc6, 0x73, 0x26, 0x1d, 0xad, 0x43, 0xbe,
	0x6d, 0x86, 0x26, 0x9f, 0x11, 0x21, 0x2c, 0x22, 0xcd, 0x84, 0x45, 0x04, 0xbc, 0x46, 0xbf, 0x97,
	0xa1, 0x74, 0xe8, 0x98, 0x1d, 0x7c, 0x69, 0x55, 0x32, 0xe0, 0xaa, 0x4d, 0x09, 0x79, 0x9d, 0x5e,
	0x9b, 0x00, 0x9e, 0xf1, 0x8a, 0x7d, 0xe9, 0x6b, 0xc3, 0x58, 0x7d, 0x81, 0xc7, 0x4f, 0xd5, 0x22,
	0x07, 0x87, 0xbd, 0x84, 0x7a, 0x45, 0x50, 0xa0, 0xfe, 0x7c, 0x9a, 0x15, 0x5b, 0x9c, 0xb5, 0x62,
	0x7f, 0x94, 0x61, 0x69, 0xd7, 0x0c, 0xcd, 0x00, 0x87, 0x97, 0x55, 0x32, 0x0c, 0x73, 0x6d, 0xc6,
	0x48, 0x5d, 0x2d, 0x6e, 0xad, 0x4f, 0x40, 0xcf, 0xfa, 0x95, 0x7c, 0x8a, 0x69, 0xe5, 0x38, 0x99,
	0xb4, 0x72, 0xd9, 0xa5, 0x0c, 0xda, 0x1c, 0xf7, 0x09, 0x7d, 0x19, 0xe6, 0x2d, 0x33, 0xc4, 0x1d,
	0xd7, 0xe7, 0x5b, 0x8d, 0xfe, 0xe2, 0x30, 0x56, 0x57, 0xf9, 0x2a, 0xc6, 0x35, 0x22, 0x48, 0x6a,
	0x4e, 0xca, 0x46, 0x9f, 0x90, 0x67, 0x06, 0x6d, 0xfc, 0xe1, 0xa0, 0x66, 0xbc, 0x6c, 0xff, 0xcc,
	0xc1, 0xdc, 0x3e, 0x7b, 0xf8, 0xd1, 0x26, 0x14, 0xec, 0x5e, 0x1b, 0xbf, 0x47, 0x89, 0x65, 0xbd,
	0x32, 0x8c, 0xd5, 0x5b, 0xbc, 0x47, 0x88, 0x58, 0x84, 0x60, 0x86, 0xff, 0x23, 0x25, 0xd2, 0xa1,
	0xe8, 0xf9, 0x6e, 0xcb, 0x6c, 0xd9, 0x5d, 0x3b, 0xec, 0xd3, 0x6c, 0xe6, 0xc4, 0x25, 0x50, 0x50,
	0x66, 0x36, 0x5a, 0x41, 0x8e, 0x3a, 0x30, 0xef, 0xe0, 0xd0, 0xa4, 0x0d, 0x9a, 0xa7, 0x93, 0xfa,
	0xfa, 0x84, 0x72, 0xf0, 0xb0, 0xea, 0x0f, 0xb8, 0x39, 0xdb, 0xa0, 0x85, 0x74, 0x26, 0x38, 0x99,
	0x74, 0x26, 0xc2, 0xca, 0x57, 0xa0, 0x94, 0x39, 0x39, 0x6d, 0xd7, 0x5c, 0x10, 0x76, 0x4d, 0x9e,
	0xdc, 0xdf, 0xe4, 0xe1, 0x1a, 0xf7, 0x22, 0x79, 0xcf, 0x9e, 0x77, 0x36, 0xb3, 0x5b, 0x64, 0xee,
	0xb3, 0xd9, 0x22, 0xdf, 0x86, 0x79, 0xbb, 0xe7, 0x45, 0x94, 0x82, 0x2d, 0x24, 0xf7, 0x07, 0xb1,
	0x3a, 0x77, 0x48, 0x64, 0x94, 0x00, 0x25, 0xea, 0x0c, 0xfc, 0x6a, 0xd2, 0x2c, 0xe3, 0x3a, 0xad,
	0x39, 0x47, 0x85, 0x0c, 0x9a, 0xef, 0x99, 0x01, 0x2f, 0x9f, 0x72, 0x71, 0xf9, 0xc4, 0x82, 0x25,
	0x27, 0x33, 0x05, 0x4b, 0x84, 0xc8, 0x15, 0x3a, 0xa3, 0x40, 0xa1, 0xdf, 0xb8, 0x18, 0x3a, 0xa9,
	0xc9, 0xe7, 0xd8, 0x21, 0x7f, 0x96, 0x60, 0x99, 0x7b, 0x13, 0x7c, 0x5a, 0x2d, 0xd2, 0x86, 0x05,
	0x9f, 0x43, 0x4d, 0x5b, 0x3a, 0xc6, 0x12, 0x21, 0x5e, 0xbe, 0x29, 0xc4, 0x58, 0x8f, 0x70, 0x29,
	0xf7, 0xff, 0x0f, 0x12, 0x2c, 0x36, 0xf1, 0x25, 0xde, 0xf9, 0x2c, 0x37, 0xb9, 0xe7, 0xdb, 0x00,
	0xfb, 0x50, 0xe2, 0x4e, 0xf3, 0x8c, 0xb7, 0xfe, 0x1f, 0xaf, 0xb5, 0x0f, 0x63, 0x55, 0x9a, 0xd9,
	0x73, 0x46, 0xbd, 0xf5, 0x97, 0x79, 0x98, 0xe3, 0x10, 0xc8, 0x85, 0x3c, 0xf9, 0xab, 0x04, 0x7d,
	0x71, 0x1a, 0x95, 0xf0, 0xb7, 0x4b, 0x65, 0xaa, 0x5f, 0x5a, 0xf9, 0x67, 0x7f, 0xff, 0xd7, 0xaf,
	0x73, 0x48, 0x2b, 0x6d, 0x70, 0xf2, 0x0d, 0xd7, 0xc3, 0xbd, 0x7b, 0xd2, 0x6b, 0x28, 0x80, 0x02,
	0x5d, 0xae, 0xd1, 0x54, 0x90, 0xca, 0xfa, 0x34, 0x8b, 0xec, 0x96, 0xbe, 0x4a, 0x39, 0x6f, 0x68,
	0x4b, 0x29, 0xa7, 0x45, 0xf4, 0x84, 0xd4, 0x81, 0x3c, 0xd9, 0x6d, 0x91, 0x36, 0x7d, 0xf1, 0xad,
	0xbc, 0x7a, 0x71, 0x9f, 0xa6, 0x23, 0x72, 0x4e, 0x8c, 0x64, 0x27, 0x26, 0x74, 0x3f, 0x04, 0x20,
	0x88, 0x8f, 0x42, 0x1f, 0x9b, 0xce, 0x4c, 0xa4, 0x33, 0x0e, 0x87, 0xa6, 0x52, 0xce, 0x55, 0x6d,
	0x25, 0xe5, 0x0c, 0x28, 0x49, 0x42, 0xbd, 0x29, 0xa1, 0x00, 0xae, 0xb2, 0xfd, 0x10, 0xdd, 0x9d,
	0x65, 0x7d, 0x9c, 0x3d, 0xde, 0x0a, 0xe5, 0x5e, 0xd1, 0xae, 0xa5, 0xdc, 0x6c, 0xab, 0x24, 0x11,
	0xff, 0x54, 0x82, 0x45, 0x06, 0xcb, 0x83, 0x9e, 0x8d, 0x7b, 0xd6, 0xb0, 0xef, 0x50, 0xea, 0x35,
	0xed, 0xd6, 0x78, 0xd8, 0xa9, 0x07, 0x9b, 0x12, 0x3a, 0x1b, 0x6d, 0x30, 0x2f, 0xcf, 0xb4, 0x84,
	0xcd, 0x1e, 0xfa, 0x1a, 0xe5, 0xbf, 0xa9, 0x2d, 0xa7, 0xfc, 0x7c, 0x31, 0x23, 0xb1, 0xff, 0x5c,
	0x82, 0x12, 0x07, 0xe6, 0xc1, 0xcf, 0x48, 0x3f, 0x6b, 0xf4, 0x1a, 0x65, 0xbf, 0xad, 0xbd, 0x30,
	0x1e, 0xfd, 0xc8, 0x89, 0x4d, 0x09, 0x39, 0x50, 0xa0, 0x17, 0x0a, 0x7a, 0x69, 0x02, 0xac, 0x78,
	0x47, 0x56, 0xee, 0x5e, 0x6c, 0x34, 0x71, 0xa4, 0x7c, 0xcc, 0x08, 0xf5, 0xed, 0x7f, 0x3c, 0x55,
	0xae, 0x7c, 0xf4, 0x54, 0x91, 0x3e, 0x79, 0xaa, 0x48, 0xff, 0x79, 0xaa, 0x48, 0x3f, 0x19, 0x28,
	0xd2, 0xfb, 0x03, 0x45, 0xfa, 0xd3, 0x40, 0x91, 0x3e, 0x18, 0x28, 0xd2, 0xdf, 0x06, 0x8a, 0xf4,
	0xe1, 0x40, 0x91, 0x3e, 0x1a, 0x28, 0xd2, 0xaf, 0x3e, 0x56, 0xae, 0x7c, 0xf0, 0xb1, 0x22, 0x7d,
	0xbb, 0x28, 0x70, 0xb5, 0xae, 0xd2, 0xff, 0x87, 0x7f, 0xe9, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x30, 0xee, 0x7d, 0x03, 0x86, 0x17, 0x00, 0x00,
}
