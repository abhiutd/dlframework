syntax = "proto3";

import "google/api/annotations.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.gostring_all) = true;
option (gogoproto.equal_all) = true;
option (gogoproto.verbose_equal_all) = true;
option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.stringer_all) = true;
option (gogoproto.populate_all) = true;
option (gogoproto.testgen_all) = true;
option (gogoproto.benchgen_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;

option go_package = "dlframework";

package carml.org.dlframework;

message ErrorStatus {
  bool ok = 1 [ (gogoproto.moretags) = "yaml:\"ok,omitempty\"" ];
  string message = 2 [ (gogoproto.moretags) = "yaml:\"message,omitempty\"" ];
}

message ContainerHardware {
  string gpu = 1 [ (gogoproto.moretags) = "yaml:\"gpu,omitempty\"" ];
  string cpu = 2 [ (gogoproto.moretags) = "yaml:\"cpu,omitempty\"" ];
}

message FrameworkManifest {
  string name = 1 [ (gogoproto.moretags) = "yaml:\",flow\"" ];
  map<string, ContainerHardware> default_container = 2
      [ (gogoproto.moretags) = "yaml:\"default_container,omitempty\"" ];
}

message ModelManifest {
  message Type {
    message Parameter {
      string parameter = 1 [ (gogoproto.moretags) = "yaml:\",flow\"" ];
    }
    string type = 1 [ (gogoproto.moretags) = "yaml:\"type,omitempty\"" ];
    string description = 2
        [ (gogoproto.moretags) = "yaml:\"description,omitempty\"" ];
    map<string, Parameter> parameters = 3
        [ (gogoproto.moretags) = "yaml:\"parameters,omitempty\"" ];
  }

  message Model {
    string base_url = 1
        [ (gogoproto.moretags) = "yaml:\"base_url,omitempty\"" ];
    string weights_path = 2
        [ (gogoproto.moretags) = "yaml:\"weights_path,omitempty\"" ];
    string graph_path = 3
        [ (gogoproto.moretags) = "yaml:\"graph_path,omitempty\"" ];
    bool is_archive = 4
        [ (gogoproto.moretags) = "yaml:\"is_archive,omitempty\"" ];
  }

  string name = 1 [ (gogoproto.moretags) = "yaml:\"name,omitempty\"" ];
  FrameworkManifest framework = 2
      [ (gogoproto.moretags) = "yaml:\"framework,omitempty\"" ];
  map<string, ContainerHardware> container = 3
      [ (gogoproto.moretags) = "yaml:\"container,omitempty\"" ];
  string description = 4
      [ (gogoproto.moretags) = "yaml:\"description,omitempty\"" ];
  repeated string reference = 5
      [ (gogoproto.moretags) = "yaml:\"references,omitempty\"" ];
  string license = 6 [ (gogoproto.moretags) = "yaml:\"license,omitempty\"" ];
  repeated Type inputs = 7
      [ (gogoproto.moretags) = "yaml:\"inputs,omitempty\"" ];
  Type output = 8 [ (gogoproto.moretags) = "yaml:\"inputs,omitempty\"" ];
  string before_preprocess = 9
      [ (gogoproto.moretags) = "yaml:\"before_preprocess,omitempty\"" ];
  string preprocess = 10
      [ (gogoproto.moretags) = "yaml:\"preprocess,omitempty\"" ];
  string after_preprocess = 11
      [ (gogoproto.moretags) = "yaml:\"after_preprocess,omitempty\"" ];
  string before_postprocess = 12
      [ (gogoproto.moretags) = "yaml:\"before_postprocess,omitempty\"" ];
  string postprocess = 13
      [ (gogoproto.moretags) = "yaml:\"postprocess,omitempty\"" ];
  string after_postprocess = 14
      [ (gogoproto.moretags) = "yaml:\"after_postprocess,omitempty\"" ];
  Model model = 15 [ (gogoproto.moretags) = "yaml:\"model,omitempty\"" ];
  map<string, string> attributes = 16
      [ (gogoproto.moretags) = "yaml:\"attributes,omitempty\"" ];
}

message GetModelManifestsResponse {
  repeated ModelManifest manifests = 1
      [ (gogoproto.moretags) = "yaml:\"manifests,omitempty\"" ];
}

message GetFrameworkManifestsResponse {
  repeated FrameworkManifest manifests = 1
      [ (gogoproto.moretags) = "yaml:\"manifests,omitempty\"" ];
}

message GetModelManifestRequest {
  string model_name = 1
      [ (gogoproto.moretags) = "yaml:\"model_name,omitempty\"" ];
}

message GetFrameworkManifestRequest {
  string framework_name = 1
      [ (gogoproto.moretags) = "yaml:\"framework_name,omitempty\"" ];
}

message Null {}

message PredictRequest {
  string model_name = 1
      [ (gogoproto.moretags) = "yaml:\"model_name,omitempty\"" ];
  string framework_name = 2
      [ (gogoproto.moretags) = "yaml:\"framework_name,omitempty\"" ];
  bytes data = 3 [ (gogoproto.moretags) = "yaml:\"data,omitempty\"" ];
  int32 limit = 4 [ (gogoproto.moretags) = "yaml:\"limit,omitempty\"" ];
}
message PredictURLRequest {
  string model_name = 1
      [ (gogoproto.moretags) = "yaml:\"model_name,omitempty\"" ];
  string framework_name = 2
      [ (gogoproto.moretags) = "yaml:\"framework_name,omitempty\"" ];
  string url = 3 [ (gogoproto.moretags) = "yaml:\"url,omitempty\"" ];
  int32 limit = 4 [ (gogoproto.moretags) = "yaml:\"limit,omitempty\"" ];
}

message PredictionFeature {
  int64 index = 1 [ (gogoproto.moretags) = "yaml:\"index,omitempty\"" ];
  string name = 2 [ (gogoproto.moretags) = "yaml:\"name,omitempty\"" ];
  float probability = 3
      [ (gogoproto.moretags) = "yaml:\"probability,omitempty\"" ];
}

message PredictResponse {
  string id = 1 [ (gogoproto.moretags) = "yaml:\"id,omitempty\"" ];
  repeated PredictionFeature features = 2
      [ (gogoproto.moretags) = "yaml:\"features,omitempty\"" ];
  ErrorStatus error = 3 [ (gogoproto.moretags) = "yaml:\"error,omitempty\"" ];
}

message PredictURLResponse {
  string id = 1 [ (gogoproto.moretags) = "yaml:\"id,omitempty\"" ];
  repeated PredictionFeature features = 2
      [ (gogoproto.moretags) = "yaml:\"features,omitempty\"" ];
  ErrorStatus error = 3 [ (gogoproto.moretags) = "yaml:\"error,omitempty\"" ];
}

service carml {
  rpc GetFrameworkManifests(Null) returns (GetFrameworkManifestsResponse) {
    option (google.api.http) = {
      get : "/v1/carml/frameworks"
    };
  }
  rpc GetFrameworkManifest(GetFrameworkManifestRequest)
      returns (FrameworkManifest) {
    option (google.api.http) = {
      get : "/v1/carml/framework/{framework_name}/info"
    };
  }
  rpc GetFrameworkModels(GetFrameworkManifestRequest)
      returns (GetModelManifestsResponse) {
    option (google.api.http) = {
      get : "/v1/carml/framework/{framework_name}/models"
    };
  }
  rpc GetModelManifests(Null) returns (GetModelManifestsResponse) {
    option (google.api.http) = {
      get : "/v1/carml/models"
    };
  }
  rpc GetModelManifest(GetModelManifestRequest) returns (ModelManifest) {
    option (google.api.http) = {
      post : "/v1/carml/model/{model_name}/info",
      body : "*"
    };
  }

  rpc Predict(PredictRequest) returns (PredictResponse) {
    option (google.api.http) = {
      post : "/v1/carml/{framework_name}/{model_name}/predict",
      body : "data"
    };
  }

  rpc PredictByURL(PredictURLRequest) returns (PredictURLResponse) {
    option (google.api.http) = {
      post : "/v1/carml/{framework_name}/{model_name}/predict_url",
      body : "url"
    };
  }
}
