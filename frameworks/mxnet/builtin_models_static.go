// Code generated by go-bindata.
// sources:
// frameworks/mxnet/builtin_models/caffenet.yml
// DO NOT EDIT!

package mxnet

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _caffenetYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\x4d\x6f\xd4\x30\x10\x86\xef\xfe\x15\x73\xe9\xad\xf9\xd8\xed\xb6\xb4\x39\x20\xa1\x72\x41\xd0\x56\x82\x0a\x21\x21\xb4\x9a\x75\x26\x89\x8b\x63\x5b\x9e\xc9\x6e\xf7\xc2\x6f\x47\x76\xb6\xa5\x2d\x12\x15\x97\x5d\x27\xf3\x78\x3e\xde\x77\xe2\x70\xa4\x06\x2e\xb1\xeb\xe8\x9a\x44\x75\x11\x47\xda\xf9\xf8\xb3\x51\x00\x73\xec\xea\x5b\x0a\x00\x6c\x29\xb2\xf1\xae\x81\x5f\x75\xb9\x28\xef\x95\xf6\x4e\xd0\x38\x8a\x09\xc5\xb1\x3d\x5b\xa5\x03\x40\x1f\xa6\x06\x22\x9a\x10\xfd\x1d\x69\xa9\x34\xc6\xd1\x16\xe3\xbd\x23\x69\x32\x56\xe8\x30\x65\x52\xbf\x4a\xf6\x99\x0c\x41\x9f\xad\x2c\x35\xaf\x5e\x3a\x80\x87\x6b\xff\x6e\xe5\x29\xdb\x12\xeb\x68\x82\xe4\xf1\xde\x2a\x80\x77\x0e\xcc\x88\x3d\x15\xda\x22\xb3\xe9\x8c\xc6\x14\x84\x96\x28\x80\xf6\x6e\xeb\xed\x94\x5e\xa0\x05\x47\x92\xf4\x02\x89\x49\x8c\x16\xbc\x03\x19\x08\x3e\x7d\xf9\xfa\xf9\xb2\x58\xd6\x8b\x1a\x3e\xa4\x4c\xd7\x24\x33\x62\x5c\x0f\x4c\x72\xac\x00\x76\x83\xd1\x03\xa0\x1e\x0c\x6d\xa9\x05\xf1\xa1\x58\x00\xba\xf9\x74\x0a\x14\xa3\x8f\x10\x51\x88\xc1\x77\x70\x72\x51\xbe\x39\xca\xe1\xc5\x79\x79\x71\x54\x2a\x80\xdb\x81\x1e\xeb\x6b\xef\xd8\xb0\x64\xf4\xac\xbe\x82\x80\xc9\x4a\xa1\xc8\xf9\xce\x69\x5d\x7f\x04\x47\x53\xf4\x8e\x01\x75\xf4\xcc\x70\xfa\x62\x14\x8b\xfb\x84\xcb\xce\x43\x37\x59\xbb\x2f\xb4\x77\x8e\xb4\x50\x7b\x08\x95\x2a\x52\x47\x91\x9c\x26\x4e\x6e\x14\x30\x88\x84\xa6\xaa\x02\x86\x14\x76\x26\x70\xa9\xf5\xfc\x58\xad\xce\x97\xab\x22\xcb\xe8\x48\x5e\x28\x59\xec\x8c\x0c\x45\x92\xb3\x78\xd6\x43\x91\x5a\xcc\x7f\x79\x2a\x56\xd6\x68\x72\x4c\x0d\xdc\xde\xbc\xbf\x51\xc6\x85\x49\x0e\xa5\x65\x1f\xa8\x99\x6d\xca\x66\x3f\x33\x31\x59\x90\xe1\x27\xc0\x1f\x45\xe6\x4d\x02\x68\xcd\x48\x2e\x2d\x35\x37\xf0\x7d\x71\x0c\x27\xc7\xb0\x5c\xae\xf2\xcf\x0f\xe5\x27\x09\x93\x24\x74\xae\xd4\x11\xca\x14\x53\xaa\x67\x95\xd0\xc1\x4c\xce\x95\x92\x1f\x60\x71\x43\x56\xfd\x5d\xf1\x90\x82\xd7\x53\xb4\xcd\x83\x76\x2d\x0a\x96\xed\x68\x75\x39\xda\x2a\xef\x66\x35\xfa\x96\x2c\x57\x0f\xda\x55\xbc\x77\x4c\x52\xca\xbd\xa8\x1c\x4a\xd9\x36\xc8\xf4\xbf\x79\x74\xfa\xcc\xd3\x41\x01\xf4\x11\xc3\xb0\x0e\x28\x43\x03\x0f\xef\x0b\xde\x8f\x1b\x6f\xcb\x3b\xf6\x2e\xed\x27\x99\x7e\x10\x7e\x09\xd5\x75\x5d\x97\x79\x34\x56\x00\x86\xd7\x18\xf5\x60\xb6\x49\x22\xb4\x4c\x0a\x45\xa2\xd9\x4c\x32\xef\xc8\x88\xce\x74\xc4\xb2\xc6\x49\x06\x1f\x1b\xc0\x4d\x3b\xd9\x36\xc9\x1a\xd1\x58\xe3\xfa\x75\xea\x9c\x49\x9a\xc7\x2f\x45\xfd\x0e\x00\x00\xff\xff\x69\xf8\x0f\xe2\x96\x04\x00\x00"

func caffenetYmlBytes() ([]byte, error) {
	return bindataRead(
		_caffenetYml,
		"caffenet.yml",
	)
}

func caffenetYml() (*asset, error) {
	bytes, err := caffenetYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "caffenet.yml", size: 1174, mode: os.FileMode(420), modTime: time.Unix(1497478619, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"caffenet.yml": caffenetYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"caffenet.yml": &bintree{caffenetYml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

