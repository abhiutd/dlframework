// Code generated by go-bindata.
// sources:
// frameworks/mxnet/builtin_models/caffenet.yml
// DO NOT EDIT!

package mxnet

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _caffenetYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\x4d\x6f\xdb\x38\x10\x86\xef\xfc\x15\x73\xc9\x2d\xfa\xb0\xe3\x64\x13\x1e\x16\x58\x64\x2f\x8b\x6d\x12\xa0\x0d\x8a\x02\x45\x61\x8c\xa9\x91\xc5\x94\x22\x09\xce\xc8\x8e\xff\x7d\x41\xca\x49\x93\x14\x68\xd0\x8b\x4d\x69\x1e\xce\xc7\xfb\x8e\x3c\x8e\xa4\xe1\x1a\xfb\x9e\x6e\x49\x54\x9f\x70\xa4\x7d\x48\xdf\xb5\x02\x98\x63\x37\x5f\x72\x00\x60\x47\x89\x6d\xf0\x1a\xda\x7a\xa1\x4c\xf0\x82\xd6\x53\xca\x1c\x8e\xdd\xc5\x2a\x1f\x00\xb6\x71\xd2\x90\xd0\xc6\x14\x1e\xc8\x48\x63\x30\x8d\xae\x1a\x1f\x3d\x89\x2e\x58\x65\xe2\x54\x48\xf3\x2e\xb9\x2d\x64\x8c\xe6\x62\xe5\x48\xbf\x7b\xe9\x08\x1e\xaf\xfd\xbe\x95\x97\x6c\x47\x6c\x92\x8d\x52\x66\xfb\x5b\x01\xfc\xe3\xc1\x8e\xb8\xa5\xca\x38\x64\xb6\xbd\x35\x98\x83\xd0\x11\x45\x30\xc1\xef\x82\x9b\xf2\x0b\x74\xe0\x49\xb2\x58\x20\x29\x8b\xd1\x41\xf0\x20\x03\xc1\x87\x4f\x9f\x3f\x5e\x57\xcb\x76\xd1\xc2\x7f\x39\xd3\x2d\xc9\x8c\x58\xbf\x05\x26\x39\x55\x00\xfb\xc1\x9a\x01\xd0\x0c\x96\x76\xd4\x81\x84\x58\x2d\x00\xfd\x7c\x3a\x07\x4a\x29\x24\x48\x28\xc4\x10\x7a\x38\xbb\xaa\xff\x3a\x29\xe1\xc5\x65\x7d\x75\x52\x2b\x80\xfb\x81\x9e\xeb\x9b\xe0\xd9\xb2\x14\xf4\xa2\xbd\x81\x88\xd9\x47\xa1\xc4\xe5\xce\x79\xdb\xfe\x0f\x9e\xa6\x14\x3c\x03\x9a\x14\x98\xe1\xfc\xcd\x28\x0e\x0f\x19\x97\x7d\x80\x7e\x72\xee\x50\x99\xe0\x3d\x19\xa1\xee\x18\xaa\x55\xa2\x9e\x12\x79\x43\x9c\xdd\xa8\x60\x10\x89\xba\x69\x22\xc6\x1c\xf6\x36\x72\x6d\xcc\xfc\xd8\xac\x2e\x97\xab\xaa\xc8\xe8\x49\xde\x28\x59\xed\xad\x0c\x55\x96\xb3\x7a\xd5\x43\x95\x5b\x2c\x7f\x65\x2a\x56\xce\x1a\xf2\x4c\x1a\xee\xef\xfe\xbd\x53\xd6\xc7\x49\x8e\xa5\xe5\x10\x49\xcf\x36\x15\xb3\x5f\x99\x98\x2d\x28\xf0\x0b\xe0\xa7\x22\xf3\x26\x01\x74\x76\x24\x9f\x37\x9a\x35\x7c\x5d\x9c\xc2\xd9\x29\x2c\x97\xab\xf2\xf3\x4d\x85\x49\xe2\x24\x19\x9d\x2b\xf5\x84\x32\xa5\x9c\xea\x55\x25\xf4\x30\x93\x73\xa5\xec\x07\x38\xdc\x90\x53\xbf\x56\x3c\xa6\xe0\xf5\x94\x9c\x7e\xd2\xae\x43\xc1\xba\x1b\x9d\xa9\x47\xd7\x94\xdd\x6c\xc6\xd0\x91\xe3\xe6\x49\xbb\x86\x0f\x9e\x49\x6a\x79\x14\x55\x42\x39\xdb\x06\x99\xfe\x34\x8f\xc9\xdf\x78\x3e\x28\x80\x6d\xc2\x38\xac\x23\xca\xa0\xe1\xe9\x7d\xc5\x87\x71\x13\x5c\xfd\xc0\xc1\xe7\xfd\x24\xbb\x1d\x84\xdf\x42\x6d\xdb\xb6\x75\x19\x8d\x15\x80\xe5\x35\x26\x33\xd8\x5d\x96\x08\x1d\x93\x42\x91\x64\x37\x93\xcc\x3b\x32\xa2\xb7\x3d\xb1\xac\x71\x92\x21\x24\x0d\xb8\xe9\x26\xd7\x65\x59\x13\x5a\x67\xfd\x76\x9d\x3b\x67\x12\xfd\xfc\xa5\xa8\x1f\x01\x00\x00\xff\xff\x7e\x6a\xbd\xac\x93\x04\x00\x00"

func caffenetYmlBytes() ([]byte, error) {
	return bindataRead(
		_caffenetYml,
		"caffenet.yml",
	)
}

func caffenetYml() (*asset, error) {
	bytes, err := caffenetYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "caffenet.yml", size: 1171, mode: os.FileMode(420), modTime: time.Unix(1497465002, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"caffenet.yml": caffenetYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"caffenet.yml": &bintree{caffenetYml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

