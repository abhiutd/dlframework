// Code generated by protoc-gen-gogo.
// source: DataStructures.proto
// DO NOT EDIT!

package CoreML

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Ignoring public import of Int64FeatureType from FeatureTypes.proto

// Ignoring public import of DoubleFeatureType from FeatureTypes.proto

// Ignoring public import of StringFeatureType from FeatureTypes.proto

// Ignoring public import of ImageFeatureType from FeatureTypes.proto

// Ignoring public import of ArrayFeatureType from FeatureTypes.proto

// Ignoring public import of DictionaryFeatureType from FeatureTypes.proto

// Ignoring public import of FeatureType from FeatureTypes.proto

// Ignoring public import of ColorSpace from FeatureTypes.proto

// Ignoring public import of ArrayDataType from FeatureTypes.proto

// *
// A mapping from a string
// to a 64-bit integer.
type StringToInt64Map struct {
	Map map[string]int64 `protobuf:"bytes,1,rep,name=map" json:"map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *StringToInt64Map) Reset()                    { *m = StringToInt64Map{} }
func (m *StringToInt64Map) String() string            { return proto.CompactTextString(m) }
func (*StringToInt64Map) ProtoMessage()               {}
func (*StringToInt64Map) Descriptor() ([]byte, []int) { return fileDescriptorDataStructures, []int{0} }

func (m *StringToInt64Map) GetMap() map[string]int64 {
	if m != nil {
		return m.Map
	}
	return nil
}

// *
// A mapping from a 64-bit integer
// to a string.
type Int64ToStringMap struct {
	Map map[int64]string `protobuf:"bytes,1,rep,name=map" json:"map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Int64ToStringMap) Reset()                    { *m = Int64ToStringMap{} }
func (m *Int64ToStringMap) String() string            { return proto.CompactTextString(m) }
func (*Int64ToStringMap) ProtoMessage()               {}
func (*Int64ToStringMap) Descriptor() ([]byte, []int) { return fileDescriptorDataStructures, []int{1} }

func (m *Int64ToStringMap) GetMap() map[int64]string {
	if m != nil {
		return m.Map
	}
	return nil
}

// *
// A mapping from a string
// to a double-precision floating point number.
type StringToDoubleMap struct {
	Map map[string]float64 `protobuf:"bytes,1,rep,name=map" json:"map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
}

func (m *StringToDoubleMap) Reset()                    { *m = StringToDoubleMap{} }
func (m *StringToDoubleMap) String() string            { return proto.CompactTextString(m) }
func (*StringToDoubleMap) ProtoMessage()               {}
func (*StringToDoubleMap) Descriptor() ([]byte, []int) { return fileDescriptorDataStructures, []int{2} }

func (m *StringToDoubleMap) GetMap() map[string]float64 {
	if m != nil {
		return m.Map
	}
	return nil
}

// *
// A mapping from a 64-bit integer
// to a double-precision floating point number.
type Int64ToDoubleMap struct {
	Map map[int64]float64 `protobuf:"bytes,1,rep,name=map" json:"map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
}

func (m *Int64ToDoubleMap) Reset()                    { *m = Int64ToDoubleMap{} }
func (m *Int64ToDoubleMap) String() string            { return proto.CompactTextString(m) }
func (*Int64ToDoubleMap) ProtoMessage()               {}
func (*Int64ToDoubleMap) Descriptor() ([]byte, []int) { return fileDescriptorDataStructures, []int{3} }

func (m *Int64ToDoubleMap) GetMap() map[int64]float64 {
	if m != nil {
		return m.Map
	}
	return nil
}

// *
// A vector of strings.
type StringVector struct {
	Vector []string `protobuf:"bytes,1,rep,name=vector" json:"vector,omitempty"`
}

func (m *StringVector) Reset()                    { *m = StringVector{} }
func (m *StringVector) String() string            { return proto.CompactTextString(m) }
func (*StringVector) ProtoMessage()               {}
func (*StringVector) Descriptor() ([]byte, []int) { return fileDescriptorDataStructures, []int{4} }

func (m *StringVector) GetVector() []string {
	if m != nil {
		return m.Vector
	}
	return nil
}

// *
// A vector of 64-bit integers.
type Int64Vector struct {
	Vector []int64 `protobuf:"varint,1,rep,packed,name=vector" json:"vector,omitempty"`
}

func (m *Int64Vector) Reset()                    { *m = Int64Vector{} }
func (m *Int64Vector) String() string            { return proto.CompactTextString(m) }
func (*Int64Vector) ProtoMessage()               {}
func (*Int64Vector) Descriptor() ([]byte, []int) { return fileDescriptorDataStructures, []int{5} }

func (m *Int64Vector) GetVector() []int64 {
	if m != nil {
		return m.Vector
	}
	return nil
}

// *
// A vector of double-precision floating point numbers.
type DoubleVector struct {
	Vector []float64 `protobuf:"fixed64,1,rep,packed,name=vector" json:"vector,omitempty"`
}

func (m *DoubleVector) Reset()                    { *m = DoubleVector{} }
func (m *DoubleVector) String() string            { return proto.CompactTextString(m) }
func (*DoubleVector) ProtoMessage()               {}
func (*DoubleVector) Descriptor() ([]byte, []int) { return fileDescriptorDataStructures, []int{6} }

func (m *DoubleVector) GetVector() []float64 {
	if m != nil {
		return m.Vector
	}
	return nil
}

func init() {
	proto.RegisterType((*StringToInt64Map)(nil), "CoreML.StringToInt64Map")
	proto.RegisterType((*Int64ToStringMap)(nil), "CoreML.Int64ToStringMap")
	proto.RegisterType((*StringToDoubleMap)(nil), "CoreML.StringToDoubleMap")
	proto.RegisterType((*Int64ToDoubleMap)(nil), "CoreML.Int64ToDoubleMap")
	proto.RegisterType((*StringVector)(nil), "CoreML.StringVector")
	proto.RegisterType((*Int64Vector)(nil), "CoreML.Int64Vector")
	proto.RegisterType((*DoubleVector)(nil), "CoreML.DoubleVector")
}
func (m *StringToInt64Map) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StringToInt64Map) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Map) > 0 {
		for k := range m.Map {
			dAtA[i] = 0xa
			i++
			v := m.Map[k]
			mapSize := 1 + len(k) + sovDataStructures(uint64(len(k))) + 1 + sovDataStructures(uint64(v))
			i = encodeVarintDataStructures(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintDataStructures(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x10
			i++
			i = encodeVarintDataStructures(dAtA, i, uint64(v))
		}
	}
	return i, nil
}

func (m *Int64ToStringMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Int64ToStringMap) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Map) > 0 {
		for k := range m.Map {
			dAtA[i] = 0xa
			i++
			v := m.Map[k]
			mapSize := 1 + sovDataStructures(uint64(k)) + 1 + len(v) + sovDataStructures(uint64(len(v)))
			i = encodeVarintDataStructures(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintDataStructures(dAtA, i, uint64(k))
			dAtA[i] = 0x12
			i++
			i = encodeVarintDataStructures(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func (m *StringToDoubleMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StringToDoubleMap) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Map) > 0 {
		for k := range m.Map {
			dAtA[i] = 0xa
			i++
			v := m.Map[k]
			mapSize := 1 + len(k) + sovDataStructures(uint64(len(k))) + 1 + 8
			i = encodeVarintDataStructures(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintDataStructures(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x11
			i++
			i = encodeFixed64DataStructures(dAtA, i, uint64(math.Float64bits(float64(v))))
		}
	}
	return i, nil
}

func (m *Int64ToDoubleMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Int64ToDoubleMap) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Map) > 0 {
		for k := range m.Map {
			dAtA[i] = 0xa
			i++
			v := m.Map[k]
			mapSize := 1 + sovDataStructures(uint64(k)) + 1 + 8
			i = encodeVarintDataStructures(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintDataStructures(dAtA, i, uint64(k))
			dAtA[i] = 0x11
			i++
			i = encodeFixed64DataStructures(dAtA, i, uint64(math.Float64bits(float64(v))))
		}
	}
	return i, nil
}

func (m *StringVector) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StringVector) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Vector) > 0 {
		for _, s := range m.Vector {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *Int64Vector) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Int64Vector) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Vector) > 0 {
		dAtA2 := make([]byte, len(m.Vector)*10)
		var j1 int
		for _, num1 := range m.Vector {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintDataStructures(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	return i, nil
}

func (m *DoubleVector) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DoubleVector) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Vector) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDataStructures(dAtA, i, uint64(len(m.Vector)*8))
		for _, num := range m.Vector {
			f3 := math.Float64bits(float64(num))
			dAtA[i] = uint8(f3)
			i++
			dAtA[i] = uint8(f3 >> 8)
			i++
			dAtA[i] = uint8(f3 >> 16)
			i++
			dAtA[i] = uint8(f3 >> 24)
			i++
			dAtA[i] = uint8(f3 >> 32)
			i++
			dAtA[i] = uint8(f3 >> 40)
			i++
			dAtA[i] = uint8(f3 >> 48)
			i++
			dAtA[i] = uint8(f3 >> 56)
			i++
		}
	}
	return i, nil
}

func encodeFixed64DataStructures(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32DataStructures(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintDataStructures(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *StringToInt64Map) Size() (n int) {
	var l int
	_ = l
	if len(m.Map) > 0 {
		for k, v := range m.Map {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovDataStructures(uint64(len(k))) + 1 + sovDataStructures(uint64(v))
			n += mapEntrySize + 1 + sovDataStructures(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Int64ToStringMap) Size() (n int) {
	var l int
	_ = l
	if len(m.Map) > 0 {
		for k, v := range m.Map {
			_ = k
			_ = v
			mapEntrySize := 1 + sovDataStructures(uint64(k)) + 1 + len(v) + sovDataStructures(uint64(len(v)))
			n += mapEntrySize + 1 + sovDataStructures(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *StringToDoubleMap) Size() (n int) {
	var l int
	_ = l
	if len(m.Map) > 0 {
		for k, v := range m.Map {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovDataStructures(uint64(len(k))) + 1 + 8
			n += mapEntrySize + 1 + sovDataStructures(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Int64ToDoubleMap) Size() (n int) {
	var l int
	_ = l
	if len(m.Map) > 0 {
		for k, v := range m.Map {
			_ = k
			_ = v
			mapEntrySize := 1 + sovDataStructures(uint64(k)) + 1 + 8
			n += mapEntrySize + 1 + sovDataStructures(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *StringVector) Size() (n int) {
	var l int
	_ = l
	if len(m.Vector) > 0 {
		for _, s := range m.Vector {
			l = len(s)
			n += 1 + l + sovDataStructures(uint64(l))
		}
	}
	return n
}

func (m *Int64Vector) Size() (n int) {
	var l int
	_ = l
	if len(m.Vector) > 0 {
		l = 0
		for _, e := range m.Vector {
			l += sovDataStructures(uint64(e))
		}
		n += 1 + sovDataStructures(uint64(l)) + l
	}
	return n
}

func (m *DoubleVector) Size() (n int) {
	var l int
	_ = l
	if len(m.Vector) > 0 {
		n += 1 + sovDataStructures(uint64(len(m.Vector)*8)) + len(m.Vector)*8
	}
	return n
}

func sovDataStructures(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDataStructures(x uint64) (n int) {
	return sovDataStructures(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StringToInt64Map) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataStructures
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StringToInt64Map: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StringToInt64Map: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Map", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataStructures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataStructures
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataStructures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataStructures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthDataStructures
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Map == nil {
				m.Map = make(map[string]int64)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDataStructures
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapvalue int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDataStructures
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					mapvalue |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Map[mapkey] = mapvalue
			} else {
				var mapvalue int64
				m.Map[mapkey] = mapvalue
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataStructures(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDataStructures
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Int64ToStringMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataStructures
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Int64ToStringMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Int64ToStringMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Map", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataStructures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataStructures
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataStructures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var mapkey int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataStructures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				mapkey |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if m.Map == nil {
				m.Map = make(map[int64]string)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDataStructures
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var stringLenmapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDataStructures
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLenmapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLenmapvalue := int(stringLenmapvalue)
				if intStringLenmapvalue < 0 {
					return ErrInvalidLengthDataStructures
				}
				postStringIndexmapvalue := iNdEx + intStringLenmapvalue
				if postStringIndexmapvalue > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := string(dAtA[iNdEx:postStringIndexmapvalue])
				iNdEx = postStringIndexmapvalue
				m.Map[mapkey] = mapvalue
			} else {
				var mapvalue string
				m.Map[mapkey] = mapvalue
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataStructures(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDataStructures
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StringToDoubleMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataStructures
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StringToDoubleMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StringToDoubleMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Map", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataStructures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataStructures
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataStructures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataStructures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthDataStructures
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Map == nil {
				m.Map = make(map[string]float64)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDataStructures
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapvaluetemp uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += 8
				mapvaluetemp = uint64(dAtA[iNdEx-8])
				mapvaluetemp |= uint64(dAtA[iNdEx-7]) << 8
				mapvaluetemp |= uint64(dAtA[iNdEx-6]) << 16
				mapvaluetemp |= uint64(dAtA[iNdEx-5]) << 24
				mapvaluetemp |= uint64(dAtA[iNdEx-4]) << 32
				mapvaluetemp |= uint64(dAtA[iNdEx-3]) << 40
				mapvaluetemp |= uint64(dAtA[iNdEx-2]) << 48
				mapvaluetemp |= uint64(dAtA[iNdEx-1]) << 56
				mapvalue := math.Float64frombits(mapvaluetemp)
				m.Map[mapkey] = mapvalue
			} else {
				var mapvalue float64
				m.Map[mapkey] = mapvalue
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataStructures(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDataStructures
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Int64ToDoubleMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataStructures
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Int64ToDoubleMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Int64ToDoubleMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Map", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataStructures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataStructures
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataStructures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var mapkey int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataStructures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				mapkey |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if m.Map == nil {
				m.Map = make(map[int64]float64)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDataStructures
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapvaluetemp uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += 8
				mapvaluetemp = uint64(dAtA[iNdEx-8])
				mapvaluetemp |= uint64(dAtA[iNdEx-7]) << 8
				mapvaluetemp |= uint64(dAtA[iNdEx-6]) << 16
				mapvaluetemp |= uint64(dAtA[iNdEx-5]) << 24
				mapvaluetemp |= uint64(dAtA[iNdEx-4]) << 32
				mapvaluetemp |= uint64(dAtA[iNdEx-3]) << 40
				mapvaluetemp |= uint64(dAtA[iNdEx-2]) << 48
				mapvaluetemp |= uint64(dAtA[iNdEx-1]) << 56
				mapvalue := math.Float64frombits(mapvaluetemp)
				m.Map[mapkey] = mapvalue
			} else {
				var mapvalue float64
				m.Map[mapkey] = mapvalue
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataStructures(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDataStructures
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StringVector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataStructures
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StringVector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StringVector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vector", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataStructures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataStructures
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vector = append(m.Vector, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataStructures(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDataStructures
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Int64Vector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataStructures
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Int64Vector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Int64Vector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDataStructures
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Vector = append(m.Vector, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDataStructures
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDataStructures
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDataStructures
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Vector = append(m.Vector, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Vector", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDataStructures(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDataStructures
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DoubleVector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataStructures
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DoubleVector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DoubleVector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += 8
				v = uint64(dAtA[iNdEx-8])
				v |= uint64(dAtA[iNdEx-7]) << 8
				v |= uint64(dAtA[iNdEx-6]) << 16
				v |= uint64(dAtA[iNdEx-5]) << 24
				v |= uint64(dAtA[iNdEx-4]) << 32
				v |= uint64(dAtA[iNdEx-3]) << 40
				v |= uint64(dAtA[iNdEx-2]) << 48
				v |= uint64(dAtA[iNdEx-1]) << 56
				v2 := float64(math.Float64frombits(v))
				m.Vector = append(m.Vector, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDataStructures
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDataStructures
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					iNdEx += 8
					v = uint64(dAtA[iNdEx-8])
					v |= uint64(dAtA[iNdEx-7]) << 8
					v |= uint64(dAtA[iNdEx-6]) << 16
					v |= uint64(dAtA[iNdEx-5]) << 24
					v |= uint64(dAtA[iNdEx-4]) << 32
					v |= uint64(dAtA[iNdEx-3]) << 40
					v |= uint64(dAtA[iNdEx-2]) << 48
					v |= uint64(dAtA[iNdEx-1]) << 56
					v2 := float64(math.Float64frombits(v))
					m.Vector = append(m.Vector, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Vector", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDataStructures(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDataStructures
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDataStructures(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDataStructures
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDataStructures
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDataStructures
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDataStructures
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDataStructures
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDataStructures(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDataStructures = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDataStructures   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("DataStructures.proto", fileDescriptorDataStructures) }

var fileDescriptorDataStructures = []byte{
	// 300 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x71, 0x49, 0x2c, 0x49,
	0x0c, 0x2e, 0x29, 0x2a, 0x4d, 0x2e, 0x29, 0x2d, 0x4a, 0x2d, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0x62, 0x73, 0xce, 0x2f, 0x4a, 0xf5, 0xf5, 0x91, 0x12, 0x72, 0x4b, 0x4d, 0x04, 0x89, 0x87,
	0x54, 0x16, 0xc0, 0xe4, 0x94, 0xea, 0xb9, 0x04, 0x82, 0x4b, 0x8a, 0x32, 0xf3, 0xd2, 0x43, 0xf2,
	0x3d, 0xf3, 0x4a, 0xcc, 0x4c, 0x7c, 0x13, 0x0b, 0x84, 0x8c, 0xb9, 0x98, 0x73, 0x13, 0x0b, 0x24,
	0x18, 0x15, 0x98, 0x35, 0xb8, 0x8d, 0x14, 0xf5, 0x20, 0xba, 0xf5, 0xd0, 0x95, 0xe9, 0xf9, 0x26,
	0x16, 0xb8, 0xe6, 0x95, 0x14, 0x55, 0x06, 0x81, 0x54, 0x4b, 0x99, 0x71, 0x71, 0xc0, 0x04, 0x84,
	0x04, 0xb8, 0x98, 0xb3, 0x53, 0x2b, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x40, 0x4c, 0x21,
	0x11, 0x2e, 0xd6, 0xb2, 0xc4, 0x9c, 0xd2, 0x54, 0x09, 0x26, 0x05, 0x46, 0x0d, 0xe6, 0x20, 0x08,
	0xc7, 0x8a, 0xc9, 0x82, 0x11, 0xe4, 0x00, 0xb0, 0x89, 0x21, 0xf9, 0x10, 0x0b, 0x70, 0x3b, 0x00,
	0x5d, 0x19, 0x71, 0x0e, 0x60, 0xc6, 0xe2, 0x00, 0x4e, 0x64, 0x07, 0x34, 0x32, 0x72, 0x09, 0xc2,
	0xfc, 0xe6, 0x92, 0x5f, 0x9a, 0x94, 0x93, 0x0a, 0x72, 0x82, 0x09, 0xb2, 0x13, 0x94, 0xd0, 0xc3,
	0x00, 0xae, 0x8e, 0xfc, 0x40, 0x60, 0xc4, 0x1e, 0x08, 0x08, 0x17, 0xe0, 0x0d, 0x04, 0x12, 0x1d,
	0xc0, 0x4c, 0xc8, 0x01, 0x6a, 0x5c, 0x3c, 0x10, 0xbf, 0x85, 0xa5, 0x26, 0x97, 0xe4, 0x17, 0x09,
	0x89, 0x71, 0xb1, 0x95, 0x81, 0x59, 0x60, 0xfb, 0x39, 0x83, 0xa0, 0x3c, 0x25, 0x55, 0x2e, 0x6e,
	0xb0, 0x0b, 0xb0, 0x2a, 0x63, 0x86, 0x2b, 0x53, 0xe3, 0xe2, 0x81, 0xb8, 0x10, 0xab, 0x3a, 0x46,
	0x98, 0x3a, 0x27, 0xa1, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e,
	0x71, 0xc2, 0x63, 0x39, 0x06, 0x0f, 0xe6, 0x00, 0x86, 0x24, 0x36, 0x70, 0xd2, 0x34, 0x06, 0x04,
	0x00, 0x00, 0xff, 0xff, 0xdd, 0xf6, 0x99, 0x5a, 0xce, 0x02, 0x00, 0x00,
}
