// Code generated by protoc-gen-gogo.
// source: CategoricalMapping.proto
// DO NOT EDIT!

package CoreML

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Ignoring public import of StringToInt64Map from DataStructures.proto

// Ignoring public import of Int64ToStringMap from DataStructures.proto

// Ignoring public import of StringToDoubleMap from DataStructures.proto

// Ignoring public import of Int64ToDoubleMap from DataStructures.proto

// Ignoring public import of StringVector from DataStructures.proto

// Ignoring public import of Int64Vector from DataStructures.proto

// Ignoring public import of DoubleVector from DataStructures.proto

// *
// A categorical mapping.
//
// This allows conversion from integers to strings, or from strings to integers.
type CategoricalMapping struct {
	// Types that are valid to be assigned to MappingType:
	//	*CategoricalMapping_StringToInt64Map
	//	*CategoricalMapping_Int64ToStringMap
	MappingType isCategoricalMapping_MappingType `protobuf_oneof:"MappingType"`
	// *
	// The value returned if an input is not contained in the map above.
	// If one of these is not set, then an error is raised on an unknown input.
	//
	// Types that are valid to be assigned to ValueOnUnknown:
	//	*CategoricalMapping_StrValue
	//	*CategoricalMapping_Int64Value
	ValueOnUnknown isCategoricalMapping_ValueOnUnknown `protobuf_oneof:"ValueOnUnknown"`
}

func (m *CategoricalMapping) Reset()         { *m = CategoricalMapping{} }
func (m *CategoricalMapping) String() string { return proto.CompactTextString(m) }
func (*CategoricalMapping) ProtoMessage()    {}
func (*CategoricalMapping) Descriptor() ([]byte, []int) {
	return fileDescriptorCategoricalMapping, []int{0}
}

type isCategoricalMapping_MappingType interface {
	isCategoricalMapping_MappingType()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCategoricalMapping_ValueOnUnknown interface {
	isCategoricalMapping_ValueOnUnknown()
	MarshalTo([]byte) (int, error)
	Size() int
}

type CategoricalMapping_StringToInt64Map struct {
	StringToInt64Map *StringToInt64Map `protobuf:"bytes,1,opt,name=stringToInt64Map,oneof"`
}
type CategoricalMapping_Int64ToStringMap struct {
	Int64ToStringMap *Int64ToStringMap `protobuf:"bytes,2,opt,name=int64ToStringMap,oneof"`
}
type CategoricalMapping_StrValue struct {
	StrValue string `protobuf:"bytes,101,opt,name=strValue,proto3,oneof"`
}
type CategoricalMapping_Int64Value struct {
	Int64Value int64 `protobuf:"varint,102,opt,name=int64Value,proto3,oneof"`
}

func (*CategoricalMapping_StringToInt64Map) isCategoricalMapping_MappingType() {}
func (*CategoricalMapping_Int64ToStringMap) isCategoricalMapping_MappingType() {}
func (*CategoricalMapping_StrValue) isCategoricalMapping_ValueOnUnknown()      {}
func (*CategoricalMapping_Int64Value) isCategoricalMapping_ValueOnUnknown()    {}

func (m *CategoricalMapping) GetMappingType() isCategoricalMapping_MappingType {
	if m != nil {
		return m.MappingType
	}
	return nil
}
func (m *CategoricalMapping) GetValueOnUnknown() isCategoricalMapping_ValueOnUnknown {
	if m != nil {
		return m.ValueOnUnknown
	}
	return nil
}

func (m *CategoricalMapping) GetStringToInt64Map() *StringToInt64Map {
	if x, ok := m.GetMappingType().(*CategoricalMapping_StringToInt64Map); ok {
		return x.StringToInt64Map
	}
	return nil
}

func (m *CategoricalMapping) GetInt64ToStringMap() *Int64ToStringMap {
	if x, ok := m.GetMappingType().(*CategoricalMapping_Int64ToStringMap); ok {
		return x.Int64ToStringMap
	}
	return nil
}

func (m *CategoricalMapping) GetStrValue() string {
	if x, ok := m.GetValueOnUnknown().(*CategoricalMapping_StrValue); ok {
		return x.StrValue
	}
	return ""
}

func (m *CategoricalMapping) GetInt64Value() int64 {
	if x, ok := m.GetValueOnUnknown().(*CategoricalMapping_Int64Value); ok {
		return x.Int64Value
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CategoricalMapping) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CategoricalMapping_OneofMarshaler, _CategoricalMapping_OneofUnmarshaler, _CategoricalMapping_OneofSizer, []interface{}{
		(*CategoricalMapping_StringToInt64Map)(nil),
		(*CategoricalMapping_Int64ToStringMap)(nil),
		(*CategoricalMapping_StrValue)(nil),
		(*CategoricalMapping_Int64Value)(nil),
	}
}

func _CategoricalMapping_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CategoricalMapping)
	// MappingType
	switch x := m.MappingType.(type) {
	case *CategoricalMapping_StringToInt64Map:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StringToInt64Map); err != nil {
			return err
		}
	case *CategoricalMapping_Int64ToStringMap:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Int64ToStringMap); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CategoricalMapping.MappingType has unexpected type %T", x)
	}
	// ValueOnUnknown
	switch x := m.ValueOnUnknown.(type) {
	case *CategoricalMapping_StrValue:
		_ = b.EncodeVarint(101<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.StrValue)
	case *CategoricalMapping_Int64Value:
		_ = b.EncodeVarint(102<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.Int64Value))
	case nil:
	default:
		return fmt.Errorf("CategoricalMapping.ValueOnUnknown has unexpected type %T", x)
	}
	return nil
}

func _CategoricalMapping_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CategoricalMapping)
	switch tag {
	case 1: // MappingType.stringToInt64Map
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StringToInt64Map)
		err := b.DecodeMessage(msg)
		m.MappingType = &CategoricalMapping_StringToInt64Map{msg}
		return true, err
	case 2: // MappingType.int64ToStringMap
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Int64ToStringMap)
		err := b.DecodeMessage(msg)
		m.MappingType = &CategoricalMapping_Int64ToStringMap{msg}
		return true, err
	case 101: // ValueOnUnknown.strValue
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.ValueOnUnknown = &CategoricalMapping_StrValue{x}
		return true, err
	case 102: // ValueOnUnknown.int64Value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.ValueOnUnknown = &CategoricalMapping_Int64Value{int64(x)}
		return true, err
	default:
		return false, nil
	}
}

func _CategoricalMapping_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CategoricalMapping)
	// MappingType
	switch x := m.MappingType.(type) {
	case *CategoricalMapping_StringToInt64Map:
		s := proto.Size(x.StringToInt64Map)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CategoricalMapping_Int64ToStringMap:
		s := proto.Size(x.Int64ToStringMap)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// ValueOnUnknown
	switch x := m.ValueOnUnknown.(type) {
	case *CategoricalMapping_StrValue:
		n += proto.SizeVarint(101<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.StrValue)))
		n += len(x.StrValue)
	case *CategoricalMapping_Int64Value:
		n += proto.SizeVarint(102<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Int64Value))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*CategoricalMapping)(nil), "CoreML.CategoricalMapping")
}
func (m *CategoricalMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CategoricalMapping) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MappingType != nil {
		nn1, err := m.MappingType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	if m.ValueOnUnknown != nil {
		nn2, err := m.ValueOnUnknown.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn2
	}
	return i, nil
}

func (m *CategoricalMapping_StringToInt64Map) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.StringToInt64Map != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCategoricalMapping(dAtA, i, uint64(m.StringToInt64Map.Size()))
		n3, err := m.StringToInt64Map.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *CategoricalMapping_Int64ToStringMap) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Int64ToStringMap != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCategoricalMapping(dAtA, i, uint64(m.Int64ToStringMap.Size()))
		n4, err := m.Int64ToStringMap.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *CategoricalMapping_StrValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xaa
	i++
	dAtA[i] = 0x6
	i++
	i = encodeVarintCategoricalMapping(dAtA, i, uint64(len(m.StrValue)))
	i += copy(dAtA[i:], m.StrValue)
	return i, nil
}
func (m *CategoricalMapping_Int64Value) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xb0
	i++
	dAtA[i] = 0x6
	i++
	i = encodeVarintCategoricalMapping(dAtA, i, uint64(m.Int64Value))
	return i, nil
}
func encodeFixed64CategoricalMapping(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32CategoricalMapping(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintCategoricalMapping(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CategoricalMapping) Size() (n int) {
	var l int
	_ = l
	if m.MappingType != nil {
		n += m.MappingType.Size()
	}
	if m.ValueOnUnknown != nil {
		n += m.ValueOnUnknown.Size()
	}
	return n
}

func (m *CategoricalMapping_StringToInt64Map) Size() (n int) {
	var l int
	_ = l
	if m.StringToInt64Map != nil {
		l = m.StringToInt64Map.Size()
		n += 1 + l + sovCategoricalMapping(uint64(l))
	}
	return n
}
func (m *CategoricalMapping_Int64ToStringMap) Size() (n int) {
	var l int
	_ = l
	if m.Int64ToStringMap != nil {
		l = m.Int64ToStringMap.Size()
		n += 1 + l + sovCategoricalMapping(uint64(l))
	}
	return n
}
func (m *CategoricalMapping_StrValue) Size() (n int) {
	var l int
	_ = l
	l = len(m.StrValue)
	n += 2 + l + sovCategoricalMapping(uint64(l))
	return n
}
func (m *CategoricalMapping_Int64Value) Size() (n int) {
	var l int
	_ = l
	n += 2 + sovCategoricalMapping(uint64(m.Int64Value))
	return n
}

func sovCategoricalMapping(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCategoricalMapping(x uint64) (n int) {
	return sovCategoricalMapping(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CategoricalMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCategoricalMapping
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CategoricalMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CategoricalMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringToInt64Map", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategoricalMapping
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCategoricalMapping
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StringToInt64Map{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MappingType = &CategoricalMapping_StringToInt64Map{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64ToStringMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategoricalMapping
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCategoricalMapping
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Int64ToStringMap{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MappingType = &CategoricalMapping_Int64ToStringMap{v}
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategoricalMapping
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCategoricalMapping
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValueOnUnknown = &CategoricalMapping_StrValue{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 102:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64Value", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCategoricalMapping
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ValueOnUnknown = &CategoricalMapping_Int64Value{v}
		default:
			iNdEx = preIndex
			skippy, err := skipCategoricalMapping(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCategoricalMapping
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCategoricalMapping(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCategoricalMapping
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCategoricalMapping
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCategoricalMapping
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCategoricalMapping
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCategoricalMapping
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCategoricalMapping(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCategoricalMapping = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCategoricalMapping   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("CategoricalMapping.proto", fileDescriptorCategoricalMapping) }

var fileDescriptorCategoricalMapping = []byte{
	// 239 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x70, 0x4e, 0x2c, 0x49,
	0x4d, 0xcf, 0x2f, 0xca, 0x4c, 0x4e, 0xcc, 0xf1, 0x4d, 0x2c, 0x28, 0xc8, 0xcc, 0x4b, 0xd7, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x73, 0xce, 0x2f, 0x4a, 0xf5, 0xf5, 0x91, 0x12, 0x71, 0x49,
	0x2c, 0x49, 0x0c, 0x2e, 0x29, 0x2a, 0x4d, 0x2e, 0x29, 0x2d, 0x4a, 0x2d, 0x86, 0xc8, 0x2a, 0xb5,
	0x32, 0x71, 0x09, 0x61, 0x6a, 0x15, 0x72, 0xe3, 0x12, 0x28, 0x2e, 0x29, 0xca, 0xcc, 0x4b, 0x0f,
	0xc9, 0xf7, 0xcc, 0x2b, 0x31, 0x33, 0xf1, 0x4d, 0x2c, 0x90, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x36,
	0x92, 0xd0, 0x83, 0x98, 0xa7, 0x17, 0x8c, 0x26, 0xef, 0xc1, 0x10, 0x84, 0xa1, 0x07, 0x64, 0x4e,
	0x26, 0x88, 0x1d, 0x92, 0x0f, 0x51, 0x0e, 0x32, 0x87, 0x09, 0xd5, 0x1c, 0x4f, 0x34, 0x79, 0x90,
	0x39, 0xe8, 0x7a, 0x84, 0x64, 0xb8, 0x38, 0x8a, 0x4b, 0x8a, 0xc2, 0x12, 0x73, 0x4a, 0x53, 0x25,
	0x52, 0x15, 0x18, 0x35, 0x38, 0x3d, 0x18, 0x83, 0xe0, 0x22, 0x42, 0x0a, 0x5c, 0x5c, 0x60, 0x1d,
	0x10, 0xf9, 0x34, 0x05, 0x46, 0x0d, 0x66, 0x0f, 0xc6, 0x20, 0x24, 0x31, 0x27, 0x5e, 0x2e, 0x6e,
	0xa8, 0xd7, 0x42, 0x2a, 0x0b, 0x52, 0x9d, 0x04, 0xb8, 0xf8, 0xc0, 0xe2, 0xfe, 0x79, 0xa1, 0x79,
	0xd9, 0x79, 0xf9, 0xe5, 0x79, 0x4e, 0x42, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8,
	0xe0, 0x91, 0x1c, 0xe3, 0x84, 0xc7, 0x72, 0x0c, 0x1e, 0xcc, 0x01, 0x0c, 0x49, 0x6c, 0xe0, 0x40,
	0x32, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x9d, 0x24, 0x5d, 0xf1, 0x5e, 0x01, 0x00, 0x00,
}
