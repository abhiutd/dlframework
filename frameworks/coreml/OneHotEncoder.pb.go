// Code generated by protoc-gen-gogo.
// source: OneHotEncoder.proto
// DO NOT EDIT!

package CoreML

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Ignoring public import of StringToInt64Map from DataStructures.proto

// Ignoring public import of Int64ToStringMap from DataStructures.proto

// Ignoring public import of StringToDoubleMap from DataStructures.proto

// Ignoring public import of Int64ToDoubleMap from DataStructures.proto

// Ignoring public import of StringVector from DataStructures.proto

// Ignoring public import of Int64Vector from DataStructures.proto

// Ignoring public import of DoubleVector from DataStructures.proto

type OneHotEncoder_HandleUnknown int32

const (
	OneHotEncoder_ErrorOnUnknown OneHotEncoder_HandleUnknown = 0
	OneHotEncoder_IgnoreUnknown  OneHotEncoder_HandleUnknown = 1
)

var OneHotEncoder_HandleUnknown_name = map[int32]string{
	0: "ErrorOnUnknown",
	1: "IgnoreUnknown",
}
var OneHotEncoder_HandleUnknown_value = map[string]int32{
	"ErrorOnUnknown": 0,
	"IgnoreUnknown":  1,
}

func (x OneHotEncoder_HandleUnknown) String() string {
	return proto.EnumName(OneHotEncoder_HandleUnknown_name, int32(x))
}
func (OneHotEncoder_HandleUnknown) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorOneHotEncoder, []int{0, 0}
}

// *
// Transforms a categorical feature into an array. The array will be all
// zeros expect a single entry of one.
//
// Each categorical value will map to an index, this mapping is given by
// either the ``stringCategories`` parameter or the ``int64Categories``
// parameter.
type OneHotEncoder struct {
	// *
	// Mapping to be used for the encoding. The position of the category in
	// the below vector determines where the single one entry will be in the
	// output.
	//
	// Types that are valid to be assigned to CategoryType:
	//	*OneHotEncoder_StringCategories
	//	*OneHotEncoder_Int64Categories
	CategoryType isOneHotEncoder_CategoryType `protobuf_oneof:"CategoryType"`
	// Output can be a dictionary with only one entry, instead of an array.
	OutputSparse  bool                        `protobuf:"varint,10,opt,name=outputSparse,proto3" json:"outputSparse,omitempty"`
	HandleUnknown OneHotEncoder_HandleUnknown `protobuf:"varint,11,opt,name=handleUnknown,proto3,enum=CoreML.OneHotEncoder_HandleUnknown" json:"handleUnknown,omitempty"`
}

func (m *OneHotEncoder) Reset()                    { *m = OneHotEncoder{} }
func (m *OneHotEncoder) String() string            { return proto.CompactTextString(m) }
func (*OneHotEncoder) ProtoMessage()               {}
func (*OneHotEncoder) Descriptor() ([]byte, []int) { return fileDescriptorOneHotEncoder, []int{0} }

type isOneHotEncoder_CategoryType interface {
	isOneHotEncoder_CategoryType()
	MarshalTo([]byte) (int, error)
	Size() int
}

type OneHotEncoder_StringCategories struct {
	StringCategories *StringVector `protobuf:"bytes,1,opt,name=stringCategories,oneof"`
}
type OneHotEncoder_Int64Categories struct {
	Int64Categories *Int64Vector `protobuf:"bytes,2,opt,name=int64Categories,oneof"`
}

func (*OneHotEncoder_StringCategories) isOneHotEncoder_CategoryType() {}
func (*OneHotEncoder_Int64Categories) isOneHotEncoder_CategoryType()  {}

func (m *OneHotEncoder) GetCategoryType() isOneHotEncoder_CategoryType {
	if m != nil {
		return m.CategoryType
	}
	return nil
}

func (m *OneHotEncoder) GetStringCategories() *StringVector {
	if x, ok := m.GetCategoryType().(*OneHotEncoder_StringCategories); ok {
		return x.StringCategories
	}
	return nil
}

func (m *OneHotEncoder) GetInt64Categories() *Int64Vector {
	if x, ok := m.GetCategoryType().(*OneHotEncoder_Int64Categories); ok {
		return x.Int64Categories
	}
	return nil
}

func (m *OneHotEncoder) GetOutputSparse() bool {
	if m != nil {
		return m.OutputSparse
	}
	return false
}

func (m *OneHotEncoder) GetHandleUnknown() OneHotEncoder_HandleUnknown {
	if m != nil {
		return m.HandleUnknown
	}
	return OneHotEncoder_ErrorOnUnknown
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*OneHotEncoder) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _OneHotEncoder_OneofMarshaler, _OneHotEncoder_OneofUnmarshaler, _OneHotEncoder_OneofSizer, []interface{}{
		(*OneHotEncoder_StringCategories)(nil),
		(*OneHotEncoder_Int64Categories)(nil),
	}
}

func _OneHotEncoder_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*OneHotEncoder)
	// CategoryType
	switch x := m.CategoryType.(type) {
	case *OneHotEncoder_StringCategories:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StringCategories); err != nil {
			return err
		}
	case *OneHotEncoder_Int64Categories:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Int64Categories); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("OneHotEncoder.CategoryType has unexpected type %T", x)
	}
	return nil
}

func _OneHotEncoder_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*OneHotEncoder)
	switch tag {
	case 1: // CategoryType.stringCategories
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StringVector)
		err := b.DecodeMessage(msg)
		m.CategoryType = &OneHotEncoder_StringCategories{msg}
		return true, err
	case 2: // CategoryType.int64Categories
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Int64Vector)
		err := b.DecodeMessage(msg)
		m.CategoryType = &OneHotEncoder_Int64Categories{msg}
		return true, err
	default:
		return false, nil
	}
}

func _OneHotEncoder_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*OneHotEncoder)
	// CategoryType
	switch x := m.CategoryType.(type) {
	case *OneHotEncoder_StringCategories:
		s := proto.Size(x.StringCategories)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OneHotEncoder_Int64Categories:
		s := proto.Size(x.Int64Categories)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*OneHotEncoder)(nil), "CoreML.OneHotEncoder")
	proto.RegisterEnum("CoreML.OneHotEncoder_HandleUnknown", OneHotEncoder_HandleUnknown_name, OneHotEncoder_HandleUnknown_value)
}
func (m *OneHotEncoder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OneHotEncoder) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CategoryType != nil {
		nn1, err := m.CategoryType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	if m.OutputSparse {
		dAtA[i] = 0x50
		i++
		if m.OutputSparse {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.HandleUnknown != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintOneHotEncoder(dAtA, i, uint64(m.HandleUnknown))
	}
	return i, nil
}

func (m *OneHotEncoder_StringCategories) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.StringCategories != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOneHotEncoder(dAtA, i, uint64(m.StringCategories.Size()))
		n2, err := m.StringCategories.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *OneHotEncoder_Int64Categories) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Int64Categories != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOneHotEncoder(dAtA, i, uint64(m.Int64Categories.Size()))
		n3, err := m.Int64Categories.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func encodeFixed64OneHotEncoder(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32OneHotEncoder(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintOneHotEncoder(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *OneHotEncoder) Size() (n int) {
	var l int
	_ = l
	if m.CategoryType != nil {
		n += m.CategoryType.Size()
	}
	if m.OutputSparse {
		n += 2
	}
	if m.HandleUnknown != 0 {
		n += 1 + sovOneHotEncoder(uint64(m.HandleUnknown))
	}
	return n
}

func (m *OneHotEncoder_StringCategories) Size() (n int) {
	var l int
	_ = l
	if m.StringCategories != nil {
		l = m.StringCategories.Size()
		n += 1 + l + sovOneHotEncoder(uint64(l))
	}
	return n
}
func (m *OneHotEncoder_Int64Categories) Size() (n int) {
	var l int
	_ = l
	if m.Int64Categories != nil {
		l = m.Int64Categories.Size()
		n += 1 + l + sovOneHotEncoder(uint64(l))
	}
	return n
}

func sovOneHotEncoder(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozOneHotEncoder(x uint64) (n int) {
	return sovOneHotEncoder(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OneHotEncoder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOneHotEncoder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OneHotEncoder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OneHotEncoder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringCategories", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOneHotEncoder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOneHotEncoder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StringVector{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CategoryType = &OneHotEncoder_StringCategories{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64Categories", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOneHotEncoder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOneHotEncoder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Int64Vector{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CategoryType = &OneHotEncoder_Int64Categories{v}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputSparse", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOneHotEncoder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OutputSparse = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HandleUnknown", wireType)
			}
			m.HandleUnknown = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOneHotEncoder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HandleUnknown |= (OneHotEncoder_HandleUnknown(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOneHotEncoder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOneHotEncoder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOneHotEncoder(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOneHotEncoder
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOneHotEncoder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOneHotEncoder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthOneHotEncoder
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowOneHotEncoder
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipOneHotEncoder(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthOneHotEncoder = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOneHotEncoder   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("OneHotEncoder.proto", fileDescriptorOneHotEncoder) }

var fileDescriptorOneHotEncoder = []byte{
	// 278 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x40, 0xb3, 0x15, 0x8a, 0x6c, 0x9b, 0x18, 0xb7, 0x3d, 0x04, 0x0f, 0x21, 0xc4, 0x4b, 0x4e,
	0x39, 0x54, 0xe9, 0x55, 0x48, 0x2d, 0x24, 0xa0, 0x54, 0x12, 0xf5, 0x1e, 0xd3, 0x25, 0x06, 0x65,
	0x27, 0x4c, 0x26, 0x48, 0xff, 0xc2, 0xcf, 0x12, 0xbc, 0xf8, 0x09, 0x12, 0x7f, 0x44, 0x4c, 0x1b,
	0x69, 0xf4, 0x3a, 0xef, 0xcd, 0xdb, 0x65, 0xf8, 0x64, 0xa5, 0x64, 0x08, 0xb4, 0x54, 0x19, 0xac,
	0x25, 0xfa, 0x25, 0x02, 0x81, 0x18, 0x2e, 0x00, 0xe5, 0xf5, 0xd5, 0xc9, 0xf4, 0x32, 0xa5, 0x34,
	0x21, 0xac, 0x33, 0xaa, 0x51, 0x56, 0x5b, 0xea, 0xbe, 0x0f, 0xb8, 0xde, 0xdb, 0x12, 0x01, 0x37,
	0x2b, 0xc2, 0x42, 0xe5, 0x8b, 0x94, 0x64, 0x0e, 0x58, 0xc8, 0xca, 0x62, 0x0e, 0xf3, 0x46, 0xb3,
	0xa9, 0xbf, 0x4d, 0xf9, 0x49, 0xcb, 0xef, 0x65, 0x46, 0x80, 0xa1, 0x16, 0xff, 0xf3, 0xc5, 0x05,
	0x3f, 0x2a, 0x14, 0xcd, 0xcf, 0xf7, 0x12, 0x83, 0x36, 0x31, 0xe9, 0x12, 0xd1, 0x0f, 0xfe, 0x2d,
	0xfc, 0xb5, 0x85, 0xcb, 0xc7, 0x50, 0x53, 0x59, 0x53, 0x52, 0xa6, 0x58, 0x49, 0x8b, 0x3b, 0xcc,
	0x3b, 0x8c, 0x7b, 0x33, 0x11, 0x71, 0xfd, 0x31, 0x55, 0xeb, 0x67, 0x79, 0xa7, 0x9e, 0x14, 0xbc,
	0x28, 0x6b, 0xe4, 0x30, 0xcf, 0x98, 0x9d, 0x76, 0x4f, 0xf4, 0x8f, 0x11, 0xee, 0xab, 0x71, 0x7f,
	0xd3, 0x9d, 0x73, 0xbd, 0xc7, 0x85, 0xe0, 0xc6, 0x12, 0x11, 0x70, 0xa5, 0x76, 0x13, 0x53, 0x13,
	0xc7, 0x5c, 0x8f, 0x72, 0x05, 0xd8, 0x49, 0x26, 0x0b, 0x0c, 0x3e, 0xde, 0x7d, 0x7a, 0x73, 0xbb,
	0x29, 0x65, 0x20, 0xde, 0x1a, 0x9b, 0x7d, 0x34, 0x36, 0xfb, 0x6c, 0x6c, 0xf6, 0xfa, 0x65, 0x6b,
	0xe1, 0xc1, 0x8d, 0xf6, 0x30, 0x6c, 0x4f, 0x7d, 0xf6, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xb9, 0xc5,
	0xb9, 0x72, 0x9f, 0x01, 0x00, 0x00,
}
