// Code generated by protoc-gen-gogo.
// source: Normalizer.proto
// DO NOT EDIT!

package CoreML

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// *
// There are three normalization modes,
// which have the corresponding formulas:
//
// Max
//     .. math::
//         max(x_i)
//
// L1
//     .. math::
//         z = ||x||_1 = \sum_{i=1}^{n} |x_i|
//
// L2
//     .. math::
//         z = ||x||_2 = \sqrt{\sum_{i=1}^{n} x_i^2}
type Normalizer_NormType int32

const (
	Normalizer_LMax Normalizer_NormType = 0
	Normalizer_L1   Normalizer_NormType = 1
	Normalizer_L2   Normalizer_NormType = 2
)

var Normalizer_NormType_name = map[int32]string{
	0: "LMax",
	1: "L1",
	2: "L2",
}
var Normalizer_NormType_value = map[string]int32{
	"LMax": 0,
	"L1":   1,
	"L2":   2,
}

func (x Normalizer_NormType) String() string {
	return proto.EnumName(Normalizer_NormType_name, int32(x))
}
func (Normalizer_NormType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorNormalizer, []int{0, 0}
}

// *
// A normalization preprocessor.
type Normalizer struct {
	NormType Normalizer_NormType `protobuf:"varint,1,opt,name=normType,proto3,enum=CoreML.Normalizer_NormType" json:"normType,omitempty"`
}

func (m *Normalizer) Reset()                    { *m = Normalizer{} }
func (m *Normalizer) String() string            { return proto.CompactTextString(m) }
func (*Normalizer) ProtoMessage()               {}
func (*Normalizer) Descriptor() ([]byte, []int) { return fileDescriptorNormalizer, []int{0} }

func (m *Normalizer) GetNormType() Normalizer_NormType {
	if m != nil {
		return m.NormType
	}
	return Normalizer_LMax
}

func init() {
	proto.RegisterType((*Normalizer)(nil), "CoreML.Normalizer")
	proto.RegisterEnum("CoreML.Normalizer_NormType", Normalizer_NormType_name, Normalizer_NormType_value)
}
func (m *Normalizer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Normalizer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NormType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNormalizer(dAtA, i, uint64(m.NormType))
	}
	return i, nil
}

func encodeFixed64Normalizer(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Normalizer(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintNormalizer(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Normalizer) Size() (n int) {
	var l int
	_ = l
	if m.NormType != 0 {
		n += 1 + sovNormalizer(uint64(m.NormType))
	}
	return n
}

func sovNormalizer(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozNormalizer(x uint64) (n int) {
	return sovNormalizer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Normalizer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNormalizer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Normalizer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Normalizer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NormType", wireType)
			}
			m.NormType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNormalizer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NormType |= (Normalizer_NormType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNormalizer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNormalizer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNormalizer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNormalizer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNormalizer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNormalizer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthNormalizer
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowNormalizer
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipNormalizer(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthNormalizer = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNormalizer   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("Normalizer.proto", fileDescriptorNormalizer) }

var fileDescriptorNormalizer = []byte{
	// 143 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xf0, 0xcb, 0x2f, 0xca,
	0x4d, 0xcc, 0xc9, 0xac, 0x4a, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x73, 0xce,
	0x2f, 0x4a, 0xf5, 0xf5, 0x51, 0xca, 0xe6, 0xe2, 0x42, 0xc8, 0x09, 0x99, 0x73, 0x71, 0xe4, 0xe5,
	0x17, 0xe5, 0x86, 0x54, 0x16, 0xa4, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0xf0, 0x19, 0x49, 0xeb, 0x41,
	0x14, 0xea, 0x21, 0x99, 0xe0, 0x07, 0x55, 0x12, 0x04, 0x57, 0xac, 0xa4, 0xc2, 0xc5, 0x01, 0x13,
	0x15, 0xe2, 0xe0, 0x62, 0xf1, 0xf1, 0x4d, 0xac, 0x10, 0x60, 0x10, 0x62, 0xe3, 0x62, 0xf2, 0x31,
	0x14, 0x60, 0x04, 0xd3, 0x46, 0x02, 0x4c, 0x4e, 0x42, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24,
	0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x84, 0xc7, 0x72, 0x0c, 0x1e, 0xcc, 0x49, 0x6c, 0x60, 0xf7,
	0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x82, 0x32, 0x79, 0xf0, 0xa3, 0x00, 0x00, 0x00,
}
