// Code generated by protoc-gen-gogo.
// source: GLMRegressor.proto
// DO NOT EDIT!

package CoreML

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type GLMRegressor_PostEvaluationTransform int32

const (
	GLMRegressor_NoTransform GLMRegressor_PostEvaluationTransform = 0
	GLMRegressor_Logit       GLMRegressor_PostEvaluationTransform = 1
	GLMRegressor_Probit      GLMRegressor_PostEvaluationTransform = 2
)

var GLMRegressor_PostEvaluationTransform_name = map[int32]string{
	0: "NoTransform",
	1: "Logit",
	2: "Probit",
}
var GLMRegressor_PostEvaluationTransform_value = map[string]int32{
	"NoTransform": 0,
	"Logit":       1,
	"Probit":      2,
}

func (x GLMRegressor_PostEvaluationTransform) String() string {
	return proto.EnumName(GLMRegressor_PostEvaluationTransform_name, int32(x))
}
func (GLMRegressor_PostEvaluationTransform) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorGLMRegressor, []int{0, 0}
}

// *
// A generalized linear model regressor.
type GLMRegressor struct {
	Weights                 []*GLMRegressor_DoubleArray          `protobuf:"bytes,1,rep,name=weights" json:"weights,omitempty"`
	Offset                  []float64                            `protobuf:"fixed64,2,rep,packed,name=offset" json:"offset,omitempty"`
	PostEvaluationTransform GLMRegressor_PostEvaluationTransform `protobuf:"varint,3,opt,name=postEvaluationTransform,proto3,enum=CoreML.GLMRegressor_PostEvaluationTransform" json:"postEvaluationTransform,omitempty"`
}

func (m *GLMRegressor) Reset()                    { *m = GLMRegressor{} }
func (m *GLMRegressor) String() string            { return proto.CompactTextString(m) }
func (*GLMRegressor) ProtoMessage()               {}
func (*GLMRegressor) Descriptor() ([]byte, []int) { return fileDescriptorGLMRegressor, []int{0} }

func (m *GLMRegressor) GetWeights() []*GLMRegressor_DoubleArray {
	if m != nil {
		return m.Weights
	}
	return nil
}

func (m *GLMRegressor) GetOffset() []float64 {
	if m != nil {
		return m.Offset
	}
	return nil
}

func (m *GLMRegressor) GetPostEvaluationTransform() GLMRegressor_PostEvaluationTransform {
	if m != nil {
		return m.PostEvaluationTransform
	}
	return GLMRegressor_NoTransform
}

type GLMRegressor_DoubleArray struct {
	Value []float64 `protobuf:"fixed64,1,rep,packed,name=value" json:"value,omitempty"`
}

func (m *GLMRegressor_DoubleArray) Reset()         { *m = GLMRegressor_DoubleArray{} }
func (m *GLMRegressor_DoubleArray) String() string { return proto.CompactTextString(m) }
func (*GLMRegressor_DoubleArray) ProtoMessage()    {}
func (*GLMRegressor_DoubleArray) Descriptor() ([]byte, []int) {
	return fileDescriptorGLMRegressor, []int{0, 0}
}

func (m *GLMRegressor_DoubleArray) GetValue() []float64 {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterType((*GLMRegressor)(nil), "CoreML.GLMRegressor")
	proto.RegisterType((*GLMRegressor_DoubleArray)(nil), "CoreML.GLMRegressor.DoubleArray")
	proto.RegisterEnum("CoreML.GLMRegressor_PostEvaluationTransform", GLMRegressor_PostEvaluationTransform_name, GLMRegressor_PostEvaluationTransform_value)
}
func (m *GLMRegressor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GLMRegressor) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Weights) > 0 {
		for _, msg := range m.Weights {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGLMRegressor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Offset) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGLMRegressor(dAtA, i, uint64(len(m.Offset)*8))
		for _, num := range m.Offset {
			f1 := math.Float64bits(float64(num))
			dAtA[i] = uint8(f1)
			i++
			dAtA[i] = uint8(f1 >> 8)
			i++
			dAtA[i] = uint8(f1 >> 16)
			i++
			dAtA[i] = uint8(f1 >> 24)
			i++
			dAtA[i] = uint8(f1 >> 32)
			i++
			dAtA[i] = uint8(f1 >> 40)
			i++
			dAtA[i] = uint8(f1 >> 48)
			i++
			dAtA[i] = uint8(f1 >> 56)
			i++
		}
	}
	if m.PostEvaluationTransform != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGLMRegressor(dAtA, i, uint64(m.PostEvaluationTransform))
	}
	return i, nil
}

func (m *GLMRegressor_DoubleArray) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GLMRegressor_DoubleArray) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGLMRegressor(dAtA, i, uint64(len(m.Value)*8))
		for _, num := range m.Value {
			f2 := math.Float64bits(float64(num))
			dAtA[i] = uint8(f2)
			i++
			dAtA[i] = uint8(f2 >> 8)
			i++
			dAtA[i] = uint8(f2 >> 16)
			i++
			dAtA[i] = uint8(f2 >> 24)
			i++
			dAtA[i] = uint8(f2 >> 32)
			i++
			dAtA[i] = uint8(f2 >> 40)
			i++
			dAtA[i] = uint8(f2 >> 48)
			i++
			dAtA[i] = uint8(f2 >> 56)
			i++
		}
	}
	return i, nil
}

func encodeFixed64GLMRegressor(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32GLMRegressor(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintGLMRegressor(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GLMRegressor) Size() (n int) {
	var l int
	_ = l
	if len(m.Weights) > 0 {
		for _, e := range m.Weights {
			l = e.Size()
			n += 1 + l + sovGLMRegressor(uint64(l))
		}
	}
	if len(m.Offset) > 0 {
		n += 1 + sovGLMRegressor(uint64(len(m.Offset)*8)) + len(m.Offset)*8
	}
	if m.PostEvaluationTransform != 0 {
		n += 1 + sovGLMRegressor(uint64(m.PostEvaluationTransform))
	}
	return n
}

func (m *GLMRegressor_DoubleArray) Size() (n int) {
	var l int
	_ = l
	if len(m.Value) > 0 {
		n += 1 + sovGLMRegressor(uint64(len(m.Value)*8)) + len(m.Value)*8
	}
	return n
}

func sovGLMRegressor(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGLMRegressor(x uint64) (n int) {
	return sovGLMRegressor(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GLMRegressor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGLMRegressor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GLMRegressor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GLMRegressor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGLMRegressor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGLMRegressor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Weights = append(m.Weights, &GLMRegressor_DoubleArray{})
			if err := m.Weights[len(m.Weights)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += 8
				v = uint64(dAtA[iNdEx-8])
				v |= uint64(dAtA[iNdEx-7]) << 8
				v |= uint64(dAtA[iNdEx-6]) << 16
				v |= uint64(dAtA[iNdEx-5]) << 24
				v |= uint64(dAtA[iNdEx-4]) << 32
				v |= uint64(dAtA[iNdEx-3]) << 40
				v |= uint64(dAtA[iNdEx-2]) << 48
				v |= uint64(dAtA[iNdEx-1]) << 56
				v2 := float64(math.Float64frombits(v))
				m.Offset = append(m.Offset, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGLMRegressor
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGLMRegressor
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					iNdEx += 8
					v = uint64(dAtA[iNdEx-8])
					v |= uint64(dAtA[iNdEx-7]) << 8
					v |= uint64(dAtA[iNdEx-6]) << 16
					v |= uint64(dAtA[iNdEx-5]) << 24
					v |= uint64(dAtA[iNdEx-4]) << 32
					v |= uint64(dAtA[iNdEx-3]) << 40
					v |= uint64(dAtA[iNdEx-2]) << 48
					v |= uint64(dAtA[iNdEx-1]) << 56
					v2 := float64(math.Float64frombits(v))
					m.Offset = append(m.Offset, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostEvaluationTransform", wireType)
			}
			m.PostEvaluationTransform = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGLMRegressor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PostEvaluationTransform |= (GLMRegressor_PostEvaluationTransform(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGLMRegressor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGLMRegressor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GLMRegressor_DoubleArray) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGLMRegressor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DoubleArray: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DoubleArray: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += 8
				v = uint64(dAtA[iNdEx-8])
				v |= uint64(dAtA[iNdEx-7]) << 8
				v |= uint64(dAtA[iNdEx-6]) << 16
				v |= uint64(dAtA[iNdEx-5]) << 24
				v |= uint64(dAtA[iNdEx-4]) << 32
				v |= uint64(dAtA[iNdEx-3]) << 40
				v |= uint64(dAtA[iNdEx-2]) << 48
				v |= uint64(dAtA[iNdEx-1]) << 56
				v2 := float64(math.Float64frombits(v))
				m.Value = append(m.Value, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGLMRegressor
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGLMRegressor
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					iNdEx += 8
					v = uint64(dAtA[iNdEx-8])
					v |= uint64(dAtA[iNdEx-7]) << 8
					v |= uint64(dAtA[iNdEx-6]) << 16
					v |= uint64(dAtA[iNdEx-5]) << 24
					v |= uint64(dAtA[iNdEx-4]) << 32
					v |= uint64(dAtA[iNdEx-3]) << 40
					v |= uint64(dAtA[iNdEx-2]) << 48
					v |= uint64(dAtA[iNdEx-1]) << 56
					v2 := float64(math.Float64frombits(v))
					m.Value = append(m.Value, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGLMRegressor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGLMRegressor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGLMRegressor(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGLMRegressor
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGLMRegressor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGLMRegressor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGLMRegressor
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGLMRegressor
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGLMRegressor(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGLMRegressor = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGLMRegressor   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("GLMRegressor.proto", fileDescriptorGLMRegressor) }

var fileDescriptorGLMRegressor = []byte{
	// 246 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x72, 0xf7, 0xf1, 0x0d,
	0x4a, 0x4d, 0x2f, 0x4a, 0x2d, 0x2e, 0xce, 0x2f, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62,
	0x73, 0xce, 0x2f, 0x4a, 0xf5, 0xf5, 0x51, 0xda, 0xc4, 0xc4, 0xc5, 0x83, 0x2c, 0x2d, 0x64, 0xc5,
	0xc5, 0x5e, 0x9e, 0x9a, 0x99, 0x9e, 0x51, 0x52, 0x2c, 0xc1, 0xa8, 0xc0, 0xac, 0xc1, 0x6d, 0xa4,
	0xa0, 0x07, 0x51, 0xaa, 0x87, 0x62, 0x8a, 0x4b, 0x7e, 0x69, 0x52, 0x4e, 0xaa, 0x63, 0x51, 0x51,
	0x62, 0x65, 0x10, 0x4c, 0x83, 0x90, 0x18, 0x17, 0x5b, 0x7e, 0x5a, 0x5a, 0x71, 0x6a, 0x89, 0x04,
	0x93, 0x02, 0xb3, 0x06, 0x63, 0x10, 0x94, 0x27, 0x94, 0xc6, 0x25, 0x5e, 0x90, 0x5f, 0x5c, 0xe2,
	0x5a, 0x96, 0x98, 0x53, 0x9a, 0x58, 0x92, 0x99, 0x9f, 0x17, 0x52, 0x94, 0x98, 0x57, 0x9c, 0x96,
	0x5f, 0x94, 0x2b, 0xc1, 0xac, 0xc0, 0xa8, 0xc1, 0x67, 0xa4, 0x83, 0xd5, 0x8e, 0x00, 0xec, 0x7a,
	0x82, 0x70, 0x19, 0x26, 0xa5, 0xcc, 0xc5, 0x8d, 0xe4, 0x2e, 0x21, 0x11, 0x2e, 0x56, 0x90, 0xa2,
	0x54, 0xb0, 0x47, 0x18, 0x83, 0x20, 0x1c, 0x25, 0x47, 0x2e, 0x71, 0x1c, 0x06, 0x0b, 0xf1, 0x73,
	0x71, 0xfb, 0xe5, 0xc3, 0xb9, 0x02, 0x0c, 0x42, 0x9c, 0x5c, 0xac, 0x3e, 0xf9, 0xe9, 0x99, 0x25,
	0x02, 0x8c, 0x42, 0x5c, 0x5c, 0x6c, 0x01, 0x45, 0xf9, 0x49, 0x99, 0x25, 0x02, 0x4c, 0x4e, 0x42,
	0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x84, 0xc7, 0x72,
	0x0c, 0x1e, 0xcc, 0x49, 0x6c, 0xe0, 0x70, 0x35, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x28, 0x11,
	0x6f, 0x22, 0x6d, 0x01, 0x00, 0x00,
}
