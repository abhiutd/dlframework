// Code generated by protoc-gen-gogo.
// source: FeatureVectorizer.proto
// DO NOT EDIT!

package CoreML

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// *
// A FeatureVectorizer puts one or more features into a single array.
//
// The ordering of features in the output array is determined by
// ``inputList``.
//
// ``inputDimensions`` is a zero based index.
type FeatureVectorizer struct {
	InputList []*FeatureVectorizer_InputColumn `protobuf:"bytes,1,rep,name=inputList" json:"inputList,omitempty"`
}

func (m *FeatureVectorizer) Reset()         { *m = FeatureVectorizer{} }
func (m *FeatureVectorizer) String() string { return proto.CompactTextString(m) }
func (*FeatureVectorizer) ProtoMessage()    {}
func (*FeatureVectorizer) Descriptor() ([]byte, []int) {
	return fileDescriptorFeatureVectorizer, []int{0}
}

func (m *FeatureVectorizer) GetInputList() []*FeatureVectorizer_InputColumn {
	if m != nil {
		return m.InputList
	}
	return nil
}

type FeatureVectorizer_InputColumn struct {
	InputColumn     string `protobuf:"bytes,1,opt,name=inputColumn,proto3" json:"inputColumn,omitempty"`
	InputDimensions uint64 `protobuf:"varint,2,opt,name=inputDimensions,proto3" json:"inputDimensions,omitempty"`
}

func (m *FeatureVectorizer_InputColumn) Reset()         { *m = FeatureVectorizer_InputColumn{} }
func (m *FeatureVectorizer_InputColumn) String() string { return proto.CompactTextString(m) }
func (*FeatureVectorizer_InputColumn) ProtoMessage()    {}
func (*FeatureVectorizer_InputColumn) Descriptor() ([]byte, []int) {
	return fileDescriptorFeatureVectorizer, []int{0, 0}
}

func (m *FeatureVectorizer_InputColumn) GetInputColumn() string {
	if m != nil {
		return m.InputColumn
	}
	return ""
}

func (m *FeatureVectorizer_InputColumn) GetInputDimensions() uint64 {
	if m != nil {
		return m.InputDimensions
	}
	return 0
}

func init() {
	proto.RegisterType((*FeatureVectorizer)(nil), "CoreML.FeatureVectorizer")
	proto.RegisterType((*FeatureVectorizer_InputColumn)(nil), "CoreML.FeatureVectorizer.InputColumn")
}
func (m *FeatureVectorizer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeatureVectorizer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.InputList) > 0 {
		for _, msg := range m.InputList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintFeatureVectorizer(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FeatureVectorizer_InputColumn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeatureVectorizer_InputColumn) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.InputColumn) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFeatureVectorizer(dAtA, i, uint64(len(m.InputColumn)))
		i += copy(dAtA[i:], m.InputColumn)
	}
	if m.InputDimensions != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFeatureVectorizer(dAtA, i, uint64(m.InputDimensions))
	}
	return i, nil
}

func encodeFixed64FeatureVectorizer(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32FeatureVectorizer(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintFeatureVectorizer(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *FeatureVectorizer) Size() (n int) {
	var l int
	_ = l
	if len(m.InputList) > 0 {
		for _, e := range m.InputList {
			l = e.Size()
			n += 1 + l + sovFeatureVectorizer(uint64(l))
		}
	}
	return n
}

func (m *FeatureVectorizer_InputColumn) Size() (n int) {
	var l int
	_ = l
	l = len(m.InputColumn)
	if l > 0 {
		n += 1 + l + sovFeatureVectorizer(uint64(l))
	}
	if m.InputDimensions != 0 {
		n += 1 + sovFeatureVectorizer(uint64(m.InputDimensions))
	}
	return n
}

func sovFeatureVectorizer(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozFeatureVectorizer(x uint64) (n int) {
	return sovFeatureVectorizer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FeatureVectorizer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeatureVectorizer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeatureVectorizer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeatureVectorizer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatureVectorizer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFeatureVectorizer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InputList = append(m.InputList, &FeatureVectorizer_InputColumn{})
			if err := m.InputList[len(m.InputList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFeatureVectorizer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFeatureVectorizer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeatureVectorizer_InputColumn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeatureVectorizer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InputColumn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InputColumn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputColumn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatureVectorizer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeatureVectorizer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InputColumn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputDimensions", wireType)
			}
			m.InputDimensions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatureVectorizer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InputDimensions |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFeatureVectorizer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFeatureVectorizer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFeatureVectorizer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFeatureVectorizer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFeatureVectorizer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFeatureVectorizer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthFeatureVectorizer
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFeatureVectorizer
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFeatureVectorizer(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFeatureVectorizer = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFeatureVectorizer   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("FeatureVectorizer.proto", fileDescriptorFeatureVectorizer) }

var fileDescriptorFeatureVectorizer = []byte{
	// 176 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x77, 0x4b, 0x4d, 0x2c,
	0x29, 0x2d, 0x4a, 0x0d, 0x4b, 0x4d, 0x2e, 0xc9, 0x2f, 0xca, 0xac, 0x4a, 0x2d, 0xd2, 0x2b, 0x28,
	0xca, 0x2f, 0xc9, 0x17, 0x62, 0x73, 0xce, 0x2f, 0x4a, 0xf5, 0xf5, 0x51, 0xda, 0xcc, 0xc8, 0x25,
	0x88, 0xa1, 0x46, 0xc8, 0x99, 0x8b, 0x33, 0x33, 0xaf, 0xa0, 0xb4, 0xc4, 0x27, 0xb3, 0xb8, 0x44,
	0x82, 0x51, 0x81, 0x59, 0x83, 0xdb, 0x48, 0x55, 0x0f, 0xa2, 0x43, 0x0f, 0xd3, 0x44, 0x4f, 0x90,
	0x52, 0xe7, 0xfc, 0x9c, 0xd2, 0xdc, 0xbc, 0x20, 0x84, 0x3e, 0xa9, 0x48, 0x2e, 0x6e, 0x24, 0x19,
	0x21, 0x05, 0x2e, 0xee, 0x4c, 0x04, 0x57, 0x82, 0x51, 0x81, 0x51, 0x83, 0x33, 0x08, 0x59, 0x48,
	0x48, 0x83, 0x8b, 0x1f, 0xcc, 0x75, 0xc9, 0xcc, 0x4d, 0xcd, 0x2b, 0xce, 0xcc, 0xcf, 0x2b, 0x96,
	0x60, 0x52, 0x60, 0xd4, 0x60, 0x09, 0x42, 0x17, 0x76, 0x12, 0x3a, 0xf1, 0x48, 0x8e, 0xf1, 0xc2,
	0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x27, 0x3c, 0x96, 0x63, 0xf0, 0x60, 0x4e, 0x62, 0x03,
	0x7b, 0xcc, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x71, 0x24, 0x84, 0x2f, 0xf3, 0x00, 0x00, 0x00,
}
