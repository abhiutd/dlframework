// Code generated by protoc-gen-gogo.
// source: DictVectorizer.proto
// DO NOT EDIT!

package CoreML

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Ignoring public import of StringToInt64Map from DataStructures.proto

// Ignoring public import of Int64ToStringMap from DataStructures.proto

// Ignoring public import of StringToDoubleMap from DataStructures.proto

// Ignoring public import of Int64ToDoubleMap from DataStructures.proto

// Ignoring public import of StringVector from DataStructures.proto

// Ignoring public import of Int64Vector from DataStructures.proto

// Ignoring public import of DoubleVector from DataStructures.proto

// *
// Uses an index mapping to convert a dictionary to an array.
//
// The output array will be equal in length to the index mapping vector
// parameter. All keys in the input dictionary must be present in the index
// mapping vector.
//
// For each item in the input dictionary, insert its value in the ouput array.
// The position of the insertion is determined by the position of the item's key
// in the index mapping. Any keys not present in the input dictionary, will be
// zero in the output array.
//
// For example: if the ``stringToIndex`` paramter is set to ``["a", "c", "b",
// "z"]``, then an input of ``{"a": 4, "c": 8}`` will produce an output of ``[4,
// 8, 0, 0]``.
//
type DictVectorizer struct {
	// Types that are valid to be assigned to Map:
	//	*DictVectorizer_StringToIndex
	//	*DictVectorizer_Int64ToIndex
	Map isDictVectorizer_Map `protobuf_oneof:"Map"`
}

func (m *DictVectorizer) Reset()                    { *m = DictVectorizer{} }
func (m *DictVectorizer) String() string            { return proto.CompactTextString(m) }
func (*DictVectorizer) ProtoMessage()               {}
func (*DictVectorizer) Descriptor() ([]byte, []int) { return fileDescriptorDictVectorizer, []int{0} }

type isDictVectorizer_Map interface {
	isDictVectorizer_Map()
	MarshalTo([]byte) (int, error)
	Size() int
}

type DictVectorizer_StringToIndex struct {
	StringToIndex *StringVector `protobuf:"bytes,1,opt,name=stringToIndex,oneof"`
}
type DictVectorizer_Int64ToIndex struct {
	Int64ToIndex *Int64Vector `protobuf:"bytes,2,opt,name=int64ToIndex,oneof"`
}

func (*DictVectorizer_StringToIndex) isDictVectorizer_Map() {}
func (*DictVectorizer_Int64ToIndex) isDictVectorizer_Map()  {}

func (m *DictVectorizer) GetMap() isDictVectorizer_Map {
	if m != nil {
		return m.Map
	}
	return nil
}

func (m *DictVectorizer) GetStringToIndex() *StringVector {
	if x, ok := m.GetMap().(*DictVectorizer_StringToIndex); ok {
		return x.StringToIndex
	}
	return nil
}

func (m *DictVectorizer) GetInt64ToIndex() *Int64Vector {
	if x, ok := m.GetMap().(*DictVectorizer_Int64ToIndex); ok {
		return x.Int64ToIndex
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*DictVectorizer) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _DictVectorizer_OneofMarshaler, _DictVectorizer_OneofUnmarshaler, _DictVectorizer_OneofSizer, []interface{}{
		(*DictVectorizer_StringToIndex)(nil),
		(*DictVectorizer_Int64ToIndex)(nil),
	}
}

func _DictVectorizer_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*DictVectorizer)
	// Map
	switch x := m.Map.(type) {
	case *DictVectorizer_StringToIndex:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StringToIndex); err != nil {
			return err
		}
	case *DictVectorizer_Int64ToIndex:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Int64ToIndex); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("DictVectorizer.Map has unexpected type %T", x)
	}
	return nil
}

func _DictVectorizer_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*DictVectorizer)
	switch tag {
	case 1: // Map.stringToIndex
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StringVector)
		err := b.DecodeMessage(msg)
		m.Map = &DictVectorizer_StringToIndex{msg}
		return true, err
	case 2: // Map.int64ToIndex
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Int64Vector)
		err := b.DecodeMessage(msg)
		m.Map = &DictVectorizer_Int64ToIndex{msg}
		return true, err
	default:
		return false, nil
	}
}

func _DictVectorizer_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*DictVectorizer)
	// Map
	switch x := m.Map.(type) {
	case *DictVectorizer_StringToIndex:
		s := proto.Size(x.StringToIndex)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DictVectorizer_Int64ToIndex:
		s := proto.Size(x.Int64ToIndex)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*DictVectorizer)(nil), "CoreML.DictVectorizer")
}
func (m *DictVectorizer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DictVectorizer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Map != nil {
		nn1, err := m.Map.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *DictVectorizer_StringToIndex) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.StringToIndex != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDictVectorizer(dAtA, i, uint64(m.StringToIndex.Size()))
		n2, err := m.StringToIndex.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *DictVectorizer_Int64ToIndex) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Int64ToIndex != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDictVectorizer(dAtA, i, uint64(m.Int64ToIndex.Size()))
		n3, err := m.Int64ToIndex.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func encodeFixed64DictVectorizer(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32DictVectorizer(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintDictVectorizer(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DictVectorizer) Size() (n int) {
	var l int
	_ = l
	if m.Map != nil {
		n += m.Map.Size()
	}
	return n
}

func (m *DictVectorizer_StringToIndex) Size() (n int) {
	var l int
	_ = l
	if m.StringToIndex != nil {
		l = m.StringToIndex.Size()
		n += 1 + l + sovDictVectorizer(uint64(l))
	}
	return n
}
func (m *DictVectorizer_Int64ToIndex) Size() (n int) {
	var l int
	_ = l
	if m.Int64ToIndex != nil {
		l = m.Int64ToIndex.Size()
		n += 1 + l + sovDictVectorizer(uint64(l))
	}
	return n
}

func sovDictVectorizer(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDictVectorizer(x uint64) (n int) {
	return sovDictVectorizer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DictVectorizer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDictVectorizer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DictVectorizer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DictVectorizer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringToIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDictVectorizer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDictVectorizer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StringVector{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Map = &DictVectorizer_StringToIndex{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64ToIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDictVectorizer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDictVectorizer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Int64Vector{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Map = &DictVectorizer_Int64ToIndex{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDictVectorizer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDictVectorizer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDictVectorizer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDictVectorizer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDictVectorizer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDictVectorizer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDictVectorizer
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDictVectorizer
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDictVectorizer(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDictVectorizer = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDictVectorizer   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("DictVectorizer.proto", fileDescriptorDictVectorizer) }

var fileDescriptorDictVectorizer = []byte{
	// 178 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x71, 0xc9, 0x4c, 0x2e,
	0x09, 0x4b, 0x4d, 0x2e, 0xc9, 0x2f, 0xca, 0xac, 0x4a, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0x62, 0x73, 0xce, 0x2f, 0x4a, 0xf5, 0xf5, 0x91, 0x12, 0x71, 0x49, 0x2c, 0x49, 0x0c, 0x2e,
	0x29, 0x2a, 0x4d, 0x2e, 0x29, 0x2d, 0x4a, 0x2d, 0x86, 0xc8, 0x2a, 0x4d, 0x60, 0xe4, 0xe2, 0x43,
	0xd5, 0x26, 0x64, 0xc3, 0xc5, 0x5b, 0x5c, 0x52, 0x94, 0x99, 0x97, 0x1e, 0x92, 0xef, 0x99, 0x97,
	0x92, 0x5a, 0x21, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x6d, 0x24, 0xa2, 0x07, 0x31, 0x48, 0x2f, 0x18,
	0x2c, 0x09, 0xd1, 0xe0, 0xc1, 0x10, 0x84, 0xaa, 0x58, 0xc8, 0x92, 0x8b, 0x27, 0x33, 0xaf, 0xc4,
	0xcc, 0x04, 0xa6, 0x99, 0x09, 0xac, 0x59, 0x18, 0xa6, 0xd9, 0x13, 0x24, 0x07, 0xd7, 0x8b, 0xa2,
	0xd4, 0x89, 0x95, 0x8b, 0xd9, 0x37, 0xb1, 0xc0, 0x49, 0xe8, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f,
	0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e, 0xc1, 0x83, 0x39, 0x80, 0x21, 0x89,
	0x0d, 0xec, 0x5e, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x24, 0xae, 0x9f, 0xe6, 0xe5, 0x00,
	0x00, 0x00,
}
