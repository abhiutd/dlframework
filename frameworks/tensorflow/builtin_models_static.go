// Code generated by go-bindata.
// sources:
// frameworks/tensorflow/builtin_models/MobileNet_v1_0.25_128.yml
// frameworks/tensorflow/builtin_models/MobileNet_v1_0.25_224.yml
// frameworks/tensorflow/builtin_models/MobileNet_v1_0.50_128.yml
// frameworks/tensorflow/builtin_models/MobileNet_v1_0.50_224.yml
// frameworks/tensorflow/builtin_models/MobileNet_v1_0.75_128.yml
// frameworks/tensorflow/builtin_models/MobileNet_v1_0.75_224.yml
// frameworks/tensorflow/builtin_models/MobileNet_v1_1.0_128.yml
// frameworks/tensorflow/builtin_models/MobileNet_v1_1.0_224.yml
// frameworks/tensorflow/builtin_models/inception.yml
// frameworks/tensorflow/builtin_models/resnet152.yaml
// frameworks/tensorflow/builtin_models/resnet50.yml
// frameworks/tensorflow/builtin_models/vgg19.yml
// DO NOT EDIT!

package tensorflow

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _mobilenet_v1_025_128Yml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xbb\x72\xdb\x30\x10\xec\xf1\x15\xf7\x01\x16\x28\xca\xb2\xec\x61\x91\x2a\x4d\x8a\xd8\x8d\xbb\x4c\x86\x73\x02\x8f\x22\x62\x10\xc0\x1c\x0e\x7a\xb8\xc8\xb7\x67\x00\x6a\xfc\x98\x34\x6e\x38\x3c\x72\x77\x0f\xbb\x77\xf0\x38\x53\x07\x3f\xc3\xde\x3a\x7a\x24\xe9\x8f\x6d\xbf\xd6\x9b\xbb\xbe\xdd\x3c\xa8\x91\x71\xa6\x53\xe0\x97\x4e\x01\x2c\xc0\x67\xf2\x29\xf0\xe8\xc2\x49\x01\x1c\x89\x93\x0d\xbe\x83\xbf\xad\x6e\xf5\x59\xbd\xd5\xad\x5e\x2b\x13\xbc\xa0\xf5\xc4\x85\x8c\xf3\xb0\xdb\x96\x17\x80\x43\xcc\x1d\x30\xda\xc8\xe1\x0f\x19\x69\x0c\xf2\xec\x56\xf2\xa6\xdb\x55\xec\xca\xc4\x5c\xe1\xe6\x6b\xf0\x43\x85\xc7\x68\x76\x5b\x47\xdd\xd7\x98\x57\xf4\x95\xfb\x85\x93\x7d\x24\x0c\x94\x0c\xdb\x28\xd5\xef\x37\x05\xef\x11\x26\x40\x26\x48\x33\x3a\x77\x03\x2e\x9c\x56\x0e\x85\xbc\xb9\x2c\x45\x0c\x27\x62\x98\xc3\x40\x2e\x41\xc4\x92\xb0\x10\xdb\x57\x1a\x40\x02\xcc\x44\x02\x32\x11\x30\xa5\x90\xd9\x10\x98\xe0\x93\x30\x5a\x2f\x09\xc2\x08\x08\x47\x64\x4b\x72\x29\x45\x4e\x04\x06\x13\x25\xad\x00\x9e\x27\x9b\xc0\x93\x94\x79\x55\x96\x4d\x0b\xa5\xdd\x3c\x80\xc3\x0b\x71\x02\xf4\x03\xa0\x99\x2c\x1d\x29\xc1\xb6\xd5\xb7\x20\x21\xae\xda\xfa\x7d\xb7\xd3\x9b\x5a\xde\x01\x1a\x93\x19\xcd\x45\x2b\xa6\x91\x98\xbc\xa1\x54\x32\x5d\xc1\x24\x12\x53\xd7\x34\xc8\x67\x7b\xd4\x81\x0f\x4d\x1c\xc6\xa6\xbd\x5f\x6f\xf5\x7a\xfb\xb0\x6b\x75\x1c\x46\xe5\xac\x21\x9f\xca\xb2\x3c\x7d\x7f\x52\xd6\xc7\x2c\x57\xba\x5c\x22\x75\x60\x67\x3c\x50\x4d\xfc\x53\x88\xc5\x76\x05\x7f\x00\xbc\x05\x94\x96\x99\x02\x0c\x76\x26\x5f\xb6\x2c\x75\xf0\xab\xbd\x81\xdb\x1b\xd8\x6c\xb6\xf5\xf1\x5b\x85\x2c\x31\x4b\x81\x2e\x9d\x46\x42\xc9\x5c\xa4\x3e\x75\x42\x0f\x0b\x72\xe9\x54\x52\x03\x87\x7b\x72\xea\xff\x8e\x57\x89\xd4\x67\x76\x5d\xf5\xdf\x35\xcd\x80\x82\x7a\x98\x9d\xd1\xb3\x6b\xe6\xb3\x27\x69\x96\x89\x36\x55\xb0\xd4\xe9\xe2\x13\x89\x96\xb3\xa8\xfa\xab\xa8\x99\x89\xcc\x4b\x0c\xd6\xcb\xbb\x52\x38\x79\x17\x70\xd0\xef\x6b\x56\x63\xbd\xca\xcd\x75\xa9\xfc\xe7\x7b\xd9\x6f\xd6\xed\x7d\xbf\xde\xf5\xed\x56\x0b\xb2\x3e\xbc\x2a\x00\x9b\x7a\x64\x33\xd9\x23\x75\x20\x9c\x49\xa1\x08\xdb\x7d\x96\x65\x74\x33\x7a\x3b\x52\x92\x1e\xb3\x4c\x81\x3b\xc0\xfd\x90\xdd\x50\x92\x62\xb4\xce\xfa\x43\x5f\x4c\x25\x92\x0e\x7e\x14\x0f\x8f\x24\xea\x5f\x00\x00\x00\xff\xff\x43\x9e\xc6\xb4\x1c\x04\x00\x00"

func mobilenet_v1_025_128YmlBytes() ([]byte, error) {
	return bindataRead(
		_mobilenet_v1_025_128Yml,
		"MobileNet_v1_0.25_128.yml",
	)
}

func mobilenet_v1_025_128Yml() (*asset, error) {
	bytes, err := mobilenet_v1_025_128YmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "MobileNet_v1_0.25_128.yml", size: 1052, mode: os.FileMode(420), modTime: time.Unix(1500916950, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mobilenet_v1_025_224Yml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xbb\x72\xdb\x30\x10\xec\xf1\x15\xf7\x01\x16\x48\x2a\x92\x9c\x61\x91\x2a\x4d\x8a\xd8\x8d\xbb\x4c\x86\x73\x02\x8f\x12\x62\x10\xc0\x1c\x0e\x7a\xb8\xc8\xb7\x67\x00\x6a\xfc\x98\x34\x6e\x38\x3c\x72\x77\x0f\xbb\x77\xf0\x38\x53\x0f\x3f\xc3\xde\x3a\x7a\x20\x19\x4e\xdd\xd0\xea\xf5\x76\x58\xaf\x37\x6a\x62\x9c\xe9\x1c\xf8\xb9\x57\x00\x0b\xf0\x89\x7c\x0a\x3c\xb9\x70\x56\x00\x27\xe2\x64\x83\xef\xe1\x6f\xa7\x3b\x7d\x51\xaf\x75\xa7\x5b\x65\x82\x17\xb4\x9e\xb8\x90\x71\x1e\x77\x9b\xf2\x02\x70\x88\xb9\x07\x46\x1b\x39\xfc\x21\x23\x8d\x41\x9e\xdd\x4a\x5e\x75\xfb\x8a\x5d\x99\x98\x2b\xdc\x7c\x0e\x7e\xa8\xf0\x18\xcd\x6e\xe3\xa8\xff\x1c\xf3\x86\xbe\x71\x3f\x71\xb2\xf7\x84\x91\x92\x61\x1b\xa5\xfa\xfd\xa6\xe0\x2d\xc2\x04\xc8\x04\x69\x46\xe7\xee\xc0\x85\xf3\xca\xa1\x90\x37\xd7\xa5\x88\xe1\x4c\x0c\x73\x18\xc9\x25\x88\x58\x12\x16\x62\xfb\x42\x23\x48\x80\x99\x48\x40\x8e\x04\x4c\x29\x64\x36\x04\x26\xf8\x24\x8c\xd6\x4b\x82\x30\x01\xc2\x09\xd9\x92\x5c\x4b\x91\x13\x81\xc1\x44\x49\x2b\x80\xa7\xa3\x4d\xe0\x49\xca\xbc\x2a\xcb\xa6\x85\xb2\x5e\x6f\xc0\xe1\x95\x38\x01\xfa\x11\xd0\x1c\x2d\x9d\x28\xc1\xb6\xd5\x3b\x90\x10\x57\x5d\xfd\x7e\xbf\xd5\x6d\x2d\xb7\x80\xc6\x64\x46\x73\xd5\x8a\x69\x22\x26\x6f\x28\x95\x4c\x57\x70\x14\x89\xa9\x6f\x1a\xe4\x8b\x3d\xe9\xc0\x87\x26\x8e\x53\xd3\xdd\xb7\x1b\xdd\x6e\xbe\xee\x3a\x1d\xc7\x49\x39\x6b\xc8\xa7\xb2\x2c\x8f\xdf\x1f\x95\xf5\x31\xcb\x8d\x2e\xd7\x48\x3d\xd8\x19\x0f\x54\x13\xff\x10\x62\xb1\x5d\xc1\xef\x00\xaf\x01\xa5\x65\xa6\x00\xa3\x9d\xc9\x97\x2d\x4b\x3d\xfc\xea\xee\xe0\xcb\x5d\x31\x58\x1f\xbf\x55\xc8\x12\xb3\x14\xe8\xd2\x69\x22\x94\xcc\x45\xea\x43\x27\xf4\xb0\x20\x97\x4e\x25\x35\x70\xb8\x27\xa7\xfe\xef\x78\x93\x48\x43\x66\xd7\x57\xff\x7d\xd3\x8c\x28\xa8\xc7\xd9\x19\x3d\xbb\x66\xbe\x78\x92\x66\x99\x68\x53\x05\x4b\x9d\xae\x3e\x91\x68\xb9\x88\xaa\xbf\x8a\x9a\x39\x92\x79\x8e\xc1\x7a\x79\x53\x0a\x67\xef\x02\x8e\xfa\x6d\xcd\x6a\xac\x37\xb9\xb9\x2e\x95\xff\x78\x2f\x87\x75\xdb\xdd\x0f\xed\x6e\xe8\x36\x5a\x90\xf5\xe1\x45\x01\xd8\x34\x20\x9b\xa3\x3d\x51\x0f\xc2\x99\x14\x8a\xb0\xdd\x67\x59\x46\x37\xa3\xb7\x13\x25\x19\x30\xcb\x31\x70\x0f\xb8\x1f\xb3\x1b\x4b\x52\x8c\xd6\x59\x7f\x18\x8a\xa9\x44\xd2\xc3\x8f\xe2\xe1\x81\x44\xfd\x0b\x00\x00\xff\xff\xb9\xc9\x56\x35\x1c\x04\x00\x00"

func mobilenet_v1_025_224YmlBytes() ([]byte, error) {
	return bindataRead(
		_mobilenet_v1_025_224Yml,
		"MobileNet_v1_0.25_224.yml",
	)
}

func mobilenet_v1_025_224Yml() (*asset, error) {
	bytes, err := mobilenet_v1_025_224YmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "MobileNet_v1_0.25_224.yml", size: 1052, mode: os.FileMode(420), modTime: time.Unix(1500916950, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mobilenet_v1_050_128Yml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xbb\x72\xdb\x30\x10\xec\xf1\x15\xf7\x01\x16\x28\x2a\xb2\xec\xb0\x48\x95\x26\x45\xec\xc6\x5d\x26\xc3\x39\x81\x47\x11\x31\x08\x60\x0e\x07\x3d\x5c\xe4\xdb\x33\x00\x35\x7e\x4c\x1a\x37\x1c\x1e\xb9\xbb\x87\xdd\x3b\x78\x9c\xa9\x83\x9f\x61\x6f\x1d\x3d\x90\xf4\xc7\xb6\x5f\xeb\xdb\x75\xdf\x6e\xee\xd5\xc8\x38\xd3\x29\xf0\x73\xa7\x00\x16\xe0\x13\xf9\x14\x78\x74\xe1\xa4\x00\x8e\xc4\xc9\x06\xdf\xc1\xdf\x56\xb7\xfa\xac\x5e\xeb\x56\xaf\x95\x09\x5e\xd0\x7a\xe2\x42\xc6\x79\xd8\x6d\xcb\x0b\xc0\x21\xe6\x0e\x18\x6d\xe4\xf0\x87\x8c\x34\x06\x79\x76\x2b\x79\xd5\xed\x2a\x76\x65\x62\xae\x70\xf3\x39\xf8\xa1\xc2\x63\x34\xbb\xad\xa3\xee\x73\xcc\x2b\xfa\xca\xfd\xc4\xc9\xde\x13\x06\x4a\x86\x6d\x94\xea\xf7\x9b\x82\xb7\x08\x13\x20\x13\xa4\x19\x9d\xbb\x01\x17\x4e\x2b\x87\x42\xde\x5c\x96\x22\x86\x13\x31\xcc\x61\x20\x97\x20\x62\x49\x58\x88\xed\x0b\x0d\x20\x01\x66\x22\x01\x99\x08\x98\x52\xc8\x6c\x08\x4c\xf0\x49\x18\xad\x97\x04\x61\x04\x84\x23\xb2\x25\xb9\x94\x22\x27\x02\x83\x89\x92\x56\x00\x4f\x93\x4d\xe0\x49\xca\xbc\x2a\xcb\xa6\x85\xd2\x6e\xee\xc1\xe1\x85\x38\x01\xfa\x01\xd0\x4c\x96\x8e\x94\xe0\x76\xa7\x37\x20\x21\xae\xda\xfa\xfd\xee\xab\xde\xd5\xf2\x16\xd0\x98\xcc\x68\x2e\x5a\x31\x8d\xc4\xe4\x0d\xa5\x92\xe9\x0a\x26\x91\x98\xba\xa6\x41\x3e\xdb\xa3\x0e\x7c\x68\xe2\x30\x36\xed\xdd\x7a\xab\xd7\xdb\xfb\x5d\xab\xe3\x30\x2a\x67\x0d\xf9\x54\x96\xe5\xf1\xfb\xa3\xb2\x3e\x66\xb9\xd2\xe5\x12\xa9\x03\x3b\xe3\x81\x6a\xe2\x1f\x42\x2c\xb6\x2b\xf8\x1d\xe0\x35\xa0\xb4\xcc\x14\x60\xb0\x33\xf9\xb2\x65\xa9\x83\x5f\xed\x0d\x7c\xb9\x81\xcd\x66\x5b\x1f\xbf\x55\xc8\x12\xb3\x14\xe8\xd2\x69\x24\x94\xcc\x45\xea\x43\x27\xf4\xb0\x20\x97\x4e\x25\x35\x70\xb8\x27\xa7\xfe\xef\x78\x95\x48\x7d\x66\xd7\x55\xff\x5d\xd3\x0c\x28\xa8\x87\xd9\x19\x3d\xbb\x66\x3e\x7b\x92\x66\x99\x68\x53\x05\x4b\x9d\x2e\x3e\x91\x68\x39\x8b\xaa\xbf\x8a\x9a\x99\xc8\x3c\xc7\x60\xbd\xbc\x29\x85\x93\x77\x01\x07\xfd\xb6\x66\x35\xd6\xab\xdc\x5c\x97\xca\x7f\xbc\x97\xfd\x66\xdd\xde\xf5\xeb\x5d\xdf\x6e\xb5\x20\xeb\xc3\x8b\x02\xb0\xa9\x47\x36\x93\x3d\x52\x07\xc2\x99\x14\x8a\xb0\xdd\x67\x59\x46\x37\xa3\xb7\x23\x25\xe9\x31\xcb\x14\xb8\x03\xdc\x0f\xd9\x0d\x25\x29\x46\xeb\xac\x3f\xf4\xc5\x54\x22\xe9\xe0\x47\xf1\xf0\x40\xa2\xfe\x05\x00\x00\xff\xff\x1a\x45\x01\xee\x1c\x04\x00\x00"

func mobilenet_v1_050_128YmlBytes() ([]byte, error) {
	return bindataRead(
		_mobilenet_v1_050_128Yml,
		"MobileNet_v1_0.50_128.yml",
	)
}

func mobilenet_v1_050_128Yml() (*asset, error) {
	bytes, err := mobilenet_v1_050_128YmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "MobileNet_v1_0.50_128.yml", size: 1052, mode: os.FileMode(420), modTime: time.Unix(1500916950, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mobilenet_v1_050_224Yml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xbb\x72\xe4\x38\x0c\xcc\xf9\x15\xf8\x00\x0f\x25\xcd\xc9\x63\x97\x82\x8b\x2e\xb9\xe0\xec\xc4\xd9\xd5\x96\x0a\x43\x41\x33\x5c\x53\x24\x0b\x04\xe7\xe1\x60\xbf\x7d\x8b\xd4\x94\x1f\xb5\x89\x13\x95\x20\x75\x37\xd8\x0d\xd0\xe3\x42\x03\xfc\x17\xf6\xd6\xd1\x13\xc9\x78\xea\xc6\x56\xdf\xb7\xe3\x76\xdb\xab\x99\x71\xa1\x73\xe0\xd7\x41\x01\xac\xc0\x17\xf2\x29\xf0\xec\xc2\x59\x01\x9c\x88\x93\x0d\x7e\x80\x5f\x9d\xee\xf4\x45\xbd\xd7\x9d\x6e\x95\x09\x5e\xd0\x7a\xe2\x42\xc6\x65\xda\xf5\xe5\x05\xe0\x10\xf3\x00\x8c\x36\x72\xf8\x49\x46\x1a\x83\xbc\xb8\x8d\xbc\xeb\x0e\x15\xbb\x31\x31\x57\xb8\xf9\x1e\xfc\x50\xe1\x31\x9a\x5d\xef\x68\xf8\x1e\xf3\x86\xbe\x71\xbf\x71\xb2\xcf\x84\x89\x92\x61\x1b\xa5\xfa\xfd\x5b\xc1\x47\x84\x09\x90\x09\xd2\x82\xce\xdd\x81\x0b\xe7\x8d\x43\x21\x6f\xae\x6b\x11\xc3\x99\x18\x96\x30\x91\x4b\x10\xb1\x24\x2c\xc4\xf6\x8d\x26\x90\x00\x0b\x91\x80\x1c\x09\x98\x52\xc8\x6c\x08\x4c\xf0\x49\x18\xad\x97\x04\x61\x06\x84\x13\xb2\x25\xb9\x96\x22\x27\x02\x83\x89\x92\x56\x00\x2f\x47\x9b\xc0\x93\x94\x79\x55\x96\x4d\x2b\x65\xbb\xed\xc1\xe1\x95\x38\x01\xfa\x09\xd0\x1c\x2d\x9d\x28\xc1\xae\xd7\x2d\x48\x88\x9b\xae\x7e\x7f\xbc\xd7\x7d\x2d\xef\x01\x8d\xc9\x8c\xe6\xaa\x15\xd3\x4c\x4c\xde\x50\x2a\x99\x6e\xe0\x28\x12\xd3\xd0\x34\xc8\x17\x7b\xd2\x81\x0f\x4d\x9c\xe6\xa6\x7b\x68\x7b\xdd\xf6\x8f\xbb\x4e\xc7\x69\x56\xce\x1a\xf2\xa9\x2c\xcb\xf3\x3f\xcf\xca\xfa\x98\xe5\x46\x97\x6b\xa4\x01\xec\x82\x07\xaa\x89\x7f\x09\xb1\xd8\xae\xe0\x4f\x80\xf7\x80\xd2\x3a\x53\x80\xc9\x2e\xe4\xcb\x96\xa5\x01\xfe\xef\xee\xe0\xaf\xbb\x62\xb0\x3e\x7e\xa8\x90\x25\x66\x29\xd0\xb5\xd3\x4c\x28\x99\x8b\xd4\x97\x4e\xe8\x61\x45\xae\x9d\x4a\x6a\xe0\x70\x4f\x4e\xfd\xd9\xf1\x26\x91\xc6\xcc\x6e\xa8\xfe\x87\xa6\x99\x50\x50\x4f\x8b\x33\x7a\x71\xcd\x72\xf1\x24\xcd\x3a\xd1\xa6\x0a\x96\x3a\x5d\x7d\x22\xd1\x72\x11\x55\x7f\x15\x35\x73\x24\xf3\x1a\x83\xf5\xf2\xa1\x14\xce\xde\x05\x9c\xf4\xc7\x9a\xd5\x58\x6f\x72\x4b\x5d\x2a\xff\xf5\x5e\x8e\xdb\xb6\x7b\x18\xdb\xdd\xd8\xf5\x5a\x90\xf5\xe1\x4d\x01\xd8\x34\x22\x9b\xa3\x3d\xd1\x00\xc2\x99\x14\x8a\xb0\xdd\x67\x59\x47\xb7\xa0\xb7\x33\x25\x19\x31\xcb\x31\xf0\x00\xb8\x9f\xb2\x9b\x4a\x52\x8c\xd6\x59\x7f\x18\x8b\xa9\x44\x32\xc0\xbf\xc5\xc3\x13\x89\xfa\x1d\x00\x00\xff\xff\x22\x3a\x3c\x31\x1c\x04\x00\x00"

func mobilenet_v1_050_224YmlBytes() ([]byte, error) {
	return bindataRead(
		_mobilenet_v1_050_224Yml,
		"MobileNet_v1_0.50_224.yml",
	)
}

func mobilenet_v1_050_224Yml() (*asset, error) {
	bytes, err := mobilenet_v1_050_224YmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "MobileNet_v1_0.50_224.yml", size: 1052, mode: os.FileMode(420), modTime: time.Unix(1500916950, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mobilenet_v1_075_128Yml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x3d\x73\xe3\x3a\x0c\xec\xf9\x2b\xf0\x03\x62\xca\x72\x1c\xc7\xa3\xe2\x55\xaf\x79\xc5\x4b\x9a\x74\x37\x37\x1a\x98\x82\x2c\x5e\x28\x92\x03\x82\xfe\x48\x71\xbf\xfd\x86\x94\x27\x1f\x73\x4d\x1a\x8d\x20\xed\x2e\xb8\x0b\xd0\xe3\x4c\x1d\xfc\x1f\x0e\xd6\xd1\x13\x49\x7f\x6a\xfb\xb5\x7e\x7c\xe8\xdb\xcd\x5e\x8d\x8c\x33\x9d\x03\xbf\x76\x0a\x60\x01\xbe\x90\x4f\x81\x47\x17\xce\x0a\xe0\x44\x9c\x6c\xf0\x1d\xfc\x6e\x75\xab\x2f\xea\xbd\x6e\xf5\x5a\x99\xe0\x05\xad\x27\x2e\x64\x9c\x87\xdd\xb6\xbc\x00\x1c\x63\xee\x80\xd1\x46\x0e\xbf\xc8\x48\x63\x90\x67\xb7\x92\x77\xdd\xae\x62\x57\x26\xe6\x0a\x37\xdf\x83\x1f\x2b\x3c\x46\xb3\xdb\x3a\xea\xbe\xc7\xbc\xa1\x6f\xdc\x6f\x9c\xec\x33\x61\xa0\x64\xd8\x46\xa9\x7e\xff\x51\xf0\x11\x61\x02\x64\x82\x34\xa3\x73\x77\xe0\xc2\x79\xe5\x50\xc8\x9b\xeb\x52\xc4\x70\x26\x86\x39\x0c\xe4\x12\x44\x2c\x09\x0b\xb1\x7d\xa3\x01\x24\xc0\x4c\x24\x20\x13\x01\x53\x0a\x99\x0d\x81\x09\x3e\x09\xa3\xf5\x92\x20\x8c\x80\x70\x42\xb6\x24\xd7\x52\xe4\x44\x60\x30\x51\xd2\x0a\xe0\x65\xb2\x09\x3c\x49\x99\x57\x65\xd9\xb4\x50\xda\xcd\x1e\x1c\x5e\x89\x13\xa0\x1f\x00\xcd\x64\xe9\x44\x09\x76\xad\xde\x83\x84\xb8\x6a\xeb\xf7\xfd\xbd\xde\xd5\xf2\x01\xd0\x98\xcc\x68\xae\x5a\x31\x8d\xc4\xe4\x0d\xa5\x92\xe9\x0a\x26\x91\x98\xba\xa6\x41\xbe\xd8\x93\x0e\x7c\x6c\xe2\x30\x36\xed\xe3\x7a\xab\xd7\xdb\xfd\xae\xd5\x71\x18\x95\xb3\x86\x7c\x2a\xcb\xf2\xfc\xef\xb3\xb2\x3e\x66\xb9\xd1\xe5\x1a\xa9\x03\x3b\xe3\x91\x6a\xe2\x5f\x42\x2c\xb6\x2b\xf8\x13\xe0\x3d\xa0\xb4\xcc\x14\x60\xb0\x33\xf9\xb2\x65\xa9\x83\x1f\xed\x1d\xdc\xdf\xc1\x66\xb3\xad\x8f\x9f\x2a\x64\x89\x59\x0a\x74\xe9\x34\x12\x4a\xe6\x22\xf5\xa5\x13\x7a\x58\x90\x4b\xa7\x92\x1a\x38\x3c\x90\x53\x7f\x77\xbc\x49\xa4\x3e\xb3\xeb\xaa\xff\xae\x69\x06\x14\xd4\xc3\xec\x8c\x9e\x5d\x33\x5f\x3c\x49\xb3\x4c\xb4\xa9\x82\xa5\x4e\x57\x9f\x48\xb4\x5c\x44\xd5\x5f\x45\xcd\x4c\x64\x5e\x63\xb0\x5e\x3e\x94\xc2\xd9\xbb\x80\x83\xfe\x58\xb3\x1a\xeb\x4d\x6e\xae\x4b\xe5\xbf\xde\xcb\x7e\xb3\x6e\x1f\xfb\xf5\xae\x6f\xb7\x5a\x90\xf5\xf1\x4d\x01\xd8\xd4\x23\x9b\xc9\x9e\xa8\x03\xe1\x4c\x0a\x45\xd8\x1e\xb2\x2c\xa3\x9b\xd1\xdb\x91\x92\xf4\x98\x65\x0a\xdc\x01\x1e\x86\xec\x86\x92\x14\xa3\x75\xd6\x1f\xfb\x62\x2a\x91\x74\xf0\x5f\xf1\xf0\x44\xa2\xfe\x04\x00\x00\xff\xff\xa1\xf9\x10\xa2\x1c\x04\x00\x00"

func mobilenet_v1_075_128YmlBytes() ([]byte, error) {
	return bindataRead(
		_mobilenet_v1_075_128Yml,
		"MobileNet_v1_0.75_128.yml",
	)
}

func mobilenet_v1_075_128Yml() (*asset, error) {
	bytes, err := mobilenet_v1_075_128YmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "MobileNet_v1_0.75_128.yml", size: 1052, mode: os.FileMode(420), modTime: time.Unix(1500916950, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mobilenet_v1_075_224Yml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x3d\x73\xe3\x3a\x0c\xec\xf9\x2b\xf0\x03\x62\xca\xf2\x73\xec\x3c\x15\xaf\x7a\xcd\x15\x97\x34\xe9\x6e\x6e\x34\x30\x05\x59\xbc\x50\x24\x07\x04\xfd\x91\xe2\x7e\xfb\x0d\x29\x4f\x3e\xe6\x9a\x34\x1a\x41\xda\x5d\x70\x17\xa0\xc7\x99\x3a\xf8\x1e\x0e\xd6\xd1\x23\x49\x7f\x6a\xfb\xb5\xde\xdf\xf7\x9b\xcd\x56\x8d\x8c\x33\x9d\x03\xbf\x74\x0a\x60\x01\x3e\x93\x4f\x81\x47\x17\xce\x0a\xe0\x44\x9c\x6c\xf0\x1d\xfc\x6e\x75\xab\x2f\xea\xad\x6e\xf5\x5a\x99\xe0\x05\xad\x27\x2e\x64\x9c\x87\xdd\xb6\xbc\x00\x1c\x63\xee\x80\xd1\x46\x0e\xbf\xc8\x48\x63\x90\x67\xb7\x92\x37\xdd\xae\x62\x57\x26\xe6\x0a\x37\x5f\x83\x1f\x2b\x3c\x46\xb3\xdb\x3a\xea\xbe\xc6\xbc\xa1\x6f\xdc\x2f\x9c\xec\x23\x61\xa0\x64\xd8\x46\xa9\x7e\xff\x53\xf0\x1e\x61\x02\x64\x82\x34\xa3\x73\x77\xe0\xc2\x79\xe5\x50\xc8\x9b\xeb\x52\xc4\x70\x26\x86\x39\x0c\xe4\x12\x44\x2c\x09\x0b\xb1\x7d\xa5\x01\x24\xc0\x4c\x24\x20\x13\x01\x53\x0a\x99\x0d\x81\x09\x3e\x09\xa3\xf5\x92\x20\x8c\x80\x70\x42\xb6\x24\xd7\x52\xe4\x44\x60\x30\x51\xd2\x0a\xe0\x79\xb2\x09\x3c\x49\x99\x57\x65\xd9\xb4\x50\x36\x9b\x2d\x38\xbc\x12\x27\x40\x3f\x00\x9a\xc9\xd2\x89\x12\xec\xd7\x7a\x0f\x12\xe2\xaa\xad\xdf\x1f\xfe\xd5\xf7\xb5\xbc\x07\x34\x26\x33\x9a\xab\x56\x4c\x23\x31\x79\x43\xa9\x64\xba\x82\x49\x24\xa6\xae\x69\x90\x2f\xf6\xa4\x03\x1f\x9b\x38\x8c\x4d\xbb\x5f\x6f\xf5\x7a\xfb\xb0\x6b\x75\x1c\x46\xe5\xac\x21\x9f\xca\xb2\x3c\xfd\xff\xa4\xac\x8f\x59\x6e\x74\xb9\x46\xea\xc0\xce\x78\xa4\x9a\xf8\xa7\x10\x8b\xed\x0a\xfe\x00\x78\x0b\x28\x2d\x33\x05\x18\xec\x4c\xbe\x6c\x59\xea\xe0\x47\x7b\x07\xff\xdc\x15\x83\xf5\xf1\x53\x85\x2c\x31\x4b\x81\x2e\x9d\x46\x42\xc9\x5c\xa4\x3e\x75\x42\x0f\x0b\x72\xe9\x54\x52\x03\x87\x07\x72\xea\xef\x8e\x37\x89\xd4\x67\x76\x5d\xf5\xdf\x35\xcd\x80\x82\x7a\x98\x9d\xd1\xb3\x6b\xe6\x8b\x27\x69\x96\x89\x36\x55\xb0\xd4\xe9\xea\x13\x89\x96\x8b\xa8\xfa\xab\xa8\x99\x89\xcc\x4b\x0c\xd6\xcb\xbb\x52\x38\x7b\x17\x70\xd0\xef\x6b\x56\x63\xbd\xc9\xcd\x75\xa9\xfc\xe7\x7b\xd9\x6f\xd6\xed\xbe\x5f\xef\xfa\x76\xab\x05\x59\x1f\x5f\x15\x80\x4d\x3d\xb2\x99\xec\x89\x3a\x10\xce\xa4\x50\x84\xed\x21\xcb\x32\xba\x19\xbd\x1d\x29\x49\x8f\x59\xa6\xc0\x1d\xe0\x61\xc8\x6e\x28\x49\x31\x5a\x67\xfd\xb1\x2f\xa6\x12\x49\x07\xdf\x8a\x87\x47\x12\xf5\x27\x00\x00\xff\xff\x74\x1e\xd6\x21\x1c\x04\x00\x00"

func mobilenet_v1_075_224YmlBytes() ([]byte, error) {
	return bindataRead(
		_mobilenet_v1_075_224Yml,
		"MobileNet_v1_0.75_224.yml",
	)
}

func mobilenet_v1_075_224Yml() (*asset, error) {
	bytes, err := mobilenet_v1_075_224YmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "MobileNet_v1_0.75_224.yml", size: 1052, mode: os.FileMode(420), modTime: time.Unix(1500916950, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mobilenet_v1_10_128Yml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x3d\x73\xe3\x3a\x0c\xec\xf9\x2b\xf0\x03\x62\xca\x72\x1c\xc7\xa3\xe2\x55\xaf\x79\xc5\x4b\x9a\x74\x37\x37\x1a\x98\x82\x2c\x5e\x28\x92\x03\x82\xfe\x48\x71\xbf\xfd\x86\x94\x27\x1f\x73\x4d\x1a\x8d\x20\xed\x2e\xb8\x0b\xd0\xe3\x4c\x1d\xfc\x1f\x0e\xd6\xd1\x13\x49\x7f\x6a\xfb\x56\xaf\xfb\x76\xb3\x57\x23\xe3\x4c\xe7\xc0\xaf\x9d\x02\x58\x70\x2f\xe4\x53\xe0\xd1\x85\xb3\x02\x38\x11\x27\x1b\x7c\x07\xbf\x5b\xdd\xea\x8b\x7a\xaf\x5b\xbd\x56\x26\x78\x41\xeb\x89\x0b\x19\xe7\x61\xb7\x2d\x2f\x00\xc7\x98\x3b\x60\xb4\x91\xc3\x2f\x32\xd2\x18\xe4\xd9\xad\xe4\x5d\xb7\xab\xd8\x95\x89\xb9\xc2\xcd\xf7\xe0\xc7\x0a\x8f\xd1\xec\xb6\x8e\xba\xef\x31\x6f\xe8\x1b\xf7\x1b\x27\xfb\x4c\x18\x28\x19\xb6\x51\xaa\xdf\x7f\x14\x7c\x24\x98\x00\x99\x20\xcd\xe8\xdc\x1d\xb8\x70\x5e\x39\x14\xf2\xe6\xba\x14\x31\x9c\x89\x61\x0e\x03\xb9\x04\x11\x4b\xc2\x42\x6c\xdf\x68\x00\x09\x30\x13\x09\xc8\x44\xc0\x94\x42\x66\x43\x60\x82\x4f\xc2\x68\xbd\x24\x08\x23\x20\x9c\x90\x2d\xc9\xb5\x14\x39\x11\x18\x4c\x94\xb4\x02\x78\x99\x6c\x02\x4f\x52\xe6\x55\x59\x36\x2d\x94\x76\xb3\x07\x87\x57\xe2\x04\xe8\x07\x40\x33\x59\x3a\x51\x82\xdd\x56\xb7\x20\x21\xae\xda\xfa\x7d\xff\xa0\xef\x6b\xf9\x00\x68\x4c\x66\x34\x57\xad\x98\x46\x62\xf2\x86\x52\xc9\x74\x05\x93\x48\x4c\x5d\xd3\x20\x5f\xec\x49\x07\x3e\x36\x71\x18\x9b\xf6\x71\xbd\xd5\xeb\xed\x7e\xd7\xea\x38\x8c\xca\x59\x43\x3e\x95\x65\x79\xfe\xf7\x59\x59\x1f\xb3\xdc\xe8\x72\x8d\xd4\x81\x9d\xf1\x48\x35\xf1\x2f\x21\x16\xdb\x15\xfc\x09\xf0\x1e\x50\x5a\x66\x0a\x30\xd8\x99\x7c\xd9\xb2\xd4\xc1\x8f\xf6\x0e\xee\xef\x60\xb3\xd9\xd6\xc7\x4f\x15\xb2\xc4\x2c\x05\xba\x74\x1a\x09\x25\x73\x91\xfa\xd2\x09\x3d\x2c\xc8\xa5\x53\x49\x0d\x1c\x1e\xc8\xa9\xbf\x3b\xde\x24\x52\x9f\xd9\x75\xd5\x7f\xd7\x34\x03\x0a\xea\x61\x76\x46\xcf\xae\x99\x2f\x9e\xa4\x59\x26\xda\x54\xc1\x52\xa7\xab\x4f\x24\x5a\x2e\xa2\xea\xaf\xa2\x66\x26\x32\xaf\x31\x58\x2f\x1f\x4a\xe1\xec\x5d\xc0\x41\x7f\xac\x59\x8d\xf5\x26\x37\xd7\xa5\xf2\x5f\xae\x65\xbf\x59\xb7\x8f\xfd\x7a\xd7\xb7\x5b\x2d\xc8\xfa\xf8\xa6\x00\x6c\xea\x91\xcd\x64\x4f\xd4\x81\x70\x26\x85\x22\x6c\x0f\x59\x96\xc9\xcd\xe8\xed\x48\x49\x7a\xcc\x32\x05\xee\x00\x0f\x43\x76\x43\x09\x8a\xd1\x3a\xeb\x8f\x7d\xf1\x94\x48\x3a\xf8\xaf\x58\x78\x22\x51\x7f\x02\x00\x00\xff\xff\xff\xfa\x83\x2f\x1a\x04\x00\x00"

func mobilenet_v1_10_128YmlBytes() ([]byte, error) {
	return bindataRead(
		_mobilenet_v1_10_128Yml,
		"MobileNet_v1_1.0_128.yml",
	)
}

func mobilenet_v1_10_128Yml() (*asset, error) {
	bytes, err := mobilenet_v1_10_128YmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "MobileNet_v1_1.0_128.yml", size: 1050, mode: os.FileMode(420), modTime: time.Unix(1500916950, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mobilenet_v1_10_224Yml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x3d\x73\xe3\x3a\x0c\xec\xf9\x2b\xf0\x03\x62\xca\xf2\x73\xec\x3c\x15\xaf\x7a\xcd\x15\x97\x34\xe9\x6e\x6e\x34\x30\x05\x59\xbc\x50\x24\x07\x04\xfd\x91\xe2\x7e\xfb\x0d\x29\x4f\x3e\xe6\x9a\x34\x1a\x41\xda\x5d\x70\x17\xa0\xc7\x99\x3a\xf8\x1e\x0e\xd6\xd1\x23\x49\x7f\x6a\xfb\x56\xaf\xfb\xcd\x66\xab\x46\xc6\x99\xce\x81\x5f\x3a\x05\xb0\xe0\x9e\xc9\xa7\xc0\xa3\x0b\x67\x05\x70\x22\x4e\x36\xf8\x0e\x7e\xb7\xba\xd5\x17\xf5\x56\xb7\x7a\xad\x4c\xf0\x82\xd6\x13\x17\x32\xce\xc3\x6e\x5b\x5e\x00\x8e\x31\x77\xc0\x68\x23\x87\x5f\x64\xa4\x31\xc8\xb3\x5b\xc9\x9b\x6e\x57\xb1\x2b\x13\x73\x85\x9b\xaf\xc1\x8f\x15\x1e\xa3\xd9\x6d\x1d\x75\x5f\x63\xde\xd0\x37\xee\x17\x4e\xf6\x91\x30\x50\x32\x6c\xa3\x54\xbf\xff\x29\x78\x4f\x30\x01\x32\x41\x9a\xd1\xb9\x3b\x70\xe1\xbc\x72\x28\xe4\xcd\x75\x29\x62\x38\x13\xc3\x1c\x06\x72\x09\x22\x96\x84\x85\xd8\xbe\xd2\x00\x12\x60\x26\x12\x90\x89\x80\x29\x85\xcc\x86\xc0\x04\x9f\x84\xd1\x7a\x49\x10\x46\x40\x38\x21\x5b\x92\x6b\x29\x72\x22\x30\x98\x28\x69\x05\xf0\x3c\xd9\x04\x9e\xa4\xcc\xab\xb2\x6c\x5a\x28\x9b\xcd\x16\x1c\x5e\x89\x13\xa0\x1f\x00\xcd\x64\xe9\x44\x09\xf6\x6b\xbd\x07\x09\x71\xd5\xd6\xef\x0f\xff\xea\xfb\x5a\xde\x03\x1a\x93\x19\xcd\x55\x2b\xa6\x91\x98\xbc\xa1\x54\x32\x5d\xc1\x24\x12\x53\xd7\x34\xc8\x17\x7b\xd2\x81\x8f\x4d\x1c\xc6\xa6\xdd\xaf\xb7\x7a\xbd\x7d\xd8\xb5\x3a\x0e\xa3\x72\xd6\x90\x4f\x65\x59\x9e\xfe\x7f\x52\xd6\xc7\x2c\x37\xba\x5c\x23\x75\x60\x67\x3c\x52\x4d\xfc\x53\x88\xc5\x76\x05\x7f\x00\xbc\x05\x94\x96\x99\x02\x0c\x76\x26\x5f\xb6\x2c\x75\xf0\xa3\xbd\x83\x7f\xee\x8a\xc1\xfa\xf8\xa9\x42\x96\x98\xa5\x40\x97\x4e\x23\xa1\x64\x2e\x52\x9f\x3a\xa1\x87\x05\xb9\x74\x2a\xa9\x81\xc3\x03\x39\xf5\x77\xc7\x9b\x44\xea\x33\xbb\xae\xfa\xef\x9a\x66\x40\x41\x3d\xcc\xce\xe8\xd9\x35\xf3\xc5\x93\x34\xcb\x44\x9b\x2a\x58\xea\x74\xf5\x89\x44\xcb\x45\x54\xfd\x55\xd4\xcc\x44\xe6\x25\x06\xeb\xe5\x5d\x29\x9c\xbd\x0b\x38\xe8\xf7\x35\xab\xb1\xde\xe4\xe6\xba\x54\xfe\xd3\xb5\xec\x37\xeb\x76\xdf\xaf\x77\x7d\xbb\xd5\x82\xac\x8f\xaf\x0a\xc0\xa6\x1e\xd9\x4c\xf6\x44\x1d\x08\x67\x52\x28\xc2\xf6\x90\x65\x99\xdc\x8c\xde\x8e\x94\xa4\xc7\x2c\x53\xe0\x0e\xf0\x30\x64\x37\x94\xa0\x18\xad\xb3\xfe\xd8\x17\x4f\x89\xa4\x83\x6f\xc5\xc2\x23\x89\xfa\x13\x00\x00\xff\xff\x01\x6c\xe9\x57\x1a\x04\x00\x00"

func mobilenet_v1_10_224YmlBytes() ([]byte, error) {
	return bindataRead(
		_mobilenet_v1_10_224Yml,
		"MobileNet_v1_1.0_224.yml",
	)
}

func mobilenet_v1_10_224Yml() (*asset, error) {
	bytes, err := mobilenet_v1_10_224YmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "MobileNet_v1_1.0_224.yml", size: 1050, mode: os.FileMode(420), modTime: time.Unix(1500916950, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _inceptionYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xc1\x6e\xdb\x3a\x10\xbc\xf3\x2b\xf6\xf2\x6e\x31\x65\x39\x71\xf2\xc2\xc3\x03\x1e\xda\x4b\x80\xb6\x01\xda\xa2\x97\x22\x10\xd6\xe4\x4a\x62\x4b\x91\x04\xb9\xb2\x9d\x1e\xfa\xed\x05\x29\x27\x4e\xd0\x4b\x2e\x02\x17\x3b\x3b\x3b\x9a\x1d\x8f\x13\x29\xb8\xf3\x9a\x22\xdb\xe0\x45\x9f\x70\xa2\x43\x48\x3f\x95\x00\x58\x9a\x5f\xc9\xe7\x90\x7a\x17\x0e\x02\x60\x4f\x29\xdb\xe0\x15\xfc\x6e\x65\x2b\x8f\xe2\xb9\xbe\x94\x6b\xa1\x83\x67\xb4\x9e\x52\x19\xc6\xc9\x5c\x5f\x95\x07\xc0\x10\x67\x05\x09\x6d\x4c\xe1\x07\x69\x6e\x34\xa6\xc9\xad\xf8\x99\x57\x55\xec\x4a\xc7\xb9\xc2\xf5\xdb\xe0\x43\x85\xc7\xa8\xaf\xaf\x1c\xa9\xb7\x4d\x9e\xd0\xa7\xd9\x37\x28\x7b\x39\x60\x28\xeb\x64\xab\x4f\x0a\xfe\x13\x00\xff\x7b\xb0\x13\x0e\xb4\xd2\x0e\x73\xb6\xbd\xd5\x58\x9a\xa0\x83\xdf\x07\x37\x97\x37\x3a\xf0\xc4\xc5\x50\x29\xe0\xec\x33\xa0\x1e\x2d\xed\x29\xc3\xcd\xbf\x72\xfd\x0f\x70\x88\xab\x16\xd0\x1b\xb8\xbd\x94\xb7\x4b\xbd\x05\xd4\x7a\x4e\xa8\x1f\x21\x78\xe0\x91\xe0\xee\xc3\x97\x6f\x9f\xdf\xc1\x66\xdd\x6e\x60\x8f\xce\x9a\x65\x9d\x41\xc6\x4c\x5c\x17\x70\x59\x9e\x6d\xe6\x0c\xa1\x87\x9e\x0e\x94\x80\x47\xf4\xb0\xd9\x7e\x84\x88\xe5\xba\x4c\x29\x4b\x91\xa8\xa7\x44\x5e\x53\x2e\xd6\xad\x60\x64\x8e\x59\x35\x0d\xa6\xa3\xdd\xcb\x90\x86\x26\x9a\xbe\x69\xb7\xed\x46\xae\xd7\xdb\xeb\x1b\x19\x4d\x2f\x9c\xd5\xe4\x73\xc9\xc4\xfd\xfb\x7b\x61\x7d\x9c\xf9\x34\xce\x8f\x91\xd4\xe2\x46\x35\xf6\x95\x57\x45\x7b\x05\xbf\x00\x9c\xb5\x2c\xa7\x03\x30\x76\x22\x5f\xc2\x94\x15\x7c\x6f\x2f\xe0\xf2\x02\x36\x9b\xab\xfa\x79\x38\x41\x26\x42\x5f\x9a\xed\xcd\x05\x3c\x7d\x1e\x44\x98\x39\xce\x5c\x68\x16\x15\x3d\x21\xcf\xa9\xac\x79\xa5\x02\x3d\x2c\xc8\x45\x45\xb9\x0b\x38\xdc\x91\x13\x7f\xab\x39\x51\xe4\x6e\x4e\x4e\x55\x6f\x54\xd3\x14\x9f\xa5\x99\x9c\x96\x93\x6b\xa6\xa3\x27\x6e\xa6\x60\xc8\xe5\xa6\x12\x96\x3a\x3f\xfa\x72\x09\x3e\xb2\xa8\xad\xc2\xb6\xc3\x4c\x67\x9e\xe2\x71\xe6\x90\x70\x20\x39\x84\x30\x38\xc2\x68\xb3\xd4\x61\x6a\x4c\x38\x78\x17\xd0\xc8\x73\xfe\xea\x21\x9e\x96\x3c\x85\x67\x3b\xca\x5f\x36\x0a\x80\x21\x61\x1c\xbb\x88\x3c\x2a\x38\xcf\x74\xcf\xc0\xae\x02\x64\xdc\x09\x00\x9b\x3b\x4c\x7a\xb4\x7b\x52\xc0\x69\x26\x81\xcc\xc9\xee\x66\x5e\x02\x30\xa1\xb7\x3d\x65\xee\x70\xe6\x31\x24\x05\xb8\x33\xb3\x33\xc5\xd3\x84\xd6\x59\x3f\x74\xa7\x98\x29\xb8\x2b\x7f\xfb\x89\x58\xfc\x09\x00\x00\xff\xff\x4e\x74\x6e\xf2\x3d\x04\x00\x00"

func inceptionYmlBytes() ([]byte, error) {
	return bindataRead(
		_inceptionYml,
		"inception.yml",
	)
}

func inceptionYml() (*asset, error) {
	bytes, err := inceptionYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "inception.yml", size: 1085, mode: os.FileMode(420), modTime: time.Unix(1500916950, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resnet152Yaml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\x4d\x6f\xdc\x38\x0c\xbd\xeb\x57\xf0\x07\x64\xe4\xb1\x27\x9e\x9d\xd5\x61\x81\xc5\xee\x25\x40\x91\x00\x69\xd0\x4b\x51\x18\x1c\x99\x1e\xab\x91\x25\x41\xa2\xe6\xa3\x87\xfe\xf6\x42\xf6\x34\x1f\xe8\x25\x17\xc3\x14\xdf\x7b\x24\x1f\xe9\x70\x22\x05\x8f\x94\xee\x89\xeb\xb6\x11\x43\xc4\x89\x4e\x3e\x3e\x2b\x01\xb0\x24\x9f\xc8\x25\x1f\x07\xeb\x4f\x02\xe0\x48\x31\x19\xef\x14\xfc\xac\x65\x2d\xcf\xe2\x25\xae\xe5\x5a\x68\xef\x18\x8d\xa3\x58\xc8\x38\xf5\xdb\xdb\xf2\x03\x70\x08\x59\x41\x44\x13\xa2\xff\x4e\x9a\x2b\x8d\x71\xb2\x2b\x7e\xd1\x55\x33\x76\xa5\x43\x9e\xe1\xfa\x63\xf0\xc3\x0c\x0f\x41\x6f\x6f\x2d\xa9\x8f\x31\xaf\xe8\x2b\xf7\x03\x9d\xbd\x25\xf4\x94\x74\x34\x81\xe7\x79\xff\x11\x00\xff\x3a\x30\x13\x1e\x68\xa5\x2d\xa6\x64\x06\xa3\xb1\x24\xc1\x11\x17\x0b\x61\x9f\x8d\x65\xf0\x03\x58\xbc\x50\x4c\xc0\x23\x32\x58\xc2\xe8\x20\x52\x32\x7d\x46\x0b\x43\x76\xba\x90\x12\x9c\x64\x94\xbc\x40\xc1\xb8\x90\x39\x49\x01\xf0\x34\x9a\xf4\x22\xa8\xbd\x4b\x26\x71\x2a\x9a\x75\xdb\xfc\xd6\x45\xd7\x03\xea\xd1\xd0\x91\x12\xfc\xb5\x95\x3b\x60\x1f\x56\xf5\xfc\xfe\xf7\x46\x36\x73\xd8\x02\x6a\x9d\x23\xea\x0b\x78\x07\x77\x9f\x3e\x7f\x79\xfc\x6f\xd5\xac\xeb\x56\x8a\x48\x03\x45\x72\x9a\x52\xb1\x71\x05\x23\x73\x48\xaa\xaa\x30\x9e\xcd\x51\xfa\x78\xa8\x42\x3f\x54\x75\x5b\x37\x72\xbd\xd9\xec\x5a\x19\xfa\x41\x58\xa3\xc9\xa5\x72\x1f\x0f\xff\x3f\x88\xa5\xe1\x85\xce\x97\x40\x6a\x71\x66\x36\xf9\x9d\x6f\x3c\xd2\x32\xdd\x1b\x40\xc0\x72\x75\x4c\x31\x2d\x6b\x04\xe8\xcd\x44\xae\x1c\x56\x52\xf0\xb5\xbe\x81\xcd\x0d\x34\xcd\xed\xfc\xf9\x26\x7c\xe6\x90\xb9\x40\x97\x4a\x03\x21\xe7\x58\xa4\xde\x55\x42\x07\x0b\x72\xa9\x54\x4c\x04\x8b\x7b\xb2\xe2\xcf\x8a\x57\x89\xd4\xe5\x68\xd5\x3c\xbf\xaa\xaa\x1e\x19\x65\x3f\x59\x2d\x27\x5b\x4d\x67\x47\x5c\x4d\xbe\x27\x9b\xaa\x59\xb0\xc4\xe9\xe2\x12\xb1\xe4\x33\x8b\x39\x55\xd4\xf4\x48\xfa\x39\x78\xe3\xf8\x55\xc9\x9f\x9c\xf5\xd8\xcb\xd7\xcb\x9a\x6d\xbd\xca\x45\x4a\x8e\xb8\x3b\xd6\x5d\xdd\x36\x5d\xb3\xae\xb7\xdd\x7a\xd7\x35\x3b\xc9\x18\xe5\xe1\x87\x00\x30\xa9\xc3\xa8\x47\x73\x24\x05\x1c\x33\x09\x64\x8e\x66\x9f\x79\x59\xd9\x84\xce\x0c\x94\xb8\xc3\xcc\xa3\x8f\x0a\x70\xdf\x67\xdb\x17\x87\x22\x1a\x6b\xdc\xa1\x2b\xc3\x24\x62\x05\x77\xa5\xf7\x7b\x62\xf1\x2b\x00\x00\xff\xff\xc7\x08\x81\x33\xfb\x03\x00\x00"

func resnet152YamlBytes() ([]byte, error) {
	return bindataRead(
		_resnet152Yaml,
		"resnet152.yaml",
	)
}

func resnet152Yaml() (*asset, error) {
	bytes, err := resnet152YamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resnet152.yaml", size: 1019, mode: os.FileMode(420), modTime: time.Unix(1500916950, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resnet50Yml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xcb\x6e\xdc\x3a\x0c\xdd\xeb\x2b\xf8\x01\x19\xf9\x91\x38\x37\x57\x8b\x02\x45\xbb\x09\x50\x24\x40\x1a\x74\x53\x14\x06\x47\xa6\xc7\x6a\x64\x49\x90\xa8\x79\x74\xd1\x6f\x2f\x64\x4f\xf3\x40\x37\xd9\x18\xa6\x78\xce\x21\x79\x48\x87\x33\x29\x78\xa0\x74\x47\xdc\xd5\x62\x8c\x38\xd3\xc1\xc7\x27\x25\x00\xd6\xdc\x23\xb9\xe4\xe3\x68\xfd\x41\x00\xec\x29\x26\xe3\x9d\x82\xdf\x8d\x6c\xe4\x51\x3c\xc7\x8d\xac\x85\xf6\x8e\xd1\x38\x8a\x85\x8c\xf3\x70\x7d\x55\x7e\x00\x76\x21\x2b\x88\x68\x42\xf4\x3f\x49\x73\xa5\x31\xce\x76\xc3\xcf\xba\x6a\xc1\x6e\x74\xc8\x0b\x5c\xbf\x0f\xbe\x5b\xe0\x21\xe8\xeb\x2b\x4b\xea\x7d\xcc\x33\xfa\xcc\x7d\x47\x67\xaf\x09\x03\x25\x1d\x4d\xe0\x65\xde\x0f\x02\xe0\xa3\x03\x33\xe3\x8e\x36\xda\x62\x4a\x66\x34\x1a\x4b\x12\x1c\x71\xb1\x10\xb6\xd9\x58\x06\x3f\x82\xc5\x13\xc5\x04\x3c\x21\x83\x25\x8c\x0e\x22\x25\x33\x64\xb4\x30\x66\xa7\x0b\x29\xc1\x41\x46\xc9\x2b\x14\x8c\x0b\x99\x93\x14\x00\x8f\x93\x49\xcf\x82\xda\xbb\x64\x12\xa7\xa2\xd9\xd5\x7f\x65\xd1\x0d\x80\x7a\x32\xb4\xa7\x04\xff\x75\xb2\x05\xf6\x61\xd3\x2c\xef\xff\xb7\xe7\xb0\x03\xd4\x3a\x47\xd4\x27\xf0\x0e\x6e\xbf\x7c\xfd\xf6\xf0\x69\xd3\xd6\x4d\x27\x45\xa4\x91\x22\x39\x4d\xa9\xb8\xb8\x81\x89\x39\x24\x55\x55\x18\x8f\x66\x2f\x7d\xdc\x55\x61\x18\xab\xa6\x6b\x5a\x59\x5f\x5e\xde\x74\x32\x0c\xa3\xb0\x46\x93\x4b\xe5\x3c\xee\x3f\xdf\x8b\xb5\xdf\x95\xce\xa7\x40\x6a\x35\x66\xf1\xf8\x8d\x6d\x3c\xd1\x3a\xdc\x2b\x40\xc0\x72\x74\x4c\x31\xad\x5b\x04\x18\xcc\x4c\xae\xdc\x55\x52\xf0\xbd\xb9\x80\xcb\x0b\x68\xdb\xab\xe5\xf3\x43\xf8\xcc\x21\x73\x81\xae\x95\x46\x42\xce\xb1\x48\xbd\xa9\x84\x0e\x56\xe4\x5a\xa9\x78\x08\x16\xb7\x64\xc5\xbf\x15\xcf\x12\xa9\xcf\xd1\xaa\x65\x7e\x55\x55\x03\x32\xca\x61\xb6\x5a\xce\xb6\x9a\x8f\x8e\xb8\x9a\xfd\x40\x36\x55\x8b\x60\x89\xd3\xc9\x25\x62\xc9\x47\x16\x4b\xaa\xa8\xe9\x89\xf4\x53\xf0\xc6\xf1\x8b\x92\x3f\x38\xeb\x71\x90\x2f\x87\xb5\xd8\x7a\x96\x8b\x94\x1c\x71\xbf\x6f\xfa\xae\xee\xdb\xba\xb9\xee\xeb\x9b\xbe\xbd\x91\x8c\x51\xee\x7e\x09\x00\x93\x7a\x8c\x7a\x32\x7b\x52\xc0\x31\x93\x40\xe6\x68\xb6\x99\xd7\x8d\xcd\xe8\xcc\x48\x89\x7b\xcc\x3c\xf9\xa8\x00\xb7\x43\xb6\x43\x31\x28\xa2\xb1\xc6\xed\xfa\x32\x4b\x22\x56\x70\x5b\x5a\xbf\x23\x16\x7f\x02\x00\x00\xff\xff\x7b\xfa\xc0\x6d\xf8\x03\x00\x00"

func resnet50YmlBytes() ([]byte, error) {
	return bindataRead(
		_resnet50Yml,
		"resnet50.yml",
	)
}

func resnet50Yml() (*asset, error) {
	bytes, err := resnet50YmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resnet50.yml", size: 1016, mode: os.FileMode(420), modTime: time.Unix(1500916950, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vgg19Yml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\x3d\x8f\xdc\x38\x0c\xed\xf5\x2b\xd8\x5c\xb7\x23\x8f\x66\x67\xe6\x66\x54\x1c\x70\xc0\x01\x8b\x6b\xb2\x4d\x90\x26\x08\x0c\xae\x4c\xdb\xca\xca\x92\x20\x51\xf3\x91\x22\xbf\x3d\x90\x3d\xd9\x0f\xa4\xd9\xc6\x10\xcd\xc7\x47\xf2\xf1\x79\x9c\x48\xc3\x97\x87\x07\x75\x14\x7d\xc2\x89\xce\x21\x3d\x6b\x01\xb0\x24\x3e\x93\xcf\x21\xf5\x2e\x9c\x05\xc0\x89\x52\xb6\xc1\x6b\xf8\xa9\xa4\x92\x17\xf1\x12\x2b\xb9\x16\x26\x78\x46\xeb\x29\xd5\x62\x9c\xba\xfd\xb6\x3e\x00\x86\x58\x34\x24\xb4\x31\x85\xef\x64\xb8\x31\x98\x26\xb7\xe2\x17\x5e\x3d\x63\x57\x26\x96\x19\x6e\x3e\x06\x1f\x66\x78\x8c\x66\xbf\x75\xa4\x3f\x56\x79\x43\xdf\x6a\x3f\x30\xd9\xdb\x82\x8e\xb2\x49\x36\xf2\xbc\xef\x3f\x02\xe0\x5f\x0f\x76\xc2\x81\x56\xc6\x61\xce\xb6\xb7\x06\x6b\x12\x4c\xf0\xa7\xe0\x4a\x7d\xa3\x03\x4f\x5c\x05\x95\x02\x16\x8d\xa1\x64\xca\x80\xbf\xff\xc3\xd9\xf2\x08\xea\x08\x0e\xaf\x94\x32\x84\x1e\xee\x2f\xf7\x6f\x39\xa0\xb7\x8e\x29\xe5\x57\x06\x34\xa3\xa5\x13\x65\xf8\x5b\x49\xf5\x17\x70\x88\x2b\x05\xe8\x3b\x38\x1c\xe5\x61\x89\x77\x80\xc6\x94\x84\xe6\x0a\xc1\x03\x8f\x04\xff\xd7\x51\x3f\x11\x83\x19\xd1\x39\xf2\x03\x41\x87\x8c\x99\x18\xac\x87\xcd\x5a\xed\xa4\x48\xd4\x53\x22\x6f\x28\x57\x41\x57\x30\x32\xc7\xac\x9b\x06\xd3\xc5\x9e\x64\x48\x43\x13\xbb\xbe\x51\xdb\xf5\x51\xaa\xdd\x6e\x2f\x63\xd7\x0b\x67\x0d\xf9\x5c\x8d\xf2\xf8\xdf\xa3\xb0\x3e\x16\xbe\x55\xf3\x35\x92\x5e\x24\x9a\xd5\x7e\x27\x60\x1d\x69\x06\xbf\x01\x44\xac\xf6\xab\xbb\x2e\xf7\x04\xe8\xec\x44\xbe\x3a\x2c\x6b\xf8\xaa\xee\xe0\xfe\x0e\x36\x9b\xed\xfc\xf9\x26\x42\xe1\x58\xb8\x42\x97\x4e\x3d\x21\x97\x54\xa9\xde\x75\x42\x0f\x0b\x72\xe9\x54\x85\x07\x87\x4f\xe4\xc4\x9f\x1d\x6f\x14\xb9\x2d\xc9\xe9\x79\x7d\xdd\x34\x55\x26\xd9\x4d\xce\xc8\xc9\x35\xd3\xc5\x13\x37\x53\xe8\xc8\xe5\x66\x26\xac\x71\xbe\xfa\x4c\x2c\xf9\xc2\x62\x4e\x55\x36\x33\x92\x79\x8e\xc1\x7a\x7e\x65\x0a\x67\xef\x02\x76\xf2\xd5\x62\xb3\xaa\x37\xba\xd3\x30\xb4\xea\xd8\x6e\xd6\x6a\xdf\xae\x0f\xed\xe6\x20\x19\x93\x1c\x7e\x08\x00\x9b\x5b\x4c\x66\xb4\x27\xd2\xc0\xa9\x90\x40\xe6\x64\x9f\x0a\x2f\xa7\x9a\xd0\xdb\x9e\x32\xb7\x58\x78\x0c\x49\x03\x3e\x75\xc5\x75\x55\x9a\x84\xd6\x59\x3f\xb4\xb7\x63\xeb\x17\x23\x88\x5f\x01\x00\x00\xff\xff\x05\x02\xaa\xbf\xf9\x03\x00\x00"

func vgg19YmlBytes() ([]byte, error) {
	return bindataRead(
		_vgg19Yml,
		"vgg19.yml",
	)
}

func vgg19Yml() (*asset, error) {
	bytes, err := vgg19YmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vgg19.yml", size: 1017, mode: os.FileMode(420), modTime: time.Unix(1500916950, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"MobileNet_v1_0.25_128.yml": mobilenet_v1_025_128Yml,
	"MobileNet_v1_0.25_224.yml": mobilenet_v1_025_224Yml,
	"MobileNet_v1_0.50_128.yml": mobilenet_v1_050_128Yml,
	"MobileNet_v1_0.50_224.yml": mobilenet_v1_050_224Yml,
	"MobileNet_v1_0.75_128.yml": mobilenet_v1_075_128Yml,
	"MobileNet_v1_0.75_224.yml": mobilenet_v1_075_224Yml,
	"MobileNet_v1_1.0_128.yml": mobilenet_v1_10_128Yml,
	"MobileNet_v1_1.0_224.yml": mobilenet_v1_10_224Yml,
	"inception.yml": inceptionYml,
	"resnet152.yaml": resnet152Yaml,
	"resnet50.yml": resnet50Yml,
	"vgg19.yml": vgg19Yml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"MobileNet_v1_0.25_128.yml": &bintree{mobilenet_v1_025_128Yml, map[string]*bintree{}},
	"MobileNet_v1_0.25_224.yml": &bintree{mobilenet_v1_025_224Yml, map[string]*bintree{}},
	"MobileNet_v1_0.50_128.yml": &bintree{mobilenet_v1_050_128Yml, map[string]*bintree{}},
	"MobileNet_v1_0.50_224.yml": &bintree{mobilenet_v1_050_224Yml, map[string]*bintree{}},
	"MobileNet_v1_0.75_128.yml": &bintree{mobilenet_v1_075_128Yml, map[string]*bintree{}},
	"MobileNet_v1_0.75_224.yml": &bintree{mobilenet_v1_075_224Yml, map[string]*bintree{}},
	"MobileNet_v1_1.0_128.yml": &bintree{mobilenet_v1_10_128Yml, map[string]*bintree{}},
	"MobileNet_v1_1.0_224.yml": &bintree{mobilenet_v1_10_224Yml, map[string]*bintree{}},
	"inception.yml": &bintree{inceptionYml, map[string]*bintree{}},
	"resnet152.yaml": &bintree{resnet152Yaml, map[string]*bintree{}},
	"resnet50.yml": &bintree{resnet50Yml, map[string]*bintree{}},
	"vgg19.yml": &bintree{vgg19Yml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

