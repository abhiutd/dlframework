// Code generated by go-bindata.
// sources:
// frameworks/tensorflow/builtin_models/MobileNet_v1_0.25_128.yml
// frameworks/tensorflow/builtin_models/MobileNet_v1_0.25_224.yml
// frameworks/tensorflow/builtin_models/MobileNet_v1_0.50_128.yml
// frameworks/tensorflow/builtin_models/MobileNet_v1_0.50_224.yml
// frameworks/tensorflow/builtin_models/MobileNet_v1_0.75_128.yml
// frameworks/tensorflow/builtin_models/MobileNet_v1_0.75_224.yml
// frameworks/tensorflow/builtin_models/MobileNet_v1_1.0_128.yml
// frameworks/tensorflow/builtin_models/MobileNet_v1_1.0_224.yml
// frameworks/tensorflow/builtin_models/inception.yml
// frameworks/tensorflow/builtin_models/resnet152.yaml
// frameworks/tensorflow/builtin_models/resnet50.yml
// frameworks/tensorflow/builtin_models/vgg19.yml
// DO NOT EDIT!

package tensorflow

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _mobilenet_v1_025_128Yml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xbd\x72\xdb\x3c\x10\xac\x3f\x3c\xc5\x3d\x80\x05\x8a\xb2\x2c\x7b\x58\x7c\x55\x9a\x14\xb1\x1b\x77\x99\x0c\xe7\x04\x1e\x45\xc4\xf8\x9b\xc3\x51\x3f\x2e\xf2\xec\x19\x80\x1a\xff\x4c\x1a\x37\x1c\x1e\xb9\xbb\x87\xdd\x3b\x04\xf4\xd4\xc1\x8f\xb8\xb7\x8e\x1e\x49\xfa\x63\xdb\xaf\xf5\xe6\xae\x6f\x37\x0f\x6a\x64\xf4\x74\x8a\xfc\xd2\x29\x80\x05\xf8\x4c\x21\x47\x1e\x5d\x3c\x29\x80\x23\x71\xb6\x31\x74\xf0\xa7\xd5\xad\x3e\xab\xb7\xba\xd5\x6b\x65\x62\x10\xb4\x81\xb8\x90\xd1\x0f\xbb\x6d\x79\x01\x38\xa4\xb9\x03\x46\x9b\x38\xfe\x26\x23\x8d\x41\xf6\x6e\x25\x6f\xba\x5d\xc5\xae\x4c\x9a\x2b\xdc\x7c\x0d\x7e\xa8\xf0\x94\xcc\x6e\xeb\xa8\xfb\x1a\xf3\x8a\xbe\x72\xbf\x70\xb2\x8f\x84\x81\xb2\x61\x9b\xa4\xfa\xfd\x5f\xc1\x7b\x84\x19\x90\x09\xb2\x47\xe7\x6e\xc0\xc5\xd3\xca\xa1\x50\x30\x97\xa5\x48\xf1\x44\x0c\x3e\x0e\xe4\x32\x24\x2c\x09\x0b\xb1\x7d\xa5\x01\x24\x82\x27\x12\x90\x89\x80\x29\xc7\x99\x0d\x81\x89\x21\x0b\xa3\x0d\x92\x21\x8e\x80\x70\x44\xb6\x24\x97\x52\xcc\x99\xc0\x60\xa6\xac\x15\xc0\xf3\x64\x33\x04\x92\x32\xaf\xca\xb2\x79\xa1\xb4\x9b\x07\x70\x78\x21\xce\x80\x61\x00\x34\x93\xa5\x23\x65\xd8\xb6\xfa\x16\x24\xa6\x55\x5b\xbf\xef\x76\x7a\x53\xcb\x3b\x40\x63\x66\x46\x73\xd1\xf0\x9f\x62\x1a\x89\x29\x18\xca\x25\xd5\x15\x4c\x22\x29\x77\x4d\x83\x7c\xb6\x47\x1d\xf9\xd0\xa4\x61\x6c\xda\xfb\xf5\x56\xaf\xb7\x0f\xbb\x56\xa7\x61\x54\xce\x1a\x0a\xb9\xac\xcb\xd3\xb7\x27\x65\x43\x9a\xe5\x4a\x97\x4b\xa2\x0e\xac\xc7\x03\xd5\xcc\x3f\xc5\x58\x8c\x57\xf0\x07\xc0\x5b\x44\x79\x99\x2a\xc0\x60\x3d\x85\xb2\x67\xb9\x83\x9f\xed\x0d\xdc\xde\xc0\x66\xb3\xad\x8f\x5f\x2a\xce\x92\x66\x29\xd0\xa5\xd3\x48\x28\x33\x17\xa9\x4f\x9d\x30\xc0\x82\x5c\x3a\x95\xdc\xc0\xe1\x9e\x9c\xfa\xb7\xe3\x55\x22\xf7\x33\xbb\xae\xfa\xef\x9a\x66\x40\x41\x3d\x78\x67\xb4\x77\x8d\x3f\x07\x92\x66\x99\x69\x53\x05\x4b\x9d\x2f\x21\x93\x68\x39\x8b\xaa\xbf\x8a\x9a\x99\xc8\xbc\xa4\x68\x83\xbc\x2b\xc5\x53\x70\x11\x07\xfd\xbe\x68\x35\xd6\xab\x9c\xaf\x6b\x15\x3e\xdf\xcc\x7e\xb3\x6e\xef\xfb\xf5\xae\x6f\xb7\x5a\x90\xf5\xe1\x55\x01\xd8\xdc\x23\x9b\xc9\x1e\x8b\x6d\x74\x99\x14\x8a\xb0\xdd\xcf\xb2\xcc\xce\x63\xb0\x23\x65\xe9\x71\x96\x29\x72\x07\xb8\x1f\x66\x37\x94\xa8\x18\xad\xb3\xe1\xd0\x17\x57\x99\xa4\x83\xef\xc5\xc4\x23\xc9\xdf\x00\x00\x00\xff\xff\x80\x72\x06\x4e\x1e\x04\x00\x00"

func mobilenet_v1_025_128YmlBytes() ([]byte, error) {
	return bindataRead(
		_mobilenet_v1_025_128Yml,
		"MobileNet_v1_0.25_128.yml",
	)
}

func mobilenet_v1_025_128Yml() (*asset, error) {
	bytes, err := mobilenet_v1_025_128YmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "MobileNet_v1_0.25_128.yml", size: 1054, mode: os.FileMode(420), modTime: time.Unix(1497611105, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mobilenet_v1_025_224Yml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xbd\x72\xdb\x3c\x10\xac\x3f\x3c\xc5\x3d\x80\x05\x92\xfa\x24\x39\xc3\x22\x55\x9a\x14\xb1\x1b\x77\x99\x0c\xe7\x04\x1e\x25\xc4\xf8\x9b\xc3\x51\x3f\x2e\xf2\xec\x19\x80\x1a\xff\x4c\x1a\x37\x1c\x1e\xb9\xbb\x87\xdd\x3b\x04\xf4\xd4\xc3\x8f\xb8\xb7\x8e\x1e\x48\x86\x53\x37\xb4\x7a\xbd\x1d\xd6\xeb\x8d\x9a\x18\x3d\x9d\x23\x3f\xf7\x0a\x60\x01\x3e\x51\xc8\x91\x27\x17\xcf\x0a\xe0\x44\x9c\x6d\x0c\x3d\xfc\xe9\x74\xa7\x2f\xea\xb5\xee\x74\xab\x4c\x0c\x82\x36\x10\x17\x32\xfa\x71\xb7\x29\x2f\x00\x87\x34\xf7\xc0\x68\x13\xc7\xdf\x64\xa4\x31\xc8\xde\xad\xe4\x55\xb7\xaf\xd8\x95\x49\x73\x85\x9b\xcf\xc1\x0f\x15\x9e\x92\xd9\x6d\x1c\xf5\x9f\x63\xde\xd0\x37\xee\x27\x4e\xf6\x9e\x30\x52\x36\x6c\x93\x54\xbf\x5f\x15\xbc\x45\x98\x01\x99\x20\x7b\x74\xee\x0e\x5c\x3c\xaf\x1c\x0a\x05\x73\x5d\x8a\x14\xcf\xc4\xe0\xe3\x48\x2e\x43\xc2\x92\xb0\x10\xdb\x17\x1a\x41\x22\x78\x22\x01\x39\x12\x30\xe5\x38\xb3\x21\x30\x31\x64\x61\xb4\x41\x32\xc4\x09\x10\x4e\xc8\x96\xe4\x5a\x8a\x39\x13\x18\xcc\x94\xb5\x02\x78\x3a\xda\x0c\x81\xa4\xcc\xab\xb2\x6c\x5e\x28\xeb\xf5\x06\x1c\x5e\x89\x33\x60\x18\x01\xcd\xd1\xd2\x89\x32\x6c\x5b\xbd\x03\x89\x69\xd5\xd5\xef\xf7\x5b\xdd\xd6\x72\x0b\x68\xcc\xcc\x68\xae\x1a\xfe\x53\x4c\x13\x31\x05\x43\xb9\xa4\xba\x82\xa3\x48\xca\x7d\xd3\x20\x5f\xec\x49\x47\x3e\x34\x69\x9c\x9a\xee\xbe\xdd\xe8\x76\xf3\x65\xd7\xe9\x34\x4e\xca\x59\x43\x21\x97\x75\x79\xfc\xf6\xa8\x6c\x48\xb3\xdc\xe8\x72\x4d\xd4\x83\xf5\x78\xa0\x9a\xf9\x87\x18\x8b\xf1\x0a\x7e\x07\x78\x8d\x28\x2f\x53\x05\x18\xad\xa7\x50\xf6\x2c\xf7\xf0\xb3\xbb\x83\xff\xef\x8a\xc5\xfa\xf8\xa5\xe2\x2c\x69\x96\x02\x5d\x3a\x4d\x84\x32\x73\x91\xfa\xd0\x09\x03\x2c\xc8\xa5\x53\xc9\x0d\x1c\xee\xc9\xa9\x7f\x3b\xde\x24\xf2\x30\xb3\xeb\xab\xff\xbe\x69\x46\x14\xd4\xa3\x77\x46\x7b\xd7\xf8\x4b\x20\x69\x96\x99\x36\x55\xb0\xd4\xf9\x1a\x32\x89\x96\x8b\xa8\xfa\xab\xa8\x99\x23\x99\xe7\x14\x6d\x90\x37\xa5\x78\x0e\x2e\xe2\xa8\xdf\x16\xad\xc6\x7a\x93\xf3\x75\xad\xc2\xc7\x9b\x39\xac\xdb\xee\x7e\x68\x77\x43\xb7\xd1\x82\xac\x0f\x2f\x0a\xc0\xe6\x01\xd9\x1c\xed\xa9\xd8\x46\x97\x49\xa1\x08\xdb\xfd\x2c\xcb\xec\x3c\x06\x3b\x51\x96\x01\x67\x39\x46\xee\x01\xf7\xe3\xec\xc6\x12\x15\xa3\x75\x36\x1c\x86\xe2\x2a\x93\xf4\xf0\xbd\x98\x78\x20\xf9\x1b\x00\x00\xff\xff\x86\x12\xc7\xc7\x1e\x04\x00\x00"

func mobilenet_v1_025_224YmlBytes() ([]byte, error) {
	return bindataRead(
		_mobilenet_v1_025_224Yml,
		"MobileNet_v1_0.25_224.yml",
	)
}

func mobilenet_v1_025_224Yml() (*asset, error) {
	bytes, err := mobilenet_v1_025_224YmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "MobileNet_v1_0.25_224.yml", size: 1054, mode: os.FileMode(420), modTime: time.Unix(1497611105, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mobilenet_v1_050_128Yml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xbd\x72\xdb\x3c\x10\xac\x3f\x3c\xc5\x3d\x80\x05\x8a\xfa\x64\xd9\x61\x91\x2a\x4d\x8a\xd8\x8d\xbb\x4c\x86\x73\x02\x8f\x22\x62\xfc\xcd\xe1\xa8\x1f\x17\x79\xf6\x0c\x40\x8d\x7f\x26\x8d\x1b\x0e\x8f\xdc\xdd\xc3\xee\x1d\x02\x7a\xea\xe0\x47\xdc\x5b\x47\x0f\x24\xfd\xb1\xed\xd7\xfa\x76\xdd\xb7\x9b\x7b\x35\x32\x7a\x3a\x45\x7e\xee\x14\xc0\x02\x7c\xa2\x90\x23\x8f\x2e\x9e\x14\xc0\x91\x38\xdb\x18\x3a\xf8\xd3\xea\x56\x9f\xd5\x6b\xdd\xea\xb5\x32\x31\x08\xda\x40\x5c\xc8\xe8\x87\xdd\xb6\xbc\x00\x1c\xd2\xdc\x01\xa3\x4d\x1c\x7f\x93\x91\xc6\x20\x7b\xb7\x92\x57\xdd\xae\x62\x57\x26\xcd\x15\x6e\x3e\x07\x3f\x54\x78\x4a\x66\xb7\x75\xd4\x7d\x8e\x79\x45\x5f\xb9\x9f\x38\xd9\x7b\xc2\x40\xd9\xb0\x4d\x52\xfd\x7e\x55\xf0\x16\x61\x06\x64\x82\xec\xd1\xb9\x1b\x70\xf1\xb4\x72\x28\x14\xcc\x65\x29\x52\x3c\x11\x83\x8f\x03\xb9\x0c\x09\x4b\xc2\x42\x6c\x5f\x68\x00\x89\xe0\x89\x04\x64\x22\x60\xca\x71\x66\x43\x60\x62\xc8\xc2\x68\x83\x64\x88\x23\x20\x1c\x91\x2d\xc9\xa5\x14\x73\x26\x30\x98\x29\x6b\x05\xf0\x34\xd9\x0c\x81\xa4\xcc\xab\xb2\x6c\x5e\x28\xed\xe6\x1e\x1c\x5e\x88\x33\x60\x18\x00\xcd\x64\xe9\x48\x19\x6e\x77\x7a\x03\x12\xd3\xaa\xad\xdf\xef\xbe\xe8\x5d\x2d\x6f\x01\x8d\x99\x19\xcd\x45\xc3\x7f\x8a\x69\x24\xa6\x60\x28\x97\x54\x57\x30\x89\xa4\xdc\x35\x0d\xf2\xd9\x1e\x75\xe4\x43\x93\x86\xb1\x69\xef\xd6\x5b\xbd\xde\xde\xef\x5a\x9d\x86\x51\x39\x6b\x28\xe4\xb2\x2e\x8f\xdf\x1e\x95\x0d\x69\x96\x2b\x5d\x2e\x89\x3a\xb0\x1e\x0f\x54\x33\xff\x10\x63\x31\x5e\xc1\xef\x00\xaf\x11\xe5\x65\xaa\x00\x83\xf5\x14\xca\x9e\xe5\x0e\x7e\xb6\x37\xf0\xff\x0d\x6c\x36\xdb\xfa\xf8\xa5\xe2\x2c\x69\x96\x02\x5d\x3a\x8d\x84\x32\x73\x91\xfa\xd0\x09\x03\x2c\xc8\xa5\x53\xc9\x0d\x1c\xee\xc9\xa9\x7f\x3b\x5e\x25\x72\x3f\xb3\xeb\xaa\xff\xae\x69\x06\x14\xd4\x83\x77\x46\x7b\xd7\xf8\x73\x20\x69\x96\x99\x36\x55\xb0\xd4\xf9\x12\x32\x89\x96\xb3\xa8\xfa\xab\xa8\x99\x89\xcc\x73\x8a\x36\xc8\x9b\x52\x3c\x05\x17\x71\xd0\x6f\x8b\x56\x63\xbd\xca\xf9\xba\x56\xe1\xe3\xcd\xec\x37\xeb\xf6\xae\x5f\xef\xfa\x76\xab\x05\x59\x1f\x5e\x14\x80\xcd\x3d\xb2\x99\xec\xb1\xd8\x46\x97\x49\xa1\x08\xdb\xfd\x2c\xcb\xec\x3c\x06\x3b\x52\x96\x1e\x67\x99\x22\x77\x80\xfb\x61\x76\x43\x89\x8a\xd1\x3a\x1b\x0e\x7d\x71\x95\x49\x3a\xf8\x5e\x4c\x3c\x90\xfc\x0d\x00\x00\xff\xff\x0d\x86\xf2\x27\x1e\x04\x00\x00"

func mobilenet_v1_050_128YmlBytes() ([]byte, error) {
	return bindataRead(
		_mobilenet_v1_050_128Yml,
		"MobileNet_v1_0.50_128.yml",
	)
}

func mobilenet_v1_050_128Yml() (*asset, error) {
	bytes, err := mobilenet_v1_050_128YmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "MobileNet_v1_0.50_128.yml", size: 1054, mode: os.FileMode(420), modTime: time.Unix(1497611105, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mobilenet_v1_050_224Yml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xbb\x72\xdc\x30\x0c\xac\xc3\xaf\xc0\x07\xf8\x28\xe9\x22\x9f\x3d\x2a\x52\xa5\x49\x11\xbb\x71\x97\xc9\x68\x70\x14\x74\x62\x4c\x91\x1c\x10\xba\x87\x8b\x7c\x7b\x86\xd4\x8d\x1f\x93\xc6\x8d\x46\x90\x76\x17\xdc\x05\xe8\x71\xa6\x0e\x7e\x86\xbd\x75\xf4\x40\xd2\x1f\x9b\xbe\xd6\xb7\x75\xbf\xdd\xb6\x6a\x64\x9c\xe9\x14\xf8\xb9\x53\x00\x2b\xf0\x89\x7c\x0a\x3c\xba\x70\x52\x00\x47\xe2\x64\x83\xef\xe0\x6f\xa3\x1b\x7d\x56\xaf\x75\xa3\x6b\x65\x82\x17\xb4\x9e\x38\x93\x71\x1e\x76\x6d\x7e\x01\x38\xc4\xa5\x03\x46\x1b\x39\xfc\x21\x23\x95\x41\x9e\xdd\x46\x5e\x75\xbb\x82\xdd\x98\xb8\x14\xb8\xf9\x1c\xfc\x50\xe0\x31\x9a\x5d\xeb\xa8\xfb\x1c\xf3\x8a\xbe\x72\x3f\x71\xb2\xf7\x84\x81\x92\x61\x1b\xa5\xf8\xfd\xa6\xe0\x2d\xc2\x04\xc8\x04\x69\x46\xe7\x6e\xc0\x85\xd3\xc6\xa1\x90\x37\x97\xb5\x88\xe1\x44\x0c\x73\x18\xc8\x25\x88\x98\x13\x16\x62\xfb\x42\x03\x48\x80\x99\x48\x40\x26\x02\xa6\x14\x16\x36\x04\x26\xf8\x24\x8c\xd6\x4b\x82\x30\x02\xc2\x11\xd9\x92\x5c\x72\xb1\x24\x02\x83\x89\x92\x56\x00\x4f\x93\x4d\xe0\x49\xf2\xbc\x0a\xcb\xa6\x95\xb2\xdd\xb6\xe0\xf0\x42\x9c\x00\xfd\x00\x68\x26\x4b\x47\x4a\xb0\x6b\x75\x0d\x12\xe2\xa6\x29\xdf\xef\x6f\x75\x5b\xca\x5b\x40\x63\x16\x46\x73\xd1\xf0\x45\x31\x8d\xc4\xe4\x0d\xa5\x9c\xea\x06\x26\x91\x98\xba\xaa\x42\x3e\xdb\xa3\x0e\x7c\xa8\xe2\x30\x56\xcd\x5d\xdd\xea\xba\xbd\xdf\x35\x3a\x0e\xa3\x72\xd6\x90\x4f\x79\x5d\x1e\xbf\x3f\x2a\xeb\xe3\x22\x57\xba\x5c\x22\x75\x60\x67\x3c\x50\xc9\xfc\x43\x8c\xd9\x78\x01\xbf\x03\xbc\x46\x94\xd6\xa9\x02\x0c\x76\x26\x9f\xf7\x2c\x75\xf0\xab\xb9\x81\xaf\x37\xd9\x62\x79\xfc\x56\x61\x91\xb8\x48\x86\xae\x9d\x46\x42\x59\x38\x4b\x7d\xe8\x84\x1e\x56\xe4\xda\x29\xe7\x06\x0e\xf7\xe4\xd4\xff\x1d\xaf\x12\xa9\x5f\xd8\x75\xc5\x7f\x57\x55\x03\x0a\xea\x61\x76\x46\xcf\xae\x9a\xcf\x9e\xa4\x5a\x67\x5a\x15\xc1\x5c\xa7\x8b\x4f\x24\x5a\xce\xa2\xca\xaf\xac\x66\x26\x32\xcf\x31\x58\x2f\x6f\x4a\xe1\xe4\x5d\xc0\x41\xbf\x2d\x5a\x89\xf5\x2a\x37\x97\xb5\xf2\x1f\x6f\x66\xbf\xad\x9b\xbb\xbe\xde\xf5\x4d\xab\x05\x59\x1f\x5e\x14\x80\x4d\x3d\xb2\x99\xec\x31\xdb\x46\x97\x48\xa1\x08\xdb\xfd\x22\xeb\xec\x66\xf4\x76\xa4\x24\x3d\x2e\x32\x05\xee\x00\xf7\xc3\xe2\x86\x1c\x15\xa3\x75\xd6\x1f\xfa\xec\x2a\x91\x74\xf0\x23\x9b\x78\x20\xf9\x17\x00\x00\xff\xff\x90\xa5\x4a\x62\x1e\x04\x00\x00"

func mobilenet_v1_050_224YmlBytes() ([]byte, error) {
	return bindataRead(
		_mobilenet_v1_050_224Yml,
		"MobileNet_v1_0.50_224.yml",
	)
}

func mobilenet_v1_050_224Yml() (*asset, error) {
	bytes, err := mobilenet_v1_050_224YmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "MobileNet_v1_0.50_224.yml", size: 1054, mode: os.FileMode(420), modTime: time.Unix(1497611105, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mobilenet_v1_075_128Yml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xbb\x72\xe3\x38\x10\x8c\x0f\x5f\x31\x1f\x60\x81\xa2\x2c\xcb\x2a\x06\x17\x5d\x72\xc1\xd9\x89\xb3\xab\x2d\xd6\x08\x1c\x8a\x58\xe3\x55\x83\xa1\x1e\x0e\xf6\xdb\xb7\x00\xaa\xfc\xa8\x4d\x9c\xb0\x38\x64\x77\x0f\xba\x67\x10\xd0\x53\x07\xff\xc5\x83\x75\xf4\x44\xd2\x9f\xda\x7e\xad\x1f\x1f\xfa\x76\xb3\x57\x23\xa3\xa7\x73\xe4\xd7\x4e\x01\x2c\xc0\x17\x0a\x39\xf2\xe8\xe2\x59\x01\x9c\x88\xb3\x8d\xa1\x83\x5f\xad\x6e\xf5\x45\xbd\xd7\xad\x5e\x2b\x13\x83\xa0\x0d\xc4\x85\x8c\x7e\xd8\x6d\xcb\x0b\xc0\x31\xcd\x1d\x30\xda\xc4\xf1\x27\x19\x69\x0c\xb2\x77\x2b\x79\xd7\xed\x2a\x76\x65\xd2\x5c\xe1\xe6\x7b\xf0\x63\x85\xa7\x64\x76\x5b\x47\xdd\xf7\x98\x37\xf4\x8d\xfb\x8d\x93\x7d\x26\x0c\x94\x0d\xdb\x24\xd5\xef\xdf\x0a\x3e\x22\xcc\x80\x4c\x90\x3d\x3a\x77\x07\x2e\x9e\x57\x0e\x85\x82\xb9\x2e\x45\x8a\x67\x62\xf0\x71\x20\x97\x21\x61\x49\x58\x88\xed\x1b\x0d\x20\x11\x3c\x91\x80\x4c\x04\x4c\x39\xce\x6c\x08\x4c\x0c\x59\x18\x6d\x90\x0c\x71\x04\x84\x13\xb2\x25\xb9\x96\x62\xce\x04\x06\x33\x65\xad\x00\x5e\x26\x9b\x21\x90\x94\x79\x55\x96\xcd\x0b\xa5\xdd\xec\xc1\xe1\x95\x38\x03\x86\x01\xd0\x4c\x96\x4e\x94\x61\xd7\xea\x3d\x48\x4c\xab\xb6\x7e\xdf\xdf\xeb\x5d\x2d\x1f\x00\x8d\x99\x19\xcd\x55\xc3\x5f\x8a\x69\x24\xa6\x60\x28\x97\x54\x57\x30\x89\xa4\xdc\x35\x0d\xf2\xc5\x9e\x74\xe4\x63\x93\x86\xb1\x69\x1f\xd7\x5b\xbd\xde\xee\x77\xad\x4e\xc3\xa8\x9c\x35\x14\x72\x59\x97\xe7\x7f\x9e\x95\x0d\x69\x96\x1b\x5d\xae\x89\x3a\xb0\x1e\x8f\x54\x33\xff\x12\x63\x31\x5e\xc1\x9f\x00\xef\x11\xe5\x65\xaa\x00\x83\xf5\x14\xca\x9e\xe5\x0e\xfe\x6f\xef\xe0\xfe\x0e\x36\x9b\x6d\x7d\xfc\x50\x71\x96\x34\x4b\x81\x2e\x9d\x46\x42\x99\xb9\x48\x7d\xe9\x84\x01\x16\xe4\xd2\xa9\xe4\x06\x0e\x0f\xe4\xd4\x9f\x1d\x6f\x12\xb9\x9f\xd9\x75\xd5\x7f\xd7\x34\x03\x0a\xea\xc1\x3b\xa3\xbd\x6b\xfc\x25\x90\x34\xcb\x4c\x9b\x2a\x58\xea\x7c\x0d\x99\x44\xcb\x45\x54\xfd\x55\xd4\xcc\x44\xe6\x35\x45\x1b\xe4\x43\x29\x9e\x83\x8b\x38\xe8\x8f\x45\xab\xb1\xde\xe4\x7c\x5d\xab\xf0\xf5\x66\xf6\x9b\x75\xfb\xd8\xaf\x77\x7d\xbb\xd5\x82\xac\x8f\x6f\x0a\xc0\xe6\x1e\xd9\x4c\xf6\x54\x6c\xa3\xcb\xa4\x50\x84\xed\x61\x96\x65\x76\x1e\x83\x1d\x29\x4b\x8f\xb3\x4c\x91\x3b\xc0\xc3\x30\xbb\xa1\x44\xc5\x68\x9d\x0d\xc7\xbe\xb8\xca\x24\x1d\xfc\x5b\x4c\x3c\x91\xfc\x0e\x00\x00\xff\xff\xec\x12\xd5\x52\x1e\x04\x00\x00"

func mobilenet_v1_075_128YmlBytes() ([]byte, error) {
	return bindataRead(
		_mobilenet_v1_075_128Yml,
		"MobileNet_v1_0.75_128.yml",
	)
}

func mobilenet_v1_075_128Yml() (*asset, error) {
	bytes, err := mobilenet_v1_075_128YmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "MobileNet_v1_0.75_128.yml", size: 1054, mode: os.FileMode(420), modTime: time.Unix(1497611105, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mobilenet_v1_075_224Yml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xbb\x72\xe3\x38\x10\x8c\x0f\x5f\x31\x1f\x60\x81\xa2\x4e\x96\x7c\x0c\x2e\xba\xe4\x82\xb5\x13\x67\x5b\x5b\xac\x11\x38\x14\xb1\xc6\xab\x06\x43\x3d\x1c\xec\xb7\x6f\x01\x54\xf9\x51\x9b\x38\x61\x71\xc8\xee\x1e\x74\xcf\x20\xa0\xa7\x0e\xbe\xc5\x83\x75\xf4\x48\xd2\x9f\xda\x7e\xad\xf7\xf7\xfd\x66\xb3\x55\x23\xa3\xa7\x73\xe4\x97\x4e\x01\x2c\xc0\x67\x0a\x39\xf2\xe8\xe2\x59\x01\x9c\x88\xb3\x8d\xa1\x83\x5f\xad\x6e\xf5\x45\xbd\xd5\xad\x5e\x2b\x13\x83\xa0\x0d\xc4\x85\x8c\x7e\xd8\x6d\xcb\x0b\xc0\x31\xcd\x1d\x30\xda\xc4\xf1\x27\x19\x69\x0c\xb2\x77\x2b\x79\xd3\xed\x2a\x76\x65\xd2\x5c\xe1\xe6\x6b\xf0\x63\x85\xa7\x64\x76\x5b\x47\xdd\xd7\x98\x37\xf4\x8d\xfb\x85\x93\x7d\x24\x0c\x94\x0d\xdb\x24\xd5\xef\xbf\x0a\xde\x23\xcc\x80\x4c\x90\x3d\x3a\x77\x07\x2e\x9e\x57\x0e\x85\x82\xb9\x2e\x45\x8a\x67\x62\xf0\x71\x20\x97\x21\x61\x49\x58\x88\xed\x2b\x0d\x20\x11\x3c\x91\x80\x4c\x04\x4c\x39\xce\x6c\x08\x4c\x0c\x59\x18\x6d\x90\x0c\x71\x04\x84\x13\xb2\x25\xb9\x96\x62\xce\x04\x06\x33\x65\xad\x00\x9e\x27\x9b\x21\x90\x94\x79\x55\x96\xcd\x0b\x65\xb3\xd9\x82\xc3\x2b\x71\x06\x0c\x03\xa0\x99\x2c\x9d\x28\xc3\x7e\xad\xf7\x20\x31\xad\xda\xfa\xfd\xe1\x1f\x7d\x5f\xcb\x7b\x40\x63\x66\x46\x73\xd5\xf0\x97\x62\x1a\x89\x29\x18\xca\x25\xd5\x15\x4c\x22\x29\x77\x4d\x83\x7c\xb1\x27\x1d\xf9\xd8\xa4\x61\x6c\xda\xfd\x7a\xab\xd7\xdb\x87\x5d\xab\xd3\x30\x2a\x67\x0d\x85\x5c\xd6\xe5\xe9\xbf\x27\x65\x43\x9a\xe5\x46\x97\x6b\xa2\x0e\xac\xc7\x23\xd5\xcc\x3f\xc5\x58\x8c\x57\xf0\x07\xc0\x5b\x44\x79\x99\x2a\xc0\x60\x3d\x85\xb2\x67\xb9\x83\xef\xed\x1d\xfc\x7d\x57\x2c\xd6\xc7\x0f\x15\x67\x49\xb3\x14\xe8\xd2\x69\x24\x94\x99\x8b\xd4\xa7\x4e\x18\x60\x41\x2e\x9d\x4a\x6e\xe0\xf0\x40\x4e\xfd\xd9\xf1\x26\x91\xfb\x99\x5d\x57\xfd\x77\x4d\x33\xa0\xa0\x1e\xbc\x33\xda\xbb\xc6\x5f\x02\x49\xb3\xcc\xb4\xa9\x82\xa5\xce\xd7\x90\x49\xb4\x5c\x44\xd5\x5f\x45\xcd\x4c\x64\x5e\x52\xb4\x41\xde\x95\xe2\x39\xb8\x88\x83\x7e\x5f\xb4\x1a\xeb\x4d\xce\xd7\xb5\x0a\x9f\x6f\x66\xbf\x59\xb7\xfb\x7e\xbd\xeb\xdb\xad\x16\x64\x7d\x7c\x55\x00\x36\xf7\xc8\x66\xb2\xa7\x62\x1b\x5d\x26\x85\x22\x6c\x0f\xb3\x2c\xb3\xf3\x18\xec\x48\x59\x7a\x9c\x65\x8a\xdc\x01\x1e\x86\xd9\x0d\x25\x2a\x46\xeb\x6c\x38\xf6\xc5\x55\x26\xe9\xe0\xff\x62\xe2\x91\xe4\x77\x00\x00\x00\xff\xff\x5d\xfb\x69\x02\x1e\x04\x00\x00"

func mobilenet_v1_075_224YmlBytes() ([]byte, error) {
	return bindataRead(
		_mobilenet_v1_075_224Yml,
		"MobileNet_v1_0.75_224.yml",
	)
}

func mobilenet_v1_075_224Yml() (*asset, error) {
	bytes, err := mobilenet_v1_075_224YmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "MobileNet_v1_0.75_224.yml", size: 1054, mode: os.FileMode(420), modTime: time.Unix(1497611105, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mobilenet_v1_10_128Yml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xbb\x72\xe3\x38\x10\x8c\x0f\x5f\x31\x1f\x60\x81\xa2\x2c\xcb\x2a\x06\x17\x5d\x72\xc1\xd9\x89\xb3\xab\x2d\xd6\x08\x1c\x8a\x58\xe3\x55\x83\xa1\x1e\x0e\xf6\xdb\xb7\x00\xaa\xfc\xa8\x4d\x9c\xb0\x38\x64\x77\x0f\xba\x67\x10\xd0\x53\x07\xff\xc5\x83\x75\xf4\x44\xd2\x9f\xda\xbe\xd5\xeb\xbe\xdd\xec\xd5\xc8\xe8\xe9\x1c\xf9\xb5\x53\x00\x0b\xee\x85\x42\x8e\x3c\xba\x78\x56\x00\x27\xe2\x6c\x63\xe8\xe0\x57\xab\x5b\x7d\x51\xef\x75\xab\xd7\xca\xc4\x20\x68\x03\x71\x21\xa3\x1f\x76\xdb\xf2\x02\x70\x4c\x73\x07\x8c\x36\x71\xfc\x49\x46\x1a\x83\xec\xdd\x4a\xde\x75\xbb\x8a\x5d\x99\x34\x57\xb8\xf9\x1e\xfc\x58\xe1\x29\x99\xdd\xd6\x51\xf7\x3d\xe6\x0d\x7d\xe3\x7e\xe3\x64\x9f\x09\x03\x65\xc3\x36\x49\xf5\xfb\xb7\x82\x8f\x04\x33\x20\x13\x64\x8f\xce\xdd\x81\x8b\xe7\x95\x43\xa1\x60\xae\x4b\x91\xe2\x99\x18\x7c\x1c\xc8\x65\x48\x58\x12\x16\x62\xfb\x46\x03\x48\x04\x4f\x24\x20\x13\x01\x53\x8e\x33\x1b\x02\x13\x43\x16\x46\x1b\x24\x43\x1c\x01\xe1\x84\x6c\x49\xae\xa5\x98\x33\x81\xc1\x4c\x59\x2b\x80\x97\xc9\x66\x08\x24\x65\x5e\x95\x65\xf3\x42\x69\x37\x7b\x70\x78\x25\xce\x80\x61\x00\x34\x93\xa5\x13\x65\xd8\x6d\x75\x0b\x12\xd3\xaa\xad\xdf\xf7\x0f\xfa\xbe\x96\x0f\x80\xc6\xcc\x8c\xe6\xaa\xe1\x2f\xc5\x34\x12\x53\x30\x94\x4b\xaa\x2b\x98\x44\x52\xee\x9a\x06\xf9\x62\x4f\x3a\xf2\xb1\x49\xc3\xd8\xb4\x8f\xeb\xad\x5e\x6f\xf7\xbb\x56\xa7\x61\x54\xce\x1a\x0a\xb9\xac\xcb\xf3\x3f\xcf\xca\x86\x34\xcb\x8d\x2e\xd7\x44\x1d\x58\x8f\x47\xaa\x99\x7f\x89\xb1\x18\xaf\xe0\x4f\x80\xf7\x88\xf2\x32\x55\x80\xc1\x7a\x0a\x65\xcf\x72\x07\xff\xb7\x77\x70\x7f\x07\x9b\xcd\xb6\x3e\x7e\xa8\x38\x4b\x9a\xa5\x40\x97\x4e\x23\xa1\xcc\x5c\xa4\xbe\x74\xc2\x00\x0b\x72\xe9\x54\x72\x03\x87\x07\x72\xea\xcf\x8e\x37\x89\xdc\xcf\xec\xba\xea\xbf\x6b\x9a\x01\x05\xf5\xe0\x9d\xd1\xde\x35\xfe\x12\x48\x9a\x65\xa6\x4d\x15\x2c\x75\xbe\x86\x4c\xa2\xe5\x22\xaa\xfe\x2a\x6a\x66\x22\xf3\x9a\xa2\x0d\xf2\xa1\x14\xcf\xc1\x45\x1c\xf4\xc7\xa2\xd5\x58\x6f\x72\xbe\xae\x55\xf8\x72\x31\xfb\xcd\xba\x7d\xec\xd7\xbb\xbe\xdd\x6a\x41\xd6\xc7\x37\x05\x60\x73\x8f\x6c\x26\x7b\x2a\xae\xd1\x65\x52\x28\xc2\xf6\x30\xcb\x32\x3a\x8f\xc1\x8e\x94\xa5\xc7\x59\xa6\xc8\x1d\xe0\x61\x98\xdd\x50\x92\x62\xb4\xce\x86\x63\x5f\x4c\x65\x92\x0e\xfe\x2d\x1e\x9e\x48\x7e\x07\x00\x00\xff\xff\xad\x6d\xbb\xc0\x1c\x04\x00\x00"

func mobilenet_v1_10_128YmlBytes() ([]byte, error) {
	return bindataRead(
		_mobilenet_v1_10_128Yml,
		"MobileNet_v1_1.0_128.yml",
	)
}

func mobilenet_v1_10_128Yml() (*asset, error) {
	bytes, err := mobilenet_v1_10_128YmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "MobileNet_v1_1.0_128.yml", size: 1052, mode: os.FileMode(420), modTime: time.Unix(1497611105, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mobilenet_v1_10_224Yml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xbb\x72\xe3\x38\x10\x8c\x0f\x5f\x31\x1f\x60\x81\xa2\x4e\x96\x7c\x0c\x2e\xba\xe4\x82\xb5\x13\x67\x5b\x5b\xac\x11\x38\x14\xb1\xc6\xab\x06\x43\x3d\x1c\xec\xb7\x6f\x01\x54\xf9\x51\x9b\x38\x61\x71\xc8\xee\x1e\x74\xcf\x20\xa0\xa7\x0e\xbe\xc5\x83\x75\xf4\x48\xd2\x9f\xda\xbe\xd5\xeb\x7e\xb3\xd9\xaa\x91\xd1\xd3\x39\xf2\x4b\xa7\x00\x16\xdc\x33\x85\x1c\x79\x74\xf1\xac\x00\x4e\xc4\xd9\xc6\xd0\xc1\xaf\x56\xb7\xfa\xa2\xde\xea\x56\xaf\x95\x89\x41\xd0\x06\xe2\x42\x46\x3f\xec\xb6\xe5\x05\xe0\x98\xe6\x0e\x18\x6d\xe2\xf8\x93\x8c\x34\x06\xd9\xbb\x95\xbc\xe9\x76\x15\xbb\x32\x69\xae\x70\xf3\x35\xf8\xb1\xc2\x53\x32\xbb\xad\xa3\xee\x6b\xcc\x1b\xfa\xc6\xfd\xc2\xc9\x3e\x12\x06\xca\x86\x6d\x92\xea\xf7\x5f\x05\xef\x09\x66\x40\x26\xc8\x1e\x9d\xbb\x03\x17\xcf\x2b\x87\x42\xc1\x5c\x97\x22\xc5\x33\x31\xf8\x38\x90\xcb\x90\xb0\x24\x2c\xc4\xf6\x95\x06\x90\x08\x9e\x48\x40\x26\x02\xa6\x1c\x67\x36\x04\x26\x86\x2c\x8c\x36\x48\x86\x38\x02\xc2\x09\xd9\x92\x5c\x4b\x31\x67\x02\x83\x99\xb2\x56\x00\xcf\x93\xcd\x10\x48\xca\xbc\x2a\xcb\xe6\x85\xb2\xd9\x6c\xc1\xe1\x95\x38\x03\x86\x01\xd0\x4c\x96\x4e\x94\x61\xbf\xd6\x7b\x90\x98\x56\x6d\xfd\xfe\xf0\x8f\xbe\xaf\xe5\x3d\xa0\x31\x33\xa3\xb9\x6a\xf8\x4b\x31\x8d\xc4\x14\x0c\xe5\x92\xea\x0a\x26\x91\x94\xbb\xa6\x41\xbe\xd8\x93\x8e\x7c\x6c\xd2\x30\x36\xed\x7e\xbd\xd5\xeb\xed\xc3\xae\xd5\x69\x18\x95\xb3\x86\x42\x2e\xeb\xf2\xf4\xdf\x93\xb2\x21\xcd\x72\xa3\xcb\x35\x51\x07\xd6\xe3\x91\x6a\xe6\x9f\x62\x2c\xc6\x2b\xf8\x03\xe0\x2d\xa2\xbc\x4c\x15\x60\xb0\x9e\x42\xd9\xb3\xdc\xc1\xf7\xf6\x0e\xfe\xbe\x2b\x16\xeb\xe3\x87\x8a\xb3\xa4\x59\x0a\x74\xe9\x34\x12\xca\xcc\x45\xea\x53\x27\x0c\xb0\x20\x97\x4e\x25\x37\x70\x78\x20\xa7\xfe\xec\x78\x93\xc8\xfd\xcc\xae\xab\xfe\xbb\xa6\x19\x50\x50\x0f\xde\x19\xed\x5d\xe3\x2f\x81\xa4\x59\x66\xda\x54\xc1\x52\xe7\x6b\xc8\x24\x5a\x2e\xa2\xea\xaf\xa2\x66\x26\x32\x2f\x29\xda\x20\xef\x4a\xf1\x1c\x5c\xc4\x41\xbf\x2f\x5a\x8d\xf5\x26\xe7\xeb\x5a\x85\x4f\x17\xb3\xdf\xac\xdb\x7d\xbf\xde\xf5\xed\x56\x0b\xb2\x3e\xbe\x2a\x00\x9b\x7b\x64\x33\xd9\x53\x71\x8d\x2e\x93\x42\x11\xb6\x87\x59\x96\xd1\x79\x0c\x76\xa4\x2c\x3d\xce\x32\x45\xee\x00\x0f\xc3\xec\x86\x92\x14\xa3\x75\x36\x1c\xfb\x62\x2a\x93\x74\xf0\x7f\xf1\xf0\x48\xf2\x3b\x00\x00\xff\xff\x73\xc3\x75\xc1\x1c\x04\x00\x00"

func mobilenet_v1_10_224YmlBytes() ([]byte, error) {
	return bindataRead(
		_mobilenet_v1_10_224Yml,
		"MobileNet_v1_1.0_224.yml",
	)
}

func mobilenet_v1_10_224Yml() (*asset, error) {
	bytes, err := mobilenet_v1_10_224YmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "MobileNet_v1_1.0_224.yml", size: 1052, mode: os.FileMode(420), modTime: time.Unix(1497611105, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _inceptionYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xc1\x6e\xdb\x3a\x10\xbc\xf3\x2b\xf6\xf2\x6e\x31\x65\x39\x71\xf2\xc2\xc3\x03\x1e\xda\x4b\x80\xb6\x01\xda\xa2\x97\x22\x10\xd6\xe4\x4a\x62\x4b\x91\x04\xb9\xb2\x9d\x1e\xfa\xed\x05\x29\x27\x4e\xd0\x4b\x2e\x02\x17\x3b\x3b\x3b\x9a\x1d\x8f\x13\x29\xb8\xf3\x9a\x22\xdb\xe0\x45\x9f\x70\xa2\x43\x48\x3f\x95\x00\x58\x9a\x5f\xc9\xe7\x90\x7a\x17\x0e\x02\x60\x4f\x29\xdb\xe0\x15\xfc\x6e\x65\x2b\x8f\xe2\xb9\xbe\x94\x6b\xa1\x83\x67\xb4\x9e\x52\x19\xc6\xc9\x5c\x5f\x95\x07\xc0\x10\x67\x05\x09\x6d\x4c\xe1\x07\x69\x6e\x34\xa6\xc9\xad\xf8\x99\x57\x55\xec\x4a\xc7\xb9\xc2\xf5\xdb\xe0\x43\x85\xc7\xa8\xaf\xaf\x1c\xa9\xb7\x4d\x9e\xd0\xa7\xd9\x37\x28\x7b\x39\x60\x28\xeb\x64\xab\x4f\x0a\xfe\x13\x00\xff\x7b\xb0\x13\x0e\xb4\xd2\x0e\x73\xb6\xbd\xd5\x58\x9a\xa0\x83\xdf\x07\x37\x97\x37\x3a\xf0\xc4\xc5\x50\x29\xe0\xec\x33\xa0\x1e\x2d\xed\x29\xc3\xcd\xbf\x72\xfd\x0f\x70\x88\xab\x16\xd0\x1b\xb8\xbd\x94\xb7\x4b\xbd\x05\xd4\x7a\x4e\xa8\x1f\x21\x78\xe0\x91\xe0\xee\xc3\x97\x6f\x9f\xdf\xc1\x66\xdd\x6e\x60\x8f\xce\x9a\x65\x9d\x41\xc6\x4c\x5c\x17\x70\x59\x9e\x6d\xe6\x0c\xa1\x87\x9e\x0e\x94\x80\x47\xf4\xb0\xd9\x7e\x84\x88\xe5\xba\x4c\x29\x4b\x91\xa8\xa7\x44\x5e\x53\x2e\xd6\xad\x60\x64\x8e\x59\x35\x0d\xa6\xa3\xdd\xcb\x90\x86\x26\x9a\xbe\x69\xb7\xed\x46\xae\xd7\xdb\xeb\x1b\x19\x4d\x2f\x9c\xd5\xe4\x73\xc9\xc4\xfd\xfb\x7b\x61\x7d\x9c\xf9\x34\xce\x8f\x91\xd4\xe2\x46\x35\xf6\x95\x57\x45\x7b\x05\xbf\x00\x9c\xb5\x2c\xa7\x03\x30\x76\x22\x5f\xc2\x94\x15\x7c\x6f\x2f\xe0\xf2\x02\x36\x9b\xab\xfa\x79\x38\x41\x26\x42\x5f\x9a\xed\xcd\x05\x3c\x7d\x1e\x44\x98\x39\xce\x5c\x68\x16\x15\x3d\x21\xcf\xa9\xac\x79\xa5\x02\x3d\x2c\xc8\x45\x45\xb9\x0b\x38\xdc\x91\x13\x7f\xab\x39\x51\xe4\x6e\x4e\x4e\x55\x6f\x54\xd3\x14\x9f\xa5\x99\x9c\x96\x93\x6b\xa6\xa3\x27\x6e\xa6\x60\xc8\xe5\xa6\x12\x96\x3a\x3f\xfa\x72\x09\x3e\xb2\xa8\xad\xc2\xb6\xc3\x4c\x67\x9e\xe2\x71\xe6\x90\x70\x20\x39\x84\x30\x38\xc2\x68\xb3\xd4\x61\x6a\x4c\x38\x78\x17\xd0\xc8\x73\xfe\xea\x21\x9e\x96\x3c\x85\x67\x3b\xca\x5f\x36\x0a\x80\x21\x61\x1c\xbb\x88\x3c\x2a\x38\xcf\x74\xcf\xc0\xae\x02\x64\xdc\x09\x00\x9b\x3b\x4c\x7a\xb4\x7b\x52\xc0\x69\x26\x81\xcc\xc9\xee\x66\x5e\x02\x30\xa1\xb7\x3d\x65\xee\x70\xe6\x31\x24\x05\xb8\x33\xb3\x33\xc5\xd3\x84\xd6\x59\x3f\x74\xa7\x98\x29\xb8\x2b\x7f\xfb\x89\x58\xfc\x09\x00\x00\xff\xff\x4e\x74\x6e\xf2\x3d\x04\x00\x00"

func inceptionYmlBytes() ([]byte, error) {
	return bindataRead(
		_inceptionYml,
		"inception.yml",
	)
}

func inceptionYml() (*asset, error) {
	bytes, err := inceptionYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "inception.yml", size: 1085, mode: os.FileMode(420), modTime: time.Unix(1497623566, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resnet152Yaml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\x4d\x6f\xdb\x30\x0c\x3d\x4f\xbf\x82\x3f\xa0\x91\x63\xa7\xc9\x32\x1f\x06\x0c\xdb\xa5\xc0\xd0\x02\x5d\xb1\xcb\x30\x18\x8c\x4c\xc7\x5a\x65\x49\x10\xe9\x7c\xec\xb0\xdf\x3e\xc8\xce\xfa\x81\x5d\x7a\x09\x42\xf3\xbd\x47\xbe\x27\x7a\x1c\xa8\x86\x7b\xe2\x5b\x92\x72\x5d\xa9\x2e\xe1\x40\xc7\x90\x1e\x6b\x05\x30\x37\x1f\xc8\x73\x48\x9d\x0b\x47\x05\x70\xa0\xc4\x36\xf8\x1a\xfe\x94\xba\xd4\x27\xf5\x54\x97\x7a\xa9\x4c\xf0\x82\xd6\x53\xca\x64\x1c\xda\xcd\x75\xfe\x03\xb0\x8f\x63\x0d\x09\x6d\x4c\xe1\x17\x19\x29\x0c\xa6\xc1\x2d\xe4\x49\xb7\x9e\xb0\x0b\x13\xc7\x09\x6e\xde\x06\xdf\x4f\xf0\x18\xcd\xe6\xda\x51\xfd\x36\xe6\x05\x7d\xe1\xbe\x61\xb3\x97\x84\x96\xd8\x24\x1b\x65\xf2\xfb\x51\x01\x7c\xf2\x60\x07\xdc\xd3\xc2\x38\x64\xb6\x9d\x35\x98\x9b\xe0\x49\x72\x84\xb0\x1b\xad\x13\x08\x1d\x38\x3c\x53\x62\x90\x1e\x05\x1c\x61\xf2\x90\x88\x6d\x3b\xa2\x83\x6e\xf4\x26\x93\x18\x8e\x3a\x69\x99\xa1\x60\x7d\x1c\x85\xb5\x02\x78\xe8\x2d\x3f\x09\x9a\xe0\xd9\xb2\x70\xd6\x2c\xd7\xd5\x3f\x5d\xf4\x2d\xa0\xe9\x2d\x1d\x88\xe1\xfd\x46\x6f\x41\x42\x5c\x94\xd3\xf7\x0f\x2b\x5d\x4d\xe5\x1a\xd0\x98\x31\xa1\x39\x43\xf0\x70\xf3\xf5\xdb\xf7\xfb\xcf\x8b\x6a\x59\xae\x35\xbc\x53\x89\x3a\x4a\xe4\x0d\x71\x0e\x72\x01\xbd\x48\xe4\xba\x28\x30\x9d\xec\x41\x87\xb4\x2f\x62\xdb\x15\xe5\xba\xac\xf4\x72\xb5\xda\xae\x75\x6c\x3b\xe5\xac\x21\xcf\xf9\x42\xee\xbe\xdc\xa9\x79\xe5\x99\x2e\xe7\x48\xf5\x9c\xcd\x14\xf3\xab\xe4\xa4\xa7\xd9\xdf\x0b\x40\xc4\x7c\x77\x42\x89\xe7\x87\x04\x68\xed\x40\x3e\x9f\x16\xd7\xf0\xa3\xbc\x82\xd5\x15\x54\xd5\xf5\xf4\xf3\x53\x85\x51\xe2\x28\x19\x3a\x4f\xea\x08\x65\x4c\x59\xea\xd5\x24\xf4\x30\x23\xe7\x49\x39\x46\x70\xb8\x23\xa7\xfe\x9f\x78\x91\xe0\x66\x4c\xae\x9e\xfc\xd7\x45\xd1\xa2\xa0\x6e\x07\x67\xf4\xe0\x8a\xe1\xe4\x49\x8a\x21\xb4\xe4\xb8\x98\x04\x73\xcd\x67\xcf\x24\x5a\x4e\xa2\xa6\x56\x56\x33\x3d\x99\xc7\x18\xac\x97\x67\xa5\x70\xf4\x2e\x60\xab\x9f\x6f\x6b\x8a\xf5\x22\x97\x88\x3d\x49\x73\x28\x9b\x72\x5d\x35\xd5\xb2\xdc\x34\xcb\x6d\x53\x6d\xb5\x60\xd2\xfb\xdf\x0a\xc0\x72\x83\xc9\xf4\xf6\x90\xed\xa2\x63\x52\x28\x92\xec\x6e\x94\xf9\xcd\x06\xf4\xb6\x23\x96\x06\x47\xe9\x43\xaa\x01\x77\xed\xe8\xda\x1c\x51\x42\xeb\xac\xdf\x37\xd9\x0d\x93\xd4\x70\x93\x97\xbf\x25\xf9\x1b\x00\x00\xff\xff\x47\xdd\xc2\x87\xfd\x03\x00\x00"

func resnet152YamlBytes() ([]byte, error) {
	return bindataRead(
		_resnet152Yaml,
		"resnet152.yaml",
	)
}

func resnet152Yaml() (*asset, error) {
	bytes, err := resnet152YamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resnet152.yaml", size: 1021, mode: os.FileMode(420), modTime: time.Unix(1497531314, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resnet50Yml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xcb\x6e\xdc\x3a\x0c\x5d\x5f\x7d\x05\x3f\x20\x23\x3f\x12\xe7\xe6\x7a\x71\x81\xa2\xdd\x04\x28\x12\x20\x0d\xba\x29\x0a\x83\x23\xd3\x63\x35\xb2\x24\x88\xf4\x3c\xba\xe8\xb7\x17\xb2\xa7\x79\xa0\x9b\x6c\x06\x43\xf3\x9c\x43\x9e\x23\x7a\x9c\xa8\x85\x07\xe2\x3b\x92\xa6\x54\x43\xc2\x89\x0e\x21\x3d\xb5\x0a\x60\xed\x3d\x92\xe7\x90\x06\x17\x0e\x0a\x60\x4f\x89\x6d\xf0\x2d\xfc\xaa\x74\xa5\x8f\xea\xb9\xae\x74\xa9\x4c\xf0\x82\xd6\x53\xca\x64\x9c\xfa\xeb\xab\xfc\x07\x60\x17\xe7\x16\x12\xda\x98\xc2\x0f\x32\x52\x18\x4c\x93\xdb\xc8\xb3\x6e\xbb\x60\x37\x26\xce\x0b\xdc\xbc\x0f\xbe\x5b\xe0\x31\x9a\xeb\x2b\x47\xed\xfb\x98\x67\xf4\x99\xfb\x8e\xcd\x5e\x13\x7a\x62\x93\x6c\x94\xc5\xef\xff\x0a\xe0\x83\x07\x3b\xe1\x8e\x36\xc6\x21\xb3\x1d\xac\xc1\xdc\x04\x4f\x92\x23\x84\xed\x6c\x9d\x40\x18\xc0\xe1\x89\x12\x83\x8c\x28\xe0\x08\x93\x87\x44\x6c\xfb\x19\x1d\x0c\xb3\x37\x99\xc4\x70\xd0\x49\xcb\x0a\x05\xeb\xe3\x2c\xac\x15\xc0\xe3\x68\xf9\x59\xd0\x04\xcf\x96\x85\xb3\x66\x53\xfe\x91\x45\xdf\x03\x9a\xd1\xd2\x9e\x18\xfe\x6d\x74\x0d\x12\xe2\xa6\x5a\xbe\xff\x57\x9f\xcb\x06\xd0\x98\x39\xa1\x39\x41\xf0\x70\xfb\xf9\xcb\xd7\x87\x8f\x9b\xba\xac\x1a\x0d\xff\xa8\x44\x03\x25\xf2\x86\x38\xe7\xb8\x81\x51\x24\x72\x5b\x14\x98\x8e\x76\xaf\x43\xda\x15\xb1\x1f\x8a\xaa\xa9\x6a\x5d\x5e\x5e\xde\x34\x3a\xf6\x83\x72\xd6\x90\xe7\x7c\x20\xf7\x9f\xee\xd5\xba\xf1\x4a\x97\x53\xa4\x76\x8d\x66\x49\xf9\x4d\x70\x32\xd2\x6a\xef\x15\x20\x62\x3e\x3b\xa1\xc4\xeb\x3b\x02\xf4\x76\x22\x9f\x2f\x8b\x5b\xf8\x56\x5d\xc0\xe5\x05\xd4\xf5\xd5\xf2\xf3\x5d\x85\x59\xe2\x2c\x19\xba\x4e\x1a\x08\x65\x4e\x59\xea\xcd\x24\xf4\xb0\x22\xd7\x49\x39\x45\x70\xb8\x25\xa7\xfe\x9e\x78\x96\xe0\x6e\x4e\xae\x5d\xfc\xb7\x45\xd1\xa3\xa0\xee\x27\x67\xf4\xe4\x8a\xe9\xe8\x49\x8a\x29\xf4\xe4\xb8\x58\x04\x73\xcd\x27\xcf\x24\x5a\x8e\xa2\x96\x56\x56\x33\x23\x99\xa7\x18\xac\x97\x17\xa5\x70\xf0\x2e\x60\xaf\x5f\x4e\x6b\x89\xf5\x2c\x97\x88\x3d\x49\xb7\xaf\xba\xa6\xec\xea\xb2\xba\xee\xca\x9b\xae\xbe\xd1\x82\x49\xef\x7e\x2a\x00\xcb\x1d\x26\x33\xda\x7d\x76\x8b\x8e\x49\xa1\x48\xb2\xdb\x59\xd6\x27\x9b\xd0\xdb\x81\x58\x3a\x9c\x65\x0c\xa9\x05\xdc\xf6\xb3\xeb\x73\x42\x09\xad\xb3\x7e\xd7\x65\x33\x4c\xd2\xc2\x6d\xde\xfd\x8e\xe4\x77\x00\x00\x00\xff\xff\xae\x28\x02\x00\xfa\x03\x00\x00"

func resnet50YmlBytes() ([]byte, error) {
	return bindataRead(
		_resnet50Yml,
		"resnet50.yml",
	)
}

func resnet50Yml() (*asset, error) {
	bytes, err := resnet50YmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resnet50.yml", size: 1018, mode: os.FileMode(420), modTime: time.Unix(1497531314, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vgg19Yml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\x3d\x8f\xdc\x38\x0c\xed\xf5\x2b\xd8\x5c\xb7\x23\x8f\x66\x67\xe6\x66\x54\x1c\x70\xc0\x01\x8b\x6b\xb2\x4d\x90\x26\x08\x0c\xae\x4c\xdb\xca\xca\x92\x20\x51\xf3\x91\x22\xbf\x3d\x90\x3d\xd9\x0f\xa4\xd9\xc6\x10\xcd\xf7\x1e\xc9\x47\x7a\x9c\x48\xc3\x97\x87\x07\x75\x14\x7d\xc2\x89\xce\x21\x3d\x6b\x01\xb0\x24\x3e\x93\xcf\x21\xf5\x2e\x9c\x05\xc0\x89\x52\xb6\xc1\x6b\xf8\xa9\xa4\x92\x17\xf1\x12\x2b\xb9\x06\x10\x26\x78\x46\xeb\x29\x55\x3a\x4e\xdd\x7e\x5b\x1f\x00\x43\x2c\x1a\x12\xda\x98\xc2\x77\x32\xdc\x18\x4c\x93\x5b\xf1\x8b\xb2\x9e\xb1\x2b\x13\xcb\x0c\x37\x1f\x83\x0f\x33\x3c\x46\xb3\xdf\x3a\xd2\x1f\x63\xde\xd0\x37\xee\x07\x3a\x7b\x4b\xe8\x28\x9b\x64\x23\xcf\x13\xff\x23\x00\xfe\xf5\x60\x27\x1c\x68\x65\x1c\xe6\x6c\x7b\x6b\xb0\x26\xc1\x04\x7f\x0a\xae\xd4\x37\x3a\xf0\xc4\xd5\x52\x29\x60\x71\x19\x4a\xa6\x0c\xf8\xfb\x3f\x9c\x2d\x8f\xa0\x8e\xe0\xf0\x4a\x29\x43\xe8\xe1\xfe\x72\xff\x56\x03\x7a\xeb\x98\x52\x7e\x55\x40\x33\x5a\x3a\x51\x86\xbf\x95\x54\x7f\x01\x87\xb8\x52\x80\xbe\x83\xc3\x51\x1e\x96\x78\x07\x68\x4c\x49\x68\xae\x10\x3c\xf0\x48\xf0\x7f\x6d\xf5\x13\x31\x98\x11\x9d\x23\x3f\x10\x74\xc8\x98\x89\xc1\x7a\xd8\xac\xd5\x4e\x8a\x44\x3d\x25\xf2\x86\x72\x35\x74\x05\x23\x73\xcc\xba\x69\x30\x5d\xec\x49\x86\x34\x34\xb1\xeb\x1b\xb5\x5d\x1f\xa5\xda\xed\xf6\x32\x76\xbd\x70\xd6\x90\xcf\xf5\x54\x1e\xff\x7b\x14\xd6\xc7\xc2\x37\x36\x5f\x23\xe9\xc5\xa2\xd9\xed\x77\x06\xd6\x96\x66\xf0\x1b\x40\xc4\x7a\x80\x75\xd6\x65\x9f\x00\x9d\x9d\xc8\xd7\x1b\xcb\x1a\xbe\xaa\x3b\xb8\xbf\x83\xcd\x66\x3b\x7f\xbe\x89\x50\x38\x16\xae\xd0\xa5\x52\x4f\xc8\x25\x55\xa9\x77\x95\xd0\xc3\x82\x5c\x2a\x55\xe3\xc1\xe1\x13\x39\xf1\x67\xc5\x9b\x44\x6e\x4b\x72\x7a\x1e\x5f\x37\x4d\xb5\x49\x76\x93\x33\x72\x72\xcd\x74\xf1\xc4\xcd\x14\x3a\x72\xb9\x99\x05\x6b\x9c\xaf\x3e\x13\x4b\xbe\xb0\x98\x53\x55\xcd\x8c\x64\x9e\x63\xb0\x9e\x5f\x95\xc2\xd9\xbb\x80\x9d\x7c\x3d\xb1\xd9\xd5\x9b\xdc\x69\x18\x5a\x75\x6c\x37\x6b\xb5\x6f\xd7\x87\x76\x73\x90\x8c\x49\x0e\x3f\x04\x32\x27\xfb\x54\x78\xd9\xcb\x84\xde\xf6\x94\xb9\xc5\xc2\x63\x48\x1a\xf0\xa9\x2b\xae\xab\x3e\x24\xb4\xce\xfa\xa1\xbd\x6d\x56\xbf\x6c\x5d\xfc\x0a\x00\x00\xff\xff\xba\xb0\xbf\x90\xe8\x03\x00\x00"

func vgg19YmlBytes() ([]byte, error) {
	return bindataRead(
		_vgg19Yml,
		"vgg19.yml",
	)
}

func vgg19Yml() (*asset, error) {
	bytes, err := vgg19YmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vgg19.yml", size: 1000, mode: os.FileMode(420), modTime: time.Unix(1497531314, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"MobileNet_v1_0.25_128.yml": mobilenet_v1_025_128Yml,
	"MobileNet_v1_0.25_224.yml": mobilenet_v1_025_224Yml,
	"MobileNet_v1_0.50_128.yml": mobilenet_v1_050_128Yml,
	"MobileNet_v1_0.50_224.yml": mobilenet_v1_050_224Yml,
	"MobileNet_v1_0.75_128.yml": mobilenet_v1_075_128Yml,
	"MobileNet_v1_0.75_224.yml": mobilenet_v1_075_224Yml,
	"MobileNet_v1_1.0_128.yml": mobilenet_v1_10_128Yml,
	"MobileNet_v1_1.0_224.yml": mobilenet_v1_10_224Yml,
	"inception.yml": inceptionYml,
	"resnet152.yaml": resnet152Yaml,
	"resnet50.yml": resnet50Yml,
	"vgg19.yml": vgg19Yml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"MobileNet_v1_0.25_128.yml": &bintree{mobilenet_v1_025_128Yml, map[string]*bintree{}},
	"MobileNet_v1_0.25_224.yml": &bintree{mobilenet_v1_025_224Yml, map[string]*bintree{}},
	"MobileNet_v1_0.50_128.yml": &bintree{mobilenet_v1_050_128Yml, map[string]*bintree{}},
	"MobileNet_v1_0.50_224.yml": &bintree{mobilenet_v1_050_224Yml, map[string]*bintree{}},
	"MobileNet_v1_0.75_128.yml": &bintree{mobilenet_v1_075_128Yml, map[string]*bintree{}},
	"MobileNet_v1_0.75_224.yml": &bintree{mobilenet_v1_075_224Yml, map[string]*bintree{}},
	"MobileNet_v1_1.0_128.yml": &bintree{mobilenet_v1_10_128Yml, map[string]*bintree{}},
	"MobileNet_v1_1.0_224.yml": &bintree{mobilenet_v1_10_224Yml, map[string]*bintree{}},
	"inception.yml": &bintree{inceptionYml, map[string]*bintree{}},
	"resnet152.yaml": &bintree{resnet152Yaml, map[string]*bintree{}},
	"resnet50.yml": &bintree{resnet50Yml, map[string]*bintree{}},
	"vgg19.yml": &bintree{vgg19Yml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

